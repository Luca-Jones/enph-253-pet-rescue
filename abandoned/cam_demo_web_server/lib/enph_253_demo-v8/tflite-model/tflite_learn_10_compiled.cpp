/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 09.06.2025 22:08:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242656;
#else
constexpr int kTensorArenaSize = 241632;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 19965, -27758, -28696, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00027071830118075013, 0.0002143010642612353, 0.00021154900605324656, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 7,46,118,-57,-87,-3,10,15,-16,61,20,15,-25,-72,75,17,-50,42,104,87,-57,-29,69,-49,-127,76,-54,39,121,33,-18,33, 
  /* [1][0][][] */ 66,-43,-73,14,-16,127,-25,-13,122,-73,-3,-115,-63,103,36,-51,90,-45,-38,-95,-118,21,103,74,36,28,4,-33,-98,-58,-1,-61, 
  /* [2][0][][] */ -30,78,-88,75,87,-41,-36,115,93,25,125,-49,-100,-89,85,119,-84,-54,-9,-112,77,118,-75,-102,96,-62,-17,-127,-26,-94,86,-61, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0041827824898064137, 0.0033110976219177246, 0.0032685764599591494, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 157, 178, 398, -311, -67, -7, 154, 5, -40, 648, -31, 1338, -352, -119, -115, -8, -57, -340, 1309, -249, -89, -85, -27, 313, 189, 1190, -402, 80, 1499, 400, -264, 1677, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3972104322165251e-05, 4.2763855162775144e-05, 4.1683440940687433e-05, 4.1814670112216845e-05, 4.3192212615394965e-05, 4.7375586291309446e-05, 4.376316792331636e-05, 4.467821418074891e-05, 4.5171236706664786e-05, 4.9824800953501835e-05, 4.2812323954422027e-05, 5.7729328545974568e-05, 4.3880769226234406e-05, 4.4521810195874423e-05, 4.3836160330101848e-05, 4.4487082050181925e-05, 4.3328607716830447e-05, 4.3917898437939584e-05, 6.3834602769929916e-05, 4.4304939365247265e-05, 4.5731969294138253e-05, 4.6258261136244982e-05, 4.7083714889595285e-05, 4.5555574615718797e-05, 4.9177611799677834e-05, 4.3420892325229943e-05, 4.7310339141404256e-05, 4.4438031181925908e-05, 5.4779418860562146e-05, 4.1612875065766275e-05, 4.1127470467472449e-05, 5.2933308325009421e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -63,-57,94,4,108,-31,-85,-87,56,-101,-100,-2,58,14,-49,66,-50,-27,-68,-44,-70,-98,11,101,-104,13,81,-59,119,19,-9,-85,83,-58,-96,59,-100,-82,-97,33,75,-75,-89,106,38,-95,111,-11,19,-39,-38,109,-71,-53,-87,87,1,82,127,-99,-73,93,-51,68,-9,20,70,93,64,99,98,-112,109,-114,38,84,-90,21,-58,36,54,31,81,8,-56,-42,-71,106,27,114,-20,-114,6,61,26,21, 
  /* [1][0][][] */ -54,40,-68,0,-42,81,44,5,85,-107,-101,116,56,-19,31,49,113,-37,32,123,-39,-2,36,35,21,16,-37,113,12,-16,96,-62,58,107,-3,26,54,67,-12,-59,-58,11,-25,-96,-29,36,-30,-51,-23,-96,117,62,8,88,-73,-42,46,78,46,84,-44,108,-54,-100,-55,42,80,46,103,26,4,16,-126,98,-53,52,82,-47,-35,57,-72,87,-45,-127,34,127,-80,-59,89,87,97,10,94,98,34,-6, 
  /* [2][0][][] */ 50,54,-38,108,-63,-36,96,113,-95,118,-36,115,91,-17,96,-112,-51,-26,47,46,-105,-5,127,27,-7,77,109,30,-74,68,87,91,-71,-19,-94,-92,-76,98,126,-29,-120,-77,20,1,-78,116,-30,-74,109,20,87,-100,-36,61,26,17,-64,86,-83,13,-31,76,-47,63,83,44,61,92,-93,71,10,-79,33,-67,41,46,-66,-11,9,34,38,-105,-17,-52,5,-99,-18,-43,89,116,-22,-12,-53,-87,-56,-69, 
  /* [3][0][][] */ 69,-7,32,-32,-73,38,-117,26,46,11,64,12,93,101,72,-1,106,100,-71,21,123,-95,-74,-119,-41,-114,-80,106,50,-98,84,6,-68,-44,-20,-27,-100,-28,26,48,-28,-96,-104,-4,72,28,-53,-89,64,-79,46,0,86,22,94,-99,-125,-127,-124,-68,-91,31,-35,68,52,-32,-68,-37,-30,-80,-7,109,17,-115,50,-58,35,93,98,-82,-89,-122,44,93,28,47,-50,-115,-80,45,3,-115,104,-94,-90,34, 
  /* [4][0][][] */ 57,103,-6,50,-34,-12,36,0,62,66,-6,71,-9,-26,-8,-82,-23,1,-61,25,120,-91,79,34,-43,-2,69,-55,-41,36,-74,-52,87,116,29,-114,-52,0,-127,55,-44,-59,-90,-94,35,103,36,57,31,-34,-11,-66,-89,54,-86,31,61,-118,25,16,30,-88,-17,-80,-37,62,2,-32,23,-119,-125,-71,-67,25,111,50,72,-30,-1,-82,15,-35,-82,-24,4,79,77,12,-104,-66,55,35,45,106,-87,-35, 
  /* [5][0][][] */ 65,-101,54,65,42,-111,26,42,93,-127,-1,-56,23,92,18,39,60,59,-64,103,32,47,17,-26,-100,-47,-10,-89,55,39,18,-91,-30,-1,-60,0,-101,-35,23,24,-80,-43,38,86,-50,25,34,-44,-96,113,18,37,38,9,33,-30,80,55,-39,-35,33,-53,36,-43,-35,94,-25,27,77,3,102,-60,-37,42,-20,-69,19,-43,12,70,101,42,27,105,-73,71,2,39,66,-90,110,88,-18,25,65,-74, 
  /* [6][0][][] */ 18,-36,127,85,-105,-50,3,74,-9,-69,10,-89,88,56,119,-110,47,4,6,86,-76,-108,117,63,-52,-81,-5,-45,-27,-120,50,-77,-88,-113,-40,-91,2,39,-99,81,85,57,27,-8,-110,103,-89,-42,-78,7,-26,-68,63,-51,92,-29,10,-8,-69,119,-98,10,62,-79,-53,65,107,-44,73,-2,-93,-6,59,-67,-79,-28,-82,-87,-51,-8,32,-26,42,-27,-67,-82,-34,-97,82,93,99,17,-53,-69,72,-26, 
  /* [7][0][][] */ 114,64,-40,-43,-71,111,-15,-11,114,-11,-91,27,24,-78,47,61,52,20,-6,119,60,33,-10,88,-84,101,44,54,-70,102,-24,35,31,24,72,84,-104,88,-16,-21,95,-70,75,63,51,-3,100,-105,54,-45,-104,-60,-27,87,19,36,127,-109,-2,-56,22,-15,89,-119,-64,-48,65,26,-104,11,37,89,73,27,58,54,-54,47,-91,24,95,-29,-10,-74,87,39,-112,98,86,10,89,49,-43,-33,4,-71, 
  /* [8][0][][] */ 6,18,-55,-92,63,21,-68,-32,5,11,44,104,4,-36,-83,-68,-63,95,-62,32,37,-24,75,107,-127,96,49,67,-54,30,-87,111,99,-32,53,-22,110,6,-36,73,80,102,-108,-116,-14,-25,-19,106,22,-68,-59,8,-60,-7,-28,-98,49,109,-80,100,120,40,51,120,-32,-38,-21,98,-75,47,35,5,76,58,13,16,-34,98,82,53,41,83,-98,-76,26,43,73,-32,43,-33,-74,99,-68,-89,-38,57, 
  /* [9][0][][] */ 12,13,127,54,71,-81,-27,-88,47,78,0,58,-25,-61,-69,-15,26,8,-81,-60,8,104,-76,-76,115,0,2,45,-3,-68,-67,86,41,3,36,-12,-45,20,6,-29,48,-47,60,-67,83,20,-88,59,44,-14,-68,-47,78,-65,-42,98,87,-53,-20,13,-77,103,80,-67,-67,11,110,51,-25,99,97,-72,14,87,-101,-62,-70,-83,-21,89,39,25,95,19,-25,-70,40,-14,94,39,-16,82,102,14,58,-20, 
  /* [10][0][][] */ -62,79,86,-70,-19,104,111,15,39,12,25,-55,60,89,-33,0,-35,85,-106,-52,-11,27,51,-65,11,56,-114,-115,-44,77,-101,-83,93,100,127,59,-45,11,-43,40,-32,119,-123,-43,-95,-60,-3,-58,1,12,38,17,57,25,-63,-28,-85,-37,19,-47,13,68,126,31,120,-71,-99,-20,22,-35,-122,-60,78,67,-83,104,-8,56,71,1,85,4,64,100,-99,76,93,-17,44,13,0,-88,-43,-43,-39,-79, 
  /* [11][0][][] */ 123,53,33,110,89,69,60,65,103,127,-35,75,29,-46,60,-32,-24,-64,64,3,35,85,49,-56,-46,-76,-2,81,49,-26,44,-7,-53,-27,50,71,-20,71,44,-32,-5,92,-35,46,0,-26,-58,-51,77,45,127,26,-44,-52,34,36,-14,-31,-17,-43,-59,78,64,6,61,71,-11,39,53,59,-38,-43,56,116,-50,74,-69,59,-14,97,-79,6,-36,-24,53,-39,27,-29,-67,16,18,-69,-57,-25,-54,-10, 
  /* [12][0][][] */ 10,60,-61,-3,83,-4,-44,29,-81,65,-22,2,-45,2,38,-84,-107,-41,-53,-93,18,-18,9,86,-66,-57,88,-107,79,5,-43,108,-100,-75,-54,11,-12,-82,-17,32,104,30,-116,-45,-29,-88,-46,105,-54,-127,-77,93,25,-5,-89,75,-30,-63,41,56,47,106,-17,31,106,24,-53,106,48,91,35,63,76,108,-30,-14,-45,27,-123,-86,-67,95,38,7,-45,21,45,104,-101,-115,77,39,91,-20,21,66, 
  /* [13][0][][] */ 89,-67,87,84,98,102,75,55,67,-125,12,-23,93,70,51,-32,-109,-62,-67,41,68,-28,119,-53,-64,52,11,11,-69,-64,90,38,49,97,-27,35,-74,-35,4,69,-62,81,-47,12,-53,36,5,-26,40,123,-39,-87,-91,22,97,-88,-67,46,-6,-69,-26,127,-76,45,-60,-57,-93,82,-30,-7,108,4,-76,23,-64,-44,-86,69,76,-55,53,-87,88,36,-80,-105,103,122,-8,-54,-72,67,102,-51,59,-3, 
  /* [14][0][][] */ -63,-100,83,62,66,-28,-16,-127,-81,-52,66,83,-32,-84,-90,-92,-51,-61,0,26,-42,30,-6,60,-123,-70,-33,24,-110,-120,-85,37,91,-29,-35,-10,93,114,20,-112,-6,-112,35,86,65,-111,63,-84,106,42,75,52,80,-21,-15,12,-54,5,39,88,-19,-80,-26,57,-92,-11,73,-114,-86,-103,-101,90,-8,80,47,-77,51,-109,52,17,45,-34,-113,-44,-115,-88,-121,106,109,8,88,-55,84,103,-14,49, 
  /* [15][0][][] */ 24,-20,-26,73,87,-79,65,-100,61,-11,-65,22,96,11,-80,-127,87,14,-93,31,56,19,64,113,63,67,43,94,20,41,56,-94,8,11,-51,-9,-68,116,106,-58,22,108,-55,-25,32,-77,-40,-75,-5,-82,1,33,-101,-90,-44,4,87,31,-58,106,-26,-77,18,76,-24,101,-67,9,-57,-4,43,-67,3,-5,56,-103,-2,46,109,57,-70,61,-94,-72,-111,-24,-104,45,91,75,-102,-52,67,115,-93,103, 
  /* [16][0][][] */ -79,-12,92,-66,51,111,-54,39,47,36,-104,73,-5,-47,-62,-45,113,85,75,75,112,80,-31,47,-30,69,-61,58,-85,34,53,14,-96,77,55,55,-28,49,-64,-64,23,-39,79,91,52,111,108,-9,-51,-87,5,122,-35,112,66,36,6,107,82,20,112,123,33,92,51,17,-36,93,52,107,-17,-4,42,81,73,85,3,105,-109,-1,15,-75,55,29,11,93,115,16,79,12,-12,127,63,-30,-85,32, 
  /* [17][0][][] */ 31,-112,22,77,-44,-115,-72,-99,34,-89,76,39,94,53,-118,40,25,45,95,103,-98,-19,7,-58,18,58,-84,17,97,-63,-40,67,-37,-30,26,0,-55,92,-89,-37,-100,-47,-23,-16,1,4,78,-115,78,96,-19,17,-25,69,92,-78,-122,78,-87,-118,24,-99,66,79,-87,-81,36,-107,-113,-11,100,24,9,-121,-70,57,106,-54,34,-61,2,-23,-81,-100,-118,64,72,-41,13,68,-102,-127,-18,88,5,8, 
  /* [18][0][][] */ -29,93,127,8,7,-91,-52,50,24,122,-54,-41,-6,31,90,-22,30,-12,53,-43,65,3,43,-29,63,-76,-3,95,7,-17,18,22,-1,-7,-57,-50,7,29,51,42,-20,17,-7,32,-44,20,19,10,8,-46,66,1,-53,-6,30,68,-17,16,-39,-58,38,99,-18,8,-42,-73,16,61,59,-28,-39,85,-56,16,-70,-33,7,72,11,-7,-44,1,-22,-53,85,-13,60,31,-78,-51,-68,46,60,1,15,6, 
  /* [19][0][][] */ 16,31,73,35,53,-83,90,87,88,-59,25,-10,-91,30,-55,56,69,-102,127,53,-23,75,-55,10,74,-80,26,-62,-88,-116,-64,42,76,-82,27,3,8,-69,-54,-99,41,-114,-81,8,-85,26,71,-92,-28,35,-40,41,-33,11,4,-12,21,94,-2,-27,50,-51,94,59,-69,-4,-27,-4,-9,50,72,-50,-61,-117,-54,-78,-25,-109,12,108,54,-112,-31,72,-85,-9,7,-6,84,26,-2,60,-33,108,65,-47, 
  /* [20][0][][] */ 9,86,70,90,-85,95,19,56,15,18,-80,5,-8,86,50,-76,-51,-35,-65,-38,24,-44,-75,-60,71,-80,-98,44,12,1,-44,106,96,47,-10,67,35,-21,-4,-100,-74,-35,-87,-95,-12,-62,-65,97,58,-127,-90,32,38,113,46,12,113,59,87,83,113,-68,-53,-51,-19,-60,-48,15,-86,-71,-72,71,-66,-62,29,19,95,68,105,92,82,7,85,-30,58,118,-22,69,21,96,28,53,33,24,6,6, 
  /* [21][0][][] */ 89,62,54,-102,97,-72,71,-3,-3,-83,-66,54,-12,42,-48,-92,-97,-23,19,6,108,-49,58,-74,35,-76,-26,63,19,9,-14,-22,20,19,-73,-122,96,96,-127,-24,-2,10,12,-22,-90,-80,-71,87,-16,-48,-8,93,27,71,-90,33,-29,40,-34,110,69,-84,32,-9,76,34,-37,-60,-96,-15,40,79,24,-18,70,54,-93,-37,62,76,21,98,39,-68,25,-81,52,-66,-88,77,105,-116,-30,-54,70,-36, 
  /* [22][0][][] */ 56,-73,-70,-88,43,-19,103,46,-101,80,-67,-96,103,-109,-96,-87,31,72,-107,-64,72,-68,24,30,94,-5,-103,65,-61,-96,-61,-93,38,55,36,-20,-2,-10,-65,-116,3,-18,-7,85,57,-117,90,-25,-65,-87,-2,-11,-78,-84,-40,31,-13,-40,-52,-34,85,-72,-74,-127,-67,11,-103,-51,100,86,-25,-10,-64,18,57,-111,24,-51,54,77,88,-105,-78,-119,72,80,78,-45,-62,31,-74,37,8,20,-35,84, 
  /* [23][0][][] */ 57,-91,-4,55,100,-106,8,-92,57,-85,89,66,24,-96,12,-23,90,-22,-101,103,92,-70,108,-33,-10,0,84,9,75,63,83,-26,-27,57,24,35,98,1,-123,10,-90,8,19,-95,-71,-72,122,34,83,-90,-76,-32,76,-41,-49,75,-91,1,106,52,-105,-73,-48,16,35,42,-106,-101,67,-6,119,-61,5,-38,-22,-91,55,-11,91,127,-47,-39,19,-80,94,7,122,-13,-81,44,93,13,99,-50,-30,86, 
  /* [24][0][][] */ -76,-36,-100,-82,-60,-81,-45,-121,64,46,86,65,72,75,-29,-96,-66,57,2,-25,105,-70,-48,-18,23,-16,79,55,106,58,-5,-83,48,16,74,20,-45,-54,5,7,-47,-77,60,-7,18,-33,50,75,-39,-21,-46,43,63,65,43,-54,29,78,59,19,121,-21,68,96,-79,103,-37,-60,-91,28,-52,-12,-32,22,106,90,79,-70,-73,-127,-47,-58,-39,-92,15,76,-12,-60,44,-74,25,-89,17,31,-56,15, 
  /* [25][0][][] */ -76,-57,-55,32,85,-68,-82,107,64,-68,-16,10,94,8,-87,0,-48,73,48,-94,80,115,20,-38,29,-26,-89,47,92,-68,74,127,81,-84,58,80,123,-45,11,-9,-66,116,-60,35,113,63,84,59,-101,103,-43,21,63,-11,-22,16,-30,75,-111,90,109,86,38,64,-11,89,11,2,-65,23,12,-100,63,-97,78,45,86,106,30,63,58,54,-31,96,-56,-45,-70,-86,-9,-23,95,21,-121,8,-9,-63, 
  /* [26][0][][] */ 52,-106,-32,-18,-71,11,-16,-18,-98,-127,94,74,-51,-47,2,-7,94,25,-82,-66,11,58,84,6,43,59,6,33,4,26,-84,1,-10,-53,-91,-80,-70,76,-53,97,-92,84,48,24,-72,70,-35,87,-17,22,2,92,-8,-33,-16,-101,85,94,94,22,2,-96,60,-1,111,-21,-58,52,-84,77,79,83,71,-89,-70,-3,44,-106,-92,10,-30,75,74,-53,68,-4,-42,14,-78,101,8,60,-49,91,49,90, 
  /* [27][0][][] */ 14,25,-50,-96,-60,-52,-65,-6,47,122,39,-91,-22,56,83,-8,67,-12,74,-66,-91,14,-21,-23,-44,50,-100,16,72,48,-20,-2,71,70,-89,-47,-80,-59,-100,89,-88,21,38,20,106,30,70,107,96,80,59,-70,-80,-81,1,-29,99,-18,-110,-71,-57,-52,-32,80,33,-42,-105,106,70,18,-127,6,61,-39,-4,-75,46,-58,88,125,86,-20,109,-47,-66,-78,-27,32,-47,1,-27,-29,54,20,86,62, 
  /* [28][0][][] */ 103,30,127,69,-97,-4,-49,-19,-13,3,65,56,-38,-53,59,91,103,98,-23,24,-15,54,-52,-24,-62,66,-54,4,-59,-114,16,-20,-84,26,76,79,52,-67,25,30,98,49,-57,81,-48,-1,21,59,34,-74,-38,-46,-41,20,71,55,69,-13,52,65,-19,-5,-86,-17,69,65,22,72,-48,30,-70,-21,68,67,17,-38,-122,-12,-47,62,-55,-68,97,-32,70,-65,67,-75,-76,-41,-5,-69,-26,60,-95,-45, 
  /* [29][0][][] */ 74,72,81,-37,-98,35,-112,27,114,24,-84,-101,113,-104,-34,-39,-93,111,30,-76,-77,-22,70,15,-12,10,-39,-10,-106,-13,118,3,51,13,-71,-32,2,113,12,101,56,114,-33,97,13,113,-48,-18,24,-20,68,-96,79,-93,120,52,-86,56,-62,123,-127,112,-100,-57,-61,-61,67,97,106,-78,39,-73,118,98,72,42,113,-48,-23,60,-3,-82,-9,-78,74,126,51,79,-38,106,73,83,-105,23,-1,69, 
  /* [30][0][][] */ 23,-76,-71,33,-103,21,-73,-20,115,-22,-7,-45,-105,15,53,11,-10,31,96,-111,41,-111,-123,8,-121,19,-77,118,-15,-113,-101,0,-89,-80,-125,-62,11,-25,-8,22,86,-86,-18,96,101,-50,100,56,-79,78,18,-110,98,-58,-18,99,-85,-58,-86,-59,-109,-9,-81,-30,-114,-96,-104,92,-65,111,49,-40,-93,103,35,-95,-62,-79,-84,-66,25,27,-110,-24,-118,23,-114,110,-41,-127,79,56,-37,-8,7,-76, 
  /* [31][0][][] */ 105,-32,87,116,63,65,-21,-28,-4,67,-31,-76,102,-89,6,125,-17,-53,52,26,55,73,21,115,93,-75,49,62,-60,-66,76,106,15,42,-72,42,120,0,15,-75,76,-30,24,81,43,-15,-2,49,73,-5,102,-23,-71,-38,-30,30,-98,71,27,125,-55,35,74,-49,89,110,7,-44,71,-53,-66,19,-47,0,19,49,-59,13,64,127,-51,-19,42,70,76,105,-44,18,15,-17,-65,-44,9,94,-5,21, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018688144627958536, 0.0018174637807533145, 0.0017715462017804384, 0.0017771234270185232, 0.0018356690416112542, 0.0020134623628109694, 0.0018599345348775387, 0.0018988240044564009, 0.001919777481816709, 0.0021175539586693048, 0.0018195237498730421, 0.0024534964468330145, 0.0018649327103048563, 0.0018921769224107265, 0.0018630367703735828, 0.0018907010089606047, 0.0018414658261463046, 0.0018665107199922204, 0.0027129705995321274, 0.0018829598557204008, 0.0019436086295172572, 0.0019659760873764753, 0.0020010578446090221, 0.0019361119484528899, 0.002090048510581255, 0.001845387858338654, 0.0020106893498450518, 0.0018886163597926497, 0.0023281252942979336, 0.0017685472266748548, 0.0017479173839092255, 0.0022496655583381653, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1904, 2360, 7317, 2128, -2466, -2983, 13274, 1765, 2145, -1119, 7788, -139, -8538, 1772, 13253, 4406, 12074, 4008, -3343, -4617, 3473, 23465, 16516, 13115, 883, 734, 2937, 2158, 1629, -3747, 5907, -2143, -178, 3583, 35, 831, 9170, 4352, -1232, 4106, 7086, 5493, 4034, 8634, 3365, 3566, 1539, 6219, 3347, -4941, -4358, 317, -222, -972, 1503, -21, 141, -675, -3111, 7110, -727, 1035, -990, -1338, -2454, 5476, 18074, 1657, -2280, 668, 1390, 1973, 1761, -1169, 471, 9196, -427, 14930, 11277, -685, 5937, 1496, -398, 1036, 12586, 6683, 3003, 997, 4628, 2705, -467, -6582, 577, -1589, -1393, -1887, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00031239187228493392, 0.0006688513676635921, 0.00033126314519904554, 0.00042218717862851918, 0.00041365364450030029, 0.00049563992070034146, 0.00024887060862965882, 0.00041491066804155707, 0.00028723187278956175, 0.00052912882529199123, 0.0002516317181289196, 0.00041662619332782924, 0.00030159964808262885, 0.0015442435396835208, 0.00023388912086375058, 0.00027049222262576222, 0.000155065325088799, 0.0003622561926022172, 0.00057789689162746072, 0.00036302520311437547, 0.00017705140635371208, 0.00011667673970805481, 0.00018651502614375204, 0.00012702801905106753, 0.00022293999791145325, 0.00067165785003453493, 0.0010069090640172362, 0.00050653429934754968, 0.00029800037737004459, 0.00051472621271386743, 0.00025268990430049598, 0.00035838223993778229, 0.00028491162811405957, 0.00032306532375514507, 0.00046817888505756855, 0.00030295283067971468, 0.00020874080655630678, 0.000250660115852952, 0.00045421830145642161, 0.00043174816528335214, 0.00017915249918587506, 0.0004748667124658823, 0.00037800596328452229, 0.00027048465562984347, 0.00056735856924206018, 0.00028416930581443012, 0.00033183742198161781, 0.00034239873639307916, 0.00041289065848104656, 0.00026876607444137335, 0.00036683373036794364, 0.00024820971884764731, 0.0006774523644708097, 0.00033531044027768075, 0.00052123231580480933, 0.00051697937306016684, 0.00066504528513178229, 0.00036726496182382107, 0.00049155630404129624, 0.00026268712827004492, 0.0010112561285495758, 0.00067389971809461713, 0.00026817532489076257, 0.00057734479196369648, 0.00076949712820351124, 0.00035891766310669482, 0.00012153053830843419, 0.00024157365260180086, 0.00051295151934027672, 0.0005142778973095119, 0.00028654324705712497, 0.00024265641695819795, 0.00078803987707942724, 0.00035250000655651093, 0.00038294473779387772, 0.00023577855608891696, 0.00032315016142092645, 0.00012553109263535589, 0.00016185318236239254, 0.000255531573202461, 0.00024658831534907222, 0.00021778143127448857, 0.00024137840955518186, 0.00022211245959624648, 0.00014844993711449206, 0.0003549021203070879, 0.00077452743425965309, 0.00027738706558011472, 0.00015356055519077927, 0.00076324783731251955, 0.00024493527598679066, 0.00030047737527638674, 0.000332648865878582, 0.00065904692746698856, 0.00045402444084174931, 0.00021465464669745415, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -22,91,-5,-127,-38,-35,-31,-52,-27,-5,-4,72,17,-47,-7,47, 
  /* [1][0][][] */ -41,17,-49,-7,-20,-34,15,-77,56,50,-56,19,1,5,21,-127, 
  /* [2][0][][] */ 4,20,-44,62,48,37,-43,-57,127,-41,6,12,-20,100,-86,18, 
  /* [3][0][][] */ 49,-69,9,-95,-1,-24,-2,-2,127,-2,78,80,-21,74,19,104, 
  /* [4][0][][] */ -64,63,10,38,3,-33,22,70,-26,-18,-4,-58,-127,-14,11,52, 
  /* [5][0][][] */ 3,59,104,-3,22,68,-84,68,-59,71,-39,-39,43,-43,-127,20, 
  /* [6][0][][] */ 30,-49,127,-112,57,-6,-60,82,-66,-93,29,-40,3,83,-41,55, 
  /* [7][0][][] */ 32,115,-13,-52,95,13,-9,-45,127,93,-43,28,27,-12,53,28, 
  /* [8][0][][] */ 11,-83,11,-96,34,-62,14,-65,19,55,69,-18,25,127,73,70, 
  /* [9][0][][] */ 11,-25,-6,127,39,-17,44,-64,-65,105,27,-25,-18,-59,2,-15, 
  /* [10][0][][] */ -16,30,-65,-127,21,14,6,52,28,-41,17,-43,-24,-39,20,35, 
  /* [11][0][][] */ -11,15,32,-27,72,-38,67,-51,-91,25,-15,22,9,127,-65,-31, 
  /* [12][0][][] */ 68,-14,-106,4,41,-50,14,18,26,64,-55,-33,-30,127,-18,22, 
  /* [13][0][][] */ -15,7,-32,11,9,-127,2,8,8,-4,8,0,7,-10,15,9, 
  /* [14][0][][] */ 26,-32,87,-22,46,16,-127,-111,-3,-34,48,40,4,-58,-24,-51, 
  /* [15][0][][] */ -65,27,-16,-38,-20,-4,127,50,-40,39,63,-21,-3,47,74,-12, 
  /* [16][0][][] */ 34,76,127,102,6,24,109,66,-99,9,-73,-8,-1,15,21,-95, 
  /* [17][0][][] */ -34,-99,-9,27,-62,-26,-54,21,-127,-35,8,-51,2,38,53,-32, 
  /* [18][0][][] */ 16,29,4,68,33,8,16,-15,77,51,-33,-17,7,127,55,15, 
  /* [19][0][][] */ 26,-51,42,8,100,1,-90,-47,-124,-99,-68,-127,-46,-29,6,-34, 
  /* [20][0][][] */ 69,-21,-48,-47,28,-127,5,40,-70,21,-107,-38,38,-5,12,19, 
  /* [21][0][][] */ 109,-10,51,18,-19,33,26,81,9,-75,93,68,-31,127,47,41, 
  /* [22][0][][] */ -14,44,-42,127,-42,-8,102,88,-26,21,-32,21,15,7,34,19, 
  /* [23][0][][] */ 70,-8,92,-120,62,-41,-4,65,0,7,-30,-62,8,-11,-127,52, 
  /* [24][0][][] */ -127,43,17,-16,9,108,21,-26,-1,21,96,-5,-86,23,58,-37, 
  /* [25][0][][] */ 29,21,14,17,17,3,67,-43,-11,-127,-23,-27,-8,-24,18,26, 
  /* [26][0][][] */ -40,-11,2,11,-46,-5,-42,-26,-96,-35,1,-32,7,127,-38,52, 
  /* [27][0][][] */ -8,32,12,61,42,-34,-22,-39,52,4,-30,-5,9,127,-16,14, 
  /* [28][0][][] */ 12,75,53,63,127,-1,32,36,-78,-10,-41,-25,11,86,41,-35, 
  /* [29][0][][] */ -2,-7,17,1,17,-15,-3,42,-41,-27,-17,-127,11,-12,-8,24, 
  /* [30][0][][] */ -21,75,-54,78,-44,-11,47,-127,-35,59,-4,6,49,38,82,75, 
  /* [31][0][][] */ -42,-8,-4,-60,2,5,-50,-111,20,80,-10,-127,-35,-33,14,9, 
  /* [32][0][][] */ -127,-72,3,50,60,24,-24,9,-16,-47,-117,26,81,-4,47,72, 
  /* [33][0][][] */ -8,-37,-34,-14,-83,-18,-90,1,56,12,0,-59,40,-127,121,38, 
  /* [34][0][][] */ 48,-11,60,21,45,12,-44,77,-81,-47,60,13,18,-9,-16,127, 
  /* [35][0][][] */ -35,70,-99,15,-9,-24,46,-117,92,103,-87,-5,3,-14,94,-127, 
  /* [36][0][][] */ -19,45,21,110,34,12,127,19,-29,35,-43,-19,-14,-7,-89,-59, 
  /* [37][0][][] */ 9,-19,31,-88,9,-18,-60,-51,-74,-20,-7,-11,15,-127,47,-34, 
  /* [38][0][][] */ 41,85,-1,-48,127,-8,16,-47,109,62,-18,-7,14,-34,51,17, 
  /* [39][0][][] */ -30,73,-16,-127,-9,12,-38,43,40,-78,-32,-34,10,82,59,42, 
  /* [40][0][][] */ 5,-28,28,-101,-3,-26,-5,-44,-108,-3,-6,-18,-8,-127,60,-65, 
  /* [41][0][][] */ 0,-17,-47,-22,9,-40,22,-12,-36,11,-51,-14,-127,6,26,40, 
  /* [42][0][][] */ 127,98,-32,-18,-77,-46,-15,-47,-3,13,80,-64,-59,58,124,-109, 
  /* [43][0][][] */ -5,99,-86,14,38,-2,127,-20,58,81,-19,18,19,-108,-49,-48, 
  /* [44][0][][] */ -13,-1,-1,-36,65,8,-69,-127,-13,-9,19,-3,1,-25,65,-60, 
  /* [45][0][][] */ -2,44,-127,-11,18,-51,44,-80,24,40,20,-54,20,-6,70,-29, 
  /* [46][0][][] */ 9,6,-28,-79,-3,18,30,-24,-127,-24,5,6,-16,-118,77,-30, 
  /* [47][0][][] */ 12,48,20,-23,127,-22,-25,18,-63,34,-6,13,13,-4,115,-20, 
  /* [48][0][][] */ -127,-72,-17,26,55,11,-2,-28,5,-14,-94,48,61,5,68,42, 
  /* [49][0][][] */ 35,27,88,93,127,10,61,43,-122,-48,-37,-85,-1,108,40,-61, 
  /* [50][0][][] */ 29,-21,-93,0,24,-127,-36,-19,-15,-19,-8,-10,18,-4,-4,-21, 
  /* [51][0][][] */ 1,29,30,0,20,-10,1,35,-127,43,-4,-120,15,-94,-12,94, 
  /* [52][0][][] */ 10,48,-2,54,24,7,21,29,71,86,-23,-46,30,127,64,17, 
  /* [53][0][][] */ 6,-55,-9,-17,-87,-15,-83,14,48,22,4,-61,36,-127,103,27, 
  /* [54][0][][] */ 65,-16,-46,23,127,96,-104,-40,-67,-4,-19,-65,-5,-47,-12,-48, 
  /* [55][0][][] */ 46,-6,-6,4,24,-31,-68,-127,-25,-60,-37,24,-7,-28,25,-6, 
  /* [56][0][][] */ -24,9,29,-28,3,-34,-106,69,-14,127,-16,-22,35,9,-7,10, 
  /* [57][0][][] */ -6,35,-52,-14,-40,-45,127,101,-42,19,-22,-21,26,33,126,-9, 
  /* [58][0][][] */ 32,37,-127,22,61,91,-19,41,-100,-34,5,-14,-36,10,17,-4, 
  /* [59][0][][] */ -106,66,127,12,-83,-80,119,126,20,0,27,-18,24,3,60,2, 
  /* [60][0][][] */ 0,6,-47,-1,25,-127,-20,15,-23,-17,-26,-39,22,-5,-5,-3, 
  /* [61][0][][] */ 26,-21,32,127,70,22,28,8,-95,-3,17,37,-10,18,30,-42, 
  /* [62][0][][] */ -55,127,25,-62,-26,-23,-81,77,-30,-81,-114,-75,1,-88,-57,-30, 
  /* [63][0][][] */ -39,38,-39,127,-70,15,-53,-22,-68,-24,-26,-51,28,60,54,44, 
  /* [64][0][][] */ 6,3,3,50,22,20,-4,64,33,6,-17,-42,-22,-127,43,-17, 
  /* [65][0][][] */ -21,-50,4,-127,39,-31,78,-28,-6,50,11,-99,-16,-4,14,-40, 
  /* [66][0][][] */ 49,-26,87,-12,-15,14,-18,102,31,-58,66,68,-2,127,-8,56, 
  /* [67][0][][] */ 2,61,-25,-127,-16,3,-57,40,94,-100,-25,4,29,94,88,31, 
  /* [68][0][][] */ -35,49,127,23,13,23,4,-2,-32,-14,-1,-35,2,-22,113,-45, 
  /* [69][0][][] */ 127,82,-14,1,-88,-38,-25,-23,-4,9,74,-57,-61,70,74,-95, 
  /* [70][0][][] */ 40,17,-64,-14,-22,27,64,127,-43,84,-39,-7,7,58,-13,33, 
  /* [71][0][][] */ 0,-6,-3,-3,1,-93,-6,17,-33,16,-81,5,-127,-5,38,47, 
  /* [72][0][][] */ 17,22,-127,11,16,6,29,105,-46,-32,10,-4,27,16,3,11, 
  /* [73][0][][] */ -43,21,42,-1,53,-43,-71,-127,13,-84,30,-24,18,-52,35,-9, 
  /* [74][0][][] */ -13,21,57,113,24,-24,-107,80,-83,3,-65,37,39,-127,34,-88, 
  /* [75][0][][] */ -18,23,-42,-5,31,-25,-2,-19,120,18,-35,-18,27,127,-68,8, 
  /* [76][0][][] */ -2,-12,1,18,2,-15,-16,57,17,-25,-16,-127,-1,-11,6,14, 
  /* [77][0][][] */ -3,42,-22,127,-37,13,93,113,1,38,-21,25,-10,-21,-20,-5, 
  /* [78][0][][] */ 2,25,38,-127,68,-45,-49,24,8,-46,-14,-62,38,114,7,34, 
  /* [79][0][][] */ -10,-98,-82,-67,-94,-17,13,-75,127,5,36,70,26,40,47,-61, 
  /* [80][0][][] */ -22,18,88,-69,42,-35,23,-62,-72,36,-58,-127,28,100,66,-23, 
  /* [81][0][][] */ -44,40,-117,19,66,-127,-20,51,-12,-46,53,-11,29,-3,5,4, 
  /* [82][0][][] */ 127,-3,-12,22,12,-99,-10,20,-10,-5,-94,3,93,11,-3,17, 
  /* [83][0][][] */ -28,83,-127,-63,-35,-7,56,-112,63,59,-51,-124,6,57,57,86, 
  /* [84][0][][] */ -32,15,72,-49,-17,-35,47,-127,-38,40,2,-35,36,25,46,-1, 
  /* [85][0][][] */ -77,120,28,-127,-68,-36,-31,-2,-57,-6,-74,14,9,-11,-97,-21, 
  /* [86][0][][] */ -1,4,-31,13,-19,-21,127,25,-4,-27,-4,3,-1,27,75,-14, 
  /* [87][0][][] */ -24,-34,-8,-109,5,-28,62,-17,-2,24,-3,-127,-22,5,18,-39, 
  /* [88][0][][] */ 80,-1,69,-22,49,-111,-21,29,-70,30,-127,-91,44,42,69,0, 
  /* [89][0][][] */ 14,-23,-35,-54,15,-12,-38,-17,-37,14,41,-55,127,-9,18,-51, 
  /* [90][0][][] */ -2,-61,51,-62,64,-10,-72,93,63,-87,-43,-22,-9,116,7,-127, 
  /* [91][0][][] */ -36,-38,-41,-53,-9,-23,-24,-100,23,63,-1,-127,-26,-11,13,26, 
  /* [92][0][][] */ -28,27,34,20,0,-127,20,3,-2,-23,3,-20,-1,-25,26,8, 
  /* [93][0][][] */ 38,-19,127,-15,-63,56,22,-32,-15,29,-67,-10,-11,-8,33,2, 
  /* [94][0][][] */ 27,10,-33,-18,30,-3,-6,-4,-45,-15,18,-80,127,-12,47,-41, 
  /* [95][0][][] */ 127,104,-29,17,-115,-19,-63,-15,-32,-20,101,-66,-55,16,105,-73, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00069602433359250426, 0.0014902334660291672, 0.00073807040462270379, 0.00094065361190587282, 0.00092164048692211509, 0.0011043099220842123, 0.00055449584033340216, 0.00092444120673462749, 0.00063996663084253669, 0.0011789248092100024, 0.00056064774980768561, 0.00092826347099617124, 0.00067197869066148996, 0.0034406499471515417, 0.0005211163661442697, 0.00060266983928158879, 0.0003454931138549, 0.00080712448107078671, 0.001287582446821034, 0.00080883782356977463, 0.00039447916788049042, 0.00025996146723628044, 0.00041556457290425897, 0.00028302462305873632, 0.00049672118620947003, 0.0014964864822104573, 0.0022434424608945847, 0.0011285830987617373, 0.00066395936300978065, 0.0011468350421637297, 0.00056300545111298561, 0.00079849309986457229, 0.00063479697564616799, 0.00071980530628934503, 0.0010431254049763083, 0.00067499367287382483, 0.00046508468221873045, 0.00055848294869065285, 0.0010120205115526915, 0.00096195598598569632, 0.00039916048990562558, 0.0010580262169241905, 0.00084221572615206242, 0.0006026530172675848, 0.0012641025241464376, 0.00063314306316897273, 0.00073934992542490363, 0.00076288107084110379, 0.00091994053218513727, 0.00059882388450205326, 0.00081732345279306173, 0.00055302336113527417, 0.0015093969414010644, 0.00074708799365907907, 0.0011613309616222978, 0.0011518552200868726, 0.0014817533083260059, 0.00081828422844409943, 0.0010952113661915064, 0.00058527971850708127, 0.002253127982839942, 0.0015014813980087638, 0.00059750769287347794, 0.0012863522861152887, 0.0017144770827144384, 0.0007996860658749938, 0.00027077595586888492, 0.00053823785856366158, 0.0011428809957578778, 0.0011458361987024546, 0.0006384323351085186, 0.00054065033327788115, 0.001755791250616312, 0.00078538717934861779, 0.00085321953520178795, 0.00052532611880451441, 0.00071999430656433105, 0.00027968938229605556, 0.00036061677383258939, 0.00056933681480586529, 0.00054941076086834073, 0.00048522764700464904, 0.00053780287271365523, 0.00049487740034237504, 0.00033075371175073087, 0.00079073919914662838, 0.0017256848514080048, 0.00061803188873454928, 0.00034214041079394519, 0.0017005533445626497, 0.00054572772933170199, 0.00066947826417163014, 0.00074115791358053684, 0.001468388712964952, 0.0010115886107087135, 0.00047826100490055978, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -2092, 23315, -30923, 1956, -8501, 13171, 42945, -60130, -4926, 14443, 28154, 15119, -12614, 22319, -766, 12515, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0011303910287097096, 0.00045100829447619617, 0.00023631667136214674, 0.0002140934084309265, 0.00041045877151191235, 0.00047370727406814694, 0.00033465120941400528, 0.00031157297780737281, 0.00033219103352166712, 0.00025030187680386007, 0.00080437125870957971, 0.00052858993876725435, 0.00042198030860163271, 0.00024670120910741389, 0.00055207207333296537, 0.00051741377683356404, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -21,-22,-7,-34,12,-13,-36,-1,11,7,-8,6,-6,-11,-26,12,0,6,-8,-11,0,-27,2,2,7,10,3,127,40,-29,38,-2,-2,12,2,-4,-13,5,-36,-7,-4,16,5,33,9,8,11,1,29,3,-6,16,22,-25,-16,71,-7,10,-30,-28,-3,24,8,-20,-42,-55,-20,41,10,7,11,-18,5,-33,11,-20,-34,24,3,5,-1,-15,14,24,-21,-10,-1,-76,11,-4,6,-12,47,-31,-37,-20, 
  /* [1][0][][] */ 39,-91,-80,-56,127,-25,58,41,-24,-90,-51,-18,16,-30,-53,45,-57,18,43,55,6,36,-9,-63,1,2,-13,-79,42,-22,-55,14,-31,29,8,-8,1,-4,6,10,-32,54,-38,-15,-54,81,13,5,21,-76,15,-37,-13,36,32,1,-58,-7,-37,-31,32,-6,12,-31,-80,113,-7,-22,-18,-27,-26,34,68,-92,-10,8,35,-37,40,24,12,-14,10,22,-72,57,-11,26,42,-21,6,-10,34,1,26,98, 
  /* [2][0][][] */ -13,92,-70,-5,77,100,33,85,-2,-127,14,-9,4,5,37,12,10,-31,-48,54,46,-21,81,34,64,26,-8,-29,23,-9,59,-62,48,31,-30,53,-121,-86,30,46,12,-68,24,-20,13,-36,13,78,-21,39,-20,-20,84,7,5,81,47,0,26,-1,20,14,2,-33,18,-20,-26,-6,-55,-8,-3,-51,-74,-88,-11,69,72,44,21,-17,25,-63,32,-34,-6,8,2,41,-42,19,-2,5,-8,-40,-64,19, 
  /* [3][0][][] */ 45,21,114,-13,40,-27,32,-5,-5,-78,21,-43,13,46,46,94,17,-6,28,9,127,-21,28,31,39,-18,-9,36,33,30,-18,80,-100,19,26,-2,-22,-28,-7,56,-59,-32,71,31,29,17,-46,-74,-54,-35,-37,65,-6,-116,-26,39,-116,82,19,42,21,100,-29,-45,34,58,-20,-41,29,-33,-5,-56,42,-32,71,-20,-33,-9,60,36,0,-70,15,-15,-60,-4,15,77,23,23,20,15,33,82,46,-38, 
  /* [4][0][][] */ 15,-1,35,-13,127,51,-7,-17,-42,-51,-25,-34,-55,19,-8,44,29,-79,-37,80,-19,15,35,-20,3,-20,10,-40,10,-13,59,-29,86,17,-32,10,44,12,12,16,-17,-15,-21,-34,0,-50,-24,3,42,17,-28,20,-11,-47,22,-24,14,-13,-38,29,0,67,50,30,48,50,-34,2,-42,-2,50,61,12,-73,-44,-28,15,51,94,-46,-2,-37,-1,-14,-76,7,39,70,-39,28,5,-43,8,25,26,-31, 
  /* [5][0][][] */ -15,-11,-13,0,6,-29,59,-18,-22,-34,-9,13,0,30,3,18,-3,-3,9,-12,28,18,-45,74,13,-19,19,-74,12,29,18,41,-2,20,4,-57,26,12,-14,15,11,-7,23,1,5,-14,7,-21,-12,-10,15,-10,3,-28,-16,-29,-19,12,-37,22,57,7,-8,35,-10,53,0,76,16,72,7,23,9,13,13,65,-54,-5,14,0,8,-6,-8,16,-19,-2,-6,127,0,34,-3,-25,6,13,-61,6, 
  /* [6][0][][] */ 29,-111,-4,-52,-29,-3,52,26,-2,6,-23,-79,-37,4,-34,54,19,-2,-3,7,-66,45,16,-2,-47,-7,0,-15,4,18,54,-14,51,21,63,-23,-8,-13,19,-111,-27,121,4,-18,32,-37,-32,15,-26,31,-34,87,-10,-76,-36,-21,-12,-56,-13,16,1,66,50,-79,32,-25,0,-21,4,-15,127,16,-25,20,-5,22,-111,-7,33,2,45,55,1,12,-63,11,61,36,19,31,53,-76,1,-22,-40,-31, 
  /* [7][0][][] */ 34,127,15,23,110,59,26,-38,-35,-71,24,-21,-19,17,28,37,6,-32,14,58,42,-63,52,7,-17,41,7,-1,14,-13,15,8,44,-30,-42,27,15,18,5,89,-75,44,9,18,-43,-31,13,-12,-44,-38,36,22,7,-25,-36,46,83,16,-8,3,-11,-45,-2,-4,-49,76,-6,-106,-33,-38,-10,82,-15,-26,-2,4,93,41,27,-16,-74,-50,-4,-3,10,79,-10,-36,-46,23,-38,-23,-52,-30,33,11, 
  /* [8][0][][] */ -26,9,81,16,-122,-34,69,-15,43,127,77,19,-24,39,21,-5,-36,-2,14,-27,-41,11,-126,80,26,-71,69,-9,8,12,-6,68,62,3,1,-24,-21,-27,0,31,38,-49,46,15,-23,4,53,-1,-102,33,14,18,-61,-55,-24,68,-12,-71,-102,-30,7,-28,-43,-3,11,81,-25,-42,54,-9,-33,-38,25,59,57,-12,-41,-16,-6,6,-77,10,-5,-16,19,7,57,81,23,-37,47,39,3,25,35,14, 
  /* [9][0][][] */ -1,-100,6,21,93,85,-3,-15,33,-10,104,84,-30,26,96,-110,4,-44,-12,3,-43,-55,20,3,-37,-14,-2,30,-41,5,7,-1,14,28,-101,23,2,20,-31,72,37,-93,-13,74,30,-2,-74,-36,38,31,-25,-98,50,20,-6,-33,-18,64,-34,-6,31,-40,-53,127,-81,-14,-7,-9,12,27,-40,-86,40,-5,-9,21,42,-43,22,-12,5,-29,22,5,-3,-76,28,7,-2,-44,-49,24,-61,16,-2,-30, 
  /* [10][0][][] */ -55,-21,-25,-46,-30,-10,66,-14,32,20,30,34,24,-3,-4,1,-7,19,-28,-33,-9,35,10,21,-6,-18,14,-104,31,-35,48,-24,1,27,-3,-18,-6,16,2,-7,28,-22,25,-41,17,-9,25,14,1,40,-22,-6,-23,-26,-16,-47,-1,13,-15,-24,22,11,-6,13,-33,83,-17,-25,19,-31,-5,-21,-22,-6,32,47,-30,45,-11,4,1,1,-4,20,-17,-21,-1,127,5,10,15,-1,25,-34,34,-42, 
  /* [11][0][][] */ -116,41,21,-4,21,-65,6,-2,-46,16,4,29,24,44,-30,-8,46,-12,-77,-87,30,3,-18,15,92,-20,84,17,-34,20,-54,28,-7,39,-9,-17,2,-3,23,26,5,-20,0,13,108,18,86,23,55,53,-14,43,10,-76,34,11,-96,-31,-47,-48,-20,-14,-19,20,2,-37,12,13,44,14,7,19,-43,5,23,-5,-48,93,-125,51,-28,-20,-64,-103,127,4,44,14,0,49,-37,-73,-31,68,-29,-4, 
  /* [12][0][][] */ -4,4,-36,0,60,32,-8,-24,-12,15,27,-1,-3,-15,26,-26,-31,-9,13,-23,-6,-17,-46,37,-8,34,-30,89,-30,36,-36,7,-8,20,2,34,-16,-14,12,25,-4,-33,-2,1,-10,18,23,15,-4,1,-1,-32,-34,5,7,-19,-4,-23,25,14,-19,-31,-4,41,44,-80,13,61,-31,-127,-3,44,-3,2,-13,86,22,-12,-10,2,-27,19,-27,2,37,-27,-4,-69,-7,-2,-3,20,-47,51,-4,32, 
  /* [13][0][][] */ -66,40,-26,-12,-69,-11,-11,24,-48,-28,28,17,67,6,-16,5,-25,37,-50,-4,2,-6,35,-68,56,21,-7,-1,15,-23,-30,-72,-86,-23,3,5,-15,6,20,-10,-32,92,-2,12,51,13,-17,6,50,-17,47,70,67,-57,56,-31,-24,53,48,17,10,20,-14,8,-20,-8,-4,10,11,6,6,-127,33,-33,-62,8,53,27,-39,-39,58,-10,-17,-36,27,-31,99,-17,-23,6,-32,26,33,-39,-16,-24, 
  /* [14][0][][] */ -22,-2,-34,-56,40,-7,-13,29,-97,9,9,8,-24,-65,-75,-16,-90,-7,67,19,17,9,13,-107,-35,16,-49,-20,21,-25,-9,-36,-63,-21,22,7,-17,-7,12,2,-3,101,-69,-16,-54,16,0,12,127,-37,23,-4,34,54,-117,10,-31,41,-103,20,12,35,49,26,-10,38,-7,11,-49,15,52,40,51,-8,-10,19,47,-78,-23,-88,20,-18,-1,50,15,-60,-29,15,-29,33,31,38,20,26,20,-24, 
  /* [15][0][][] */ -21,-96,-21,-24,2,7,-4,-53,-28,8,-14,-29,36,-14,53,-6,-94,7,-19,19,-20,-11,-66,-43,-11,23,-9,16,-16,-10,71,-90,-10,14,23,18,-14,22,-90,-4,18,-63,-6,26,-43,-39,46,37,45,20,-9,-127,-4,51,-5,39,42,-3,-17,46,5,-3,52,-10,-4,-12,0,-6,-25,29,5,42,-32,4,-16,-36,-8,-9,-3,6,-21,39,-6,80,0,-40,-35,-52,-43,49,29,81,-39,-5,-2,-14, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.048041615635156631, 0.019167851656675339, 0.010043458081781864, 0.0090989693999290466, 0.017444496974349022, 0.020132558420300484, 0.014222675934433937, 0.013241850771009922, 0.014118118211627007, 0.010637829080224037, 0.034185778349637985, 0.022465072572231293, 0.017934162169694901, 0.010484800674021244, 0.023463062942028046, 0.021990085020661354, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 17464, 55424, 921, -636, 15564, -3324, -57, -865, 6599, 10902, -3083, 397, 854, 3466, 5279, -9661, -3963, -278, -1434, 12151, -11281, 14712, -3717, 6092, 19532, 38, -4845, 19169, 14586, -19032, 2381, 21711, 24264, -11949, 2398, 12, -487, 77, 4687, -7478, -5153, -973, -7591, -49, 30022, -1704, 11771, -1857, -15050, 501, 307, 86, -2296, 16069, -2992, 17376, 19504, 3, 36585, -1009, -9877, -902, 767, -355, -3164, 12222, -2064, -7762, -3660, 3482, -108, -4259, 824, 237, -2035, -5248, -1032, -1384, 50213, -8509, -6408, -11777, -349, -328, 58537, -14829, -12950, -27758, -8768, 7993, -1673, 35412, 964, -3467, -3209, 145, };
const TfArray<96, float> quant10_scale = { 96, { 0.00013992833555676043, 0.00010195805225521326, 0.00011989718041149899, 0.00022585957776755095, 0.00023311930999625474, 0.00022603613615501672, 7.2610338975209743e-05, 9.0893197921104729e-05, 0.00025745062157511711, 0.00022536532196681947, 0.00028291196213103831, 0.00012088614312233403, 0.00028668894083239138, 0.00022148163407109678, 0.00044875251478515565, 0.00014397157065104693, 0.00021860725246369839, 0.00020199615391902626, 0.00017380653298459947, 9.7781310614664108e-05, 6.7807639425154775e-05, 4.3794592784252018e-05, 0.00013754221436101943, 0.00011445091513451189, 7.990103040356189e-05, 0.00010627663141349331, 0.00017213000683113933, 0.00015779606474097818, 7.8761746408417821e-05, 0.00047972725587897003, 0.0003694527258630842, 0.00023681945458520204, 0.00011315057781757787, 0.00011875171912834048, 0.00025426337379030883, 0.00046157350880093873, 0.00042002470581792295, 0.00021355161152314395, 0.00025240759714506567, 9.2280977696646005e-05, 0.00021669366105925292, 0.00029200446442700922, 0.00034706672886386514, 7.2763003117870539e-05, 0.00035646356991492212, 9.3655115051660687e-05, 0.00010089192073792219, 0.00026048248400911689, 0.00063398614292964339, 0.00012646878894884139, 0.00046237799688242376, 0.00017746356024872512, 0.00024534447584301233, 0.00017183882300741971, 0.00028540138737298548, 0.0001090656005544588, 0.00014698859013151377, 0.00048577575944364071, 4.3475229176692665e-05, 0.00017807295080274343, 0.00031176119227893651, 0.00030433820211328566, 0.00011155962420161813, 0.00015220040222629905, 0.00012643108493648469, 0.00014298107998911291, 0.00028592863236553967, 0.00028046758961863816, 0.00022669031750410795, 0.00011600166180869564, 0.00022573635214939713, 9.9469943961594254e-05, 0.00027078299899585545, 0.00014324024959933013, 0.00036814555642195046, 0.000359091762220487, 0.00015984759374987334, 7.4448762461543083e-05, 5.1058006647508591e-05, 0.0001492986484663561, 0.00025014657876454294, 0.00021918393031228334, 0.00016321764269378036, 0.00026696815621107817, 6.100762402638793e-05, 0.00010311459482181817, 6.8443820055108517e-05, 0.00049642729572951794, 0.00023810366110410541, 0.00012042852176818997, 0.00039742010994814336, 3.0286648325272836e-05, 0.00016002796473912895, 0.00011435135820647702, 0.00032971441396512091, 0.00028061898774467409, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-73,-11,127,21,71,84,-59,-14,-19,-17,-3,-31,-1,36,2,-10,-42,27,20,15,-127,127,7,-77,7,52,-29,-122,-127,38,25,11,26,59,-16,-29,-12,31,-1,-12,29,-110,71,23,-64,38,47,-18,53,-24,19,4,-8,16,46,-95,-50,-62,-18,-10,3,13,40,70,-25,78,14,-6,18,21,127,24,20,27,-1,-8,16,127,-6,-13,14,-30,21,123,25,-72,-17,0,-32,-16,-40,0,-23,-15,27, 127,-126,72,107,-44,127,39,-117,68,5,-18,127,127,-96,-14,18,10,127,127,-112,127,-78,82,69,-125,-107,-67,-34,-57,45,-59,-21,-92,55,-127,-80,-43,-16,-51,70,1,127,127,83,-51,-109,-112,-50,-15,-127,41,82,73,-31,43,80,-51,42,-83,-111,-44,-40,-63,68,75,-62,29,30,-76,34,-16,91,120,127,13,19,3,57,-32,53,66,127,127,-24,-11,78,-105,127,-116,-100,3,-127,-91,-127,-38,108, -75,-15,29,-78,13,-14,71,-9,79,-35,-28,17,-21,-2,-9,-11,-10,-19,9,-5,-28,-103,33,1,-127,93,6,-54,116,48,-16,9,0,16,12,-29,-9,31,19,22,28,15,-122,63,16,-19,39,14,-14,12,-17,5,-10,0,-2,18,-71,6,-39,52,2,44,38,1,-4,-39,-28,24,9,4,-2,40,11,-27,-6,7,-9,-6,-81,0,-21,-25,-20,3,-113,15,-28,-23,-48,27,-27,-32,28,-24,-15,3, 
  /* [0][1][][] */ -67,-74,69,-38,-49,83,20,127,-53,-23,-1,-118,25,-112,77,32,-2,-58,-17,90,55,-60,50,52,-98,-7,127,-23,-24,63,121,-101,-127,87,-85,-54,-35,31,-29,99,-50,-24,-5,44,-48,127,-24,67,15,98,17,-2,12,-55,25,30,127,121,-69,-84,127,-34,-35,127,72,-38,-16,0,127,37,127,98,-41,101,-1,13,17,16,-32,10,-41,122,-83,114,3,36,-50,31,76,-127,-31,-6,127,-66,-22,0, 66,127,53,-115,127,74,89,39,-127,127,127,-40,-67,-127,-127,127,127,-62,-121,-48,109,95,-122,127,-113,-86,-43,127,-127,108,-127,-127,-90,127,105,127,127,-127,-105,127,-67,-93,111,-127,-127,-35,-127,-127,127,-111,81,40,127,127,127,-127,100,-127,-127,127,19,-82,-127,-99,-127,127,-127,127,-120,-127,-107,-83,-127,-81,127,127,-127,127,-75,127,127,30,-44,-127,58,127,95,48,127,12,127,1,-68,36,127,-127, -56,-14,-51,40,-57,-85,37,-27,17,-36,-29,89,0,99,14,10,-5,62,-6,127,2,-79,-38,10,-89,98,-74,-19,-70,-17,16,-61,-70,40,5,-18,-28,43,-70,46,127,-2,-40,27,-40,-61,17,46,9,120,-13,6,-39,-72,4,16,93,2,-3,23,-33,127,96,-50,-42,13,38,-10,-76,120,-18,-84,1,-53,-15,-18,28,17,75,-38,-68,-43,57,14,-50,-15,76,23,17,63,-44,20,-44,98,-27,-4, 
  /* [0][2][][] */ -73,1,-8,-21,12,-41,69,26,53,-29,-37,-4,18,23,-26,1,-8,65,7,4,-58,-76,4,-4,-14,-45,34,-70,86,39,24,24,17,-10,-11,-46,-7,35,-4,-2,-17,-4,-68,105,5,32,11,37,-16,-28,11,-20,21,-3,9,15,-68,24,-17,14,15,0,-18,-4,1,-47,-46,13,-28,13,27,30,13,-21,27,4,21,8,-78,-13,-6,-7,15,17,-127,12,16,-43,-54,-48,-28,-49,8,59,-19,-7, 116,34,-127,-33,-73,-18,41,29,-66,-31,-19,-111,-78,118,-12,37,4,-51,-7,-126,90,-46,-37,3,-98,127,-50,20,-36,-20,-10,-6,-62,14,26,5,-22,-29,127,59,8,-12,68,-36,-37,76,-68,-45,-33,-6,-127,-127,-53,-25,5,37,-72,-5,6,40,-5,-17,13,-46,-53,33,66,-23,116,108,-23,-69,11,-59,2,6,100,8,51,20,13,-94,-51,5,4,12,127,41,-53,40,-18,-111,40,82,-9,28, -60,11,-21,29,14,-60,-127,1,-13,-10,-16,1,15,-20,19,-2,-9,-16,6,20,-54,-72,16,4,21,-93,18,3,-47,-39,-8,16,43,-19,-5,-29,-34,1,40,-43,23,0,-50,-34,3,64,25,16,-9,-2,10,-8,17,5,-1,-6,-60,-12,-1,-37,-9,11,88,-8,36,-2,1,25,5,5,-4,23,-17,15,0,17,38,3,73,-13,4,-9,-8,-15,70,5,46,-38,56,41,-18,-49,-9,4,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0059469542466104031, 0.0043332171626389027, 0.0050956299528479576, 0.0095990318804979324, 0.0099075706675648689, 0.0096065355464816093, 0.0030859394464641809, 0.0038629609625786543, 0.010941651649773121, 0.0095780258998274803, 0.012023758143186569, 0.0051376610063016415, 0.012184279970824718, 0.0094129694625735283, 0.019071981310844421, 0.0061187916435301304, 0.009290807880461216, 0.0085848364979028702, 0.0073867775499820709, 0.0041557056829333305, 0.002881824504584074, 0.0018612701678648591, 0.0058455439284443855, 0.0048641636967658997, 0.0033957937266677618, 0.0045167566277086735, 0.0073155248537659645, 0.0067063323222100735, 0.0033473740331828594, 0.020388407632708549, 0.015701740980148315, 0.010064826346933842, 0.0048088994808495045, 0.0050469478592276573, 0.010806192643940449, 0.019616873934864998, 0.017851049080491066, 0.0090759433805942535, 0.010727322660386562, 0.0039219413883984089, 0.0092094801366329193, 0.012410189025104046, 0.014750336296856403, 0.0030924275051802397, 0.01514970138669014, 0.003980342298746109, 0.0042879064567387104, 0.01107050571590662, 0.026944410055875778, 0.0053749233484268188, 0.019651064649224281, 0.0075422013178467751, 0.010427140630781651, 0.0073031499050557613, 0.012129558250308037, 0.0046352879144251347, 0.0062470147386193275, 0.020645469427108765, 0.0018476971890777349, 0.0075681004673242569, 0.013249849900603294, 0.012934373691678047, 0.0047412840649485588, 0.0064685172401368618, 0.0053733210079371929, 0.0060766958631575108, 0.01215196680277586, 0.011919871903955936, 0.0096343383193016052, 0.0049300706014037132, 0.0095937950536608696, 0.0042274724692106247, 0.011508277617394924, 0.006087710615247488, 0.015646185725927353, 0.015261399559676647, 0.0067935227416455746, 0.0031640722882002592, 0.0021699653007090092, 0.0063451924361288548, 0.010631229728460312, 0.0093153165653347969, 0.0069367494434118271, 0.011346146464347839, 0.0025928239338099957, 0.0043823700398206711, 0.0029088624287396669, 0.02109815925359726, 0.010119405575096607, 0.0051182121969759464, 0.016890354454517365, 0.0012871825601905584, 0.0068011884577572346, 0.0048599326983094215, 0.014012861996889114, 0.011926306411623955, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1886, 5900, 9493, 25201, 19291, -3251, -1441, 4640, 23066, -3429, 8386, 4186, 6607, 8749, 26267, 1382, 2005, 8394, 10903, 5259, -193, 462, 10939, -1028, 3421, -38, 9775, 7429, 4625, 29129, 37237, 16970, 7039, -519, 7955, 2620, 1192, 3669, 23404, -744, 10343, 8784, 37728, -4337, 25023, 5497, 5015, 12811, 46731, 7638, -267, 6096, -3618, -112, -1644, 7640, -216, 13716, 5877, 6980, 4258, 12741, 6441, 4665, 8923, 9602, 3965, -3582, 6366, -2914, 4788, 7287, 16735, 4978, -3404, -4088, 5181, 364, 1883, -786, 14992, 10343, 5143, 12068, 2308, 386, 8729, 60590, 7529, 7515, 5121, -294, 4726, 7330, 4363, 12759, };
const TfArray<96, float> quant12_scale = { 96, { 0.0002576305705588311, 0.00024882770958356559, 0.00019622352556325495, 9.1512927610892802e-05, 0.0001567308499943465, 0.00032334891147911549, 0.00054325215751305223, 0.00035326177021488547, 0.00010154338815482333, 0.00039487960748374462, 0.00032132476917468011, 0.0002201901952503249, 0.00019274669466540217, 0.00026230982621200383, 9.0722656750585884e-05, 0.00038942368701100349, 0.00024372906773351133, 0.000148789506056346, 0.00020451693853829056, 0.00023136513482313603, 0.00039212274714373052, 0.0005122555885463953, 0.00017980120901484042, 0.00060083321295678616, 0.00076408643508329988, 0.00034420780139043927, 0.00022731955687049776, 0.00019756784604396671, 0.00035634450614452362, 0.00012145709479227662, 7.5824827945325524e-05, 0.00014547827595379204, 0.00023732392583042383, 0.0003887224302161485, 0.00025266280863434076, 0.00021125197235960513, 0.00040549514233134687, 0.00040653196629136801, 0.00011757909669540823, 0.00081737391883507371, 0.00017886090790852904, 0.00017451502208132297, 7.2431306762155145e-05, 0.00023747736122459173, 0.0001299425057368353, 0.00027782082906924188, 0.00033782792161218822, 0.00021129308152012527, 8.8459797552786767e-05, 0.00027839810354635119, 0.00029445509426295757, 0.00028094698791392148, 0.00029251325759105384, 0.00027369879535399377, 0.00063124659936875105, 0.0001439828920410946, 0.00028090758132748306, 0.00013571200543083251, 0.0003554689756128937, 0.00021215791639406234, 0.00037594183231703937, 0.0001108718424802646, 0.00022205806453712285, 0.00021189384278841317, 0.0002778062189463526, 0.0002004067791858688, 0.00031102672801353037, 0.00037020654417574406, 0.00025830595404841006, 0.00024085880431812257, 0.00024072962696664035, 0.00021181466581765562, 0.0001223311701323837, 0.00020948040764778852, 0.00044639146653935313, 0.00032896196353249252, 0.0003107716329395771, 0.00035640259739011526, 0.00041697683627717197, 0.00043534158612601459, 0.00013592686445917934, 0.00016130434232763946, 0.00017302484775427729, 0.00015540140157099813, 0.00050792383262887597, 0.00029026062111370265, 0.00026741629699245095, 6.2638515373691916e-05, 0.0001842469209805131, 0.00030297512421384454, 0.00024544729967601597, 0.0003209223214071244, 0.00030959831201471388, 0.00021298797219060361, 0.00025523832300677896, 0.00012975552817806602, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 6,68,0,75,12,22,18,10,0,25,-101,97,23,-114,15,-127, 
  /* [1][0][][] */ 31,29,-22,-16,33,-23,127,-94,20,79,-12,-12,1,-33,37,20, 
  /* [2][0][][] */ -127,76,-4,-14,2,-19,15,107,-94,16,103,-42,-70,24,12,-32, 
  /* [3][0][][] */ -127,114,53,70,-95,40,38,113,-23,58,-116,9,33,-127,-123,-88, 
  /* [4][0][][] */ 41,-7,29,79,-34,103,-13,52,31,-32,27,28,35,12,-127,-47, 
  /* [5][0][][] */ -9,-62,90,-23,31,-42,-16,21,-93,86,-30,-127,-9,43,-60,-23, 
  /* [6][0][][] */ 11,4,13,-18,24,45,-49,-56,-24,5,57,-7,127,-11,0,-47, 
  /* [7][0][][] */ 3,16,127,0,-12,-4,-7,-21,-66,48,-93,-55,3,-7,18,-16, 
  /* [8][0][][] */ -25,39,58,52,-50,85,9,46,12,-8,6,-87,-15,-16,-127,-59, 
  /* [9][0][][] */ -17,-127,63,33,43,-34,6,-12,103,16,80,-31,-68,13,-106,-37, 
  /* [10][0][][] */ -53,-100,-7,-42,-127,-12,-8,52,80,104,46,-83,-52,39,102,4, 
  /* [11][0][][] */ 52,-8,26,-107,59,-40,-113,-127,-54,54,-16,-68,-1,-29,19,-115, 
  /* [12][0][][] */ -6,-4,-3,-25,-29,-30,-76,-21,-37,-48,-8,21,10,127,96,35, 
  /* [13][0][][] */ -30,-108,-45,19,-2,-49,3,-68,97,23,10,7,8,-1,127,26, 
  /* [14][0][][] */ 18,-45,58,34,0,27,6,127,9,28,11,-22,22,51,-47,103, 
  /* [15][0][][] */ 32,-42,14,68,16,-4,101,7,-4,-127,3,-32,-8,-40,-18,-31, 
  /* [16][0][][] */ 44,-75,-41,36,5,-7,21,-73,115,45,71,26,-7,101,77,127, 
  /* [17][0][][] */ -60,-63,83,124,103,32,21,11,127,-35,-21,6,24,75,-90,21, 
  /* [18][0][][] */ 3,17,-23,18,-127,-15,-3,50,-33,-32,-39,-53,-1,-115,81,3, 
  /* [19][0][][] */ 23,-90,40,-79,64,4,-85,117,36,-59,118,-5,-19,104,41,127, 
  /* [20][0][][] */ 28,-7,54,-75,-10,-3,-31,50,-20,-50,106,-18,19,-2,-40,127, 
  /* [21][0][][] */ -58,-34,15,-51,27,1,-99,-77,-34,44,-25,-13,-127,-12,-4,-9, 
  /* [22][0][][] */ 24,-47,23,-29,11,-90,7,-10,-127,26,-32,-70,-23,-8,87,-21, 
  /* [23][0][][] */ 11,24,24,-8,11,0,-18,7,-19,-18,36,-14,127,-4,1,-41, 
  /* [24][0][][] */ -29,-1,30,-69,15,11,30,-12,-17,17,18,-127,14,-97,31,0, 
  /* [25][0][][] */ -9,-18,-3,68,74,-80,-17,-46,-40,79,-120,-127,19,-112,-14,67, 
  /* [26][0][][] */ 68,-22,26,-127,101,-20,-1,-3,95,-79,52,-30,-32,87,28,83, 
  /* [27][0][][] */ 101,-17,20,-37,-30,-46,4,-31,-29,28,-127,30,3,-21,4,43, 
  /* [28][0][][] */ -91,-1,-127,-62,34,-7,66,-41,2,50,-41,12,26,-6,-32,27, 
  /* [29][0][][] */ -61,-36,-7,127,-16,3,13,-32,-35,-14,-87,32,10,-82,25,-39, 
  /* [30][0][][] */ 40,23,127,-35,83,55,-11,86,-28,-65,80,-50,-38,4,-78,74, 
  /* [31][0][][] */ 5,-80,-16,-68,0,-73,36,-65,-21,62,116,44,-43,78,88,127, 
  /* [32][0][][] */ -5,63,-27,33,-127,17,-74,-44,-53,-39,-7,43,10,42,31,65, 
  /* [33][0][][] */ 13,-8,33,127,20,5,7,-78,-105,38,67,-19,5,-11,12,101, 
  /* [34][0][][] */ 19,7,15,1,57,-52,-127,-46,-66,83,-29,17,8,-2,2,-18, 
  /* [35][0][][] */ 127,14,5,-47,18,-110,-32,-17,-69,-34,-109,-23,106,12,-4,91, 
  /* [36][0][][] */ 13,-4,-127,4,46,20,-31,25,-41,-16,-6,-7,4,16,-16,-5, 
  /* [37][0][][] */ 3,6,127,-10,-56,12,9,-66,-18,25,-44,16,20,-12,20,-6, 
  /* [38][0][][] */ -116,48,-30,35,19,127,25,-20,54,-17,126,-44,-34,33,-23,-18, 
  /* [39][0][][] */ -30,-3,15,31,31,-26,-127,40,7,23,2,-52,-1,-32,-10,6, 
  /* [40][0][][] */ -43,120,-22,127,-24,53,68,6,-122,-42,-57,67,40,26,-50,-65, 
  /* [41][0][][] */ 38,-15,-59,-35,-56,-20,127,118,-38,72,-55,-13,24,81,14,-20, 
  /* [42][0][][] */ -28,-85,-63,-17,-45,-18,-31,89,44,-127,81,6,-74,28,-91,15, 
  /* [43][0][][] */ -87,-5,45,-50,39,-3,-106,-108,-50,30,-17,-40,-127,-23,26,-3, 
  /* [44][0][][] */ 33,-1,-7,29,18,-16,25,-24,127,0,3,57,21,92,-15,44, 
  /* [45][0][][] */ -80,-71,-4,-78,26,17,-6,54,-23,-49,-25,-8,30,95,-33,127, 
  /* [46][0][][] */ -43,21,-40,91,-85,-22,13,-79,-127,60,-46,-17,-11,5,-8,-31, 
  /* [47][0][][] */ -42,-22,-124,127,6,44,6,-26,7,66,59,66,-21,-35,24,-13, 
  /* [48][0][][] */ -14,-5,38,-127,34,-35,-15,-18,-50,24,8,16,0,28,76,10, 
  /* [49][0][][] */ -6,63,16,91,-12,4,-12,9,-14,-39,-127,-30,-15,-58,-93,-103, 
  /* [50][0][][] */ -6,76,32,-127,60,2,-26,19,117,-14,-15,14,-7,-51,47,-25, 
  /* [51][0][][] */ 40,-46,32,1,64,-16,-53,-127,25,-62,-37,-16,-5,-4,-1,-26, 
  /* [52][0][][] */ 35,15,-20,47,44,-14,-66,127,-77,114,-39,-41,83,88,2,-43, 
  /* [53][0][][] */ -4,94,30,-72,-15,10,42,-39,-48,-35,-45,64,11,-127,-119,-29, 
  /* [54][0][][] */ -6,-6,18,17,36,-27,-3,-37,-9,21,-23,-26,-5,127,-33,-8, 
  /* [55][0][][] */ -127,112,78,-18,42,-22,-12,-14,-55,45,96,-26,-6,-52,119,-4, 
  /* [56][0][][] */ 62,-34,28,-105,69,-32,26,7,36,-17,62,127,28,56,80,44, 
  /* [57][0][][] */ -29,1,15,60,-18,35,37,127,-9,10,16,-49,-14,64,6,12, 
  /* [58][0][][] */ 5,114,-6,-123,23,31,-17,22,127,2,8,108,1,-97,84,56, 
  /* [59][0][][] */ 50,32,42,-106,-29,7,54,3,7,26,10,-67,-13,-127,-77,38, 
  /* [60][0][][] */ 34,-16,117,-48,-49,127,12,-28,-13,20,-58,-18,28,23,27,-10, 
  /* [61][0][][] */ 3,30,-49,-54,-54,-9,91,127,-2,56,42,22,-7,80,42,1, 
  /* [62][0][][] */ 24,0,-41,-6,-90,0,-86,13,-43,-8,16,-58,-31,-127,98,17, 
  /* [63][0][][] */ 20,-16,13,-89,24,-24,-127,-104,-75,97,-20,8,35,-9,-1,-53, 
  /* [64][0][][] */ -41,15,44,45,58,-7,-50,-99,20,-127,23,-46,-22,-20,-12,4, 
  /* [65][0][][] */ -127,9,49,-68,10,57,30,-57,-94,19,27,-25,21,11,-25,-29, 
  /* [66][0][][] */ 21,25,84,10,-56,52,-47,42,-29,-19,85,-87,-41,32,-127,-15, 
  /* [67][0][][] */ 15,-8,-50,54,58,-49,-81,-79,42,-127,-61,-29,-75,15,-61,29, 
  /* [68][0][][] */ 51,-28,-102,63,-49,-64,21,-71,-11,-7,56,-39,-20,63,127,0, 
  /* [69][0][][] */ 1,49,-108,79,-9,-118,33,100,36,15,82,-29,127,50,0,13, 
  /* [70][0][][] */ -5,-17,-39,-37,-30,-1,127,113,-10,63,-30,-4,-11,45,0,12, 
  /* [71][0][][] */ 3,-24,-37,-56,19,-15,7,56,-21,-55,-14,-32,15,-127,84,-5, 
  /* [72][0][][] */ 68,43,-3,46,41,-78,-48,-127,40,59,-65,36,66,70,55,86, 
  /* [73][0][][] */ -49,-127,-9,-57,-89,-20,26,-48,-30,11,-23,-36,26,-61,77,-8, 
  /* [74][0][][] */ -34,33,61,76,11,5,-127,84,18,-47,-38,-32,19,-2,-21,-12, 
  /* [75][0][][] */ -45,17,-9,17,-14,93,78,127,-1,64,-7,-11,-112,81,20,4, 
  /* [76][0][][] */ 14,-32,-10,-32,116,-99,-127,-71,-13,-52,-24,-60,63,10,41,-21, 
  /* [77][0][][] */ -50,20,-43,-31,-63,-35,-26,-48,127,-3,-91,45,-12,45,32,-88, 
  /* [78][0][][] */ -122,-127,-32,90,53,69,-47,43,-13,-75,-117,63,31,-37,101,93, 
  /* [79][0][][] */ 27,-11,35,-62,127,2,48,13,79,20,-3,30,-4,-14,16,-39, 
  /* [80][0][][] */ 4,-58,67,-123,-32,-62,13,31,-127,-52,-48,-71,42,125,-59,26, 
  /* [81][0][][] */ 13,0,32,37,4,47,-5,-10,25,8,17,-35,1,29,-127,20, 
  /* [82][0][][] */ -46,-7,3,-127,-7,-45,21,-66,-34,-28,-38,-82,-17,-117,-82,36, 
  /* [83][0][][] */ -41,5,-32,-61,-31,48,-3,10,-68,5,26,-127,-7,-125,-6,56, 
  /* [84][0][][] */ 127,28,11,49,-50,-23,-53,16,-23,-25,89,-11,-90,17,89,-47, 
  /* [85][0][][] */ 2,-37,30,-28,50,-11,-37,96,-86,-105,-80,-37,-13,71,43,-127, 
  /* [86][0][][] */ 27,-10,68,20,-49,96,-88,33,-61,-55,46,-29,-24,-127,-29,-14, 
  /* [87][0][][] */ 80,-16,3,-33,-74,-127,-22,-3,-22,5,-109,-23,43,-21,26,40, 
  /* [88][0][][] */ 21,41,-93,-4,-37,-75,-17,-5,56,16,6,53,-47,-59,96,-127, 
  /* [89][0][][] */ 41,40,-64,-12,-37,-33,26,-60,37,39,14,-28,-45,7,-37,-127, 
  /* [90][0][][] */ -27,-71,36,-86,-79,-8,127,-107,95,-104,4,-96,85,-28,-83,-32, 
  /* [91][0][][] */ 20,-2,-15,-127,-60,-5,32,-48,-46,43,93,99,39,-1,76,118, 
  /* [92][0][][] */ -3,35,-13,17,60,6,-62,-127,42,-53,9,-23,-46,-20,-12,-33, 
  /* [93][0][][] */ 93,1,27,-127,-48,-18,-15,81,43,-86,63,9,5,127,-8,29, 
  /* [94][0][][] */ -92,58,-108,-6,47,-127,-10,16,-18,-57,106,-24,-1,5,-15,-4, 
  /* [95][0][][] */ -92,83,32,-127,-45,-22,-57,9,9,-68,-98,-101,-17,-1,-105,20, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.00068359758006408811, 0.0006602400098927319, 0.00052065995987504721, 0.00024282062076963484, 0.00041587001760490239, 0.00085797475185245275, 0.001441466505639255, 0.00093734561232849956, 0.00026943546254187822, 0.001047774450853467, 0.0008526038727723062, 0.00058425316819921136, 0.00051143451128154993, 0.00069601350696757436, 0.00024072370433714241, 0.0010332977399230003, 0.00064671126892790198, 0.00039479840779677033, 0.00054266571532934904, 0.0006139047909528017, 0.0010404593776911497, 0.001359220128506422, 0.00047708494821563363, 0.001594252185896039, 0.0020274287089705467, 0.00091332179727032781, 0.00060317025054246187, 0.0005242269835434854, 0.00094552530208602548, 0.00032227454357780516, 0.00020119377586524934, 0.00038601239793933928, 0.00062971585430204868, 0.0010314369574189186, 0.00067041610600426793, 0.00056053645676001906, 0.001075941720046103, 0.0010786928469315171, 0.00031198465148918331, 0.002168821869418025, 0.00047458996414206922, 0.00046305856085382402, 0.00019218939996790141, 0.00063012295868247747, 0.00034478976158425212, 0.00073717045597732067, 0.00089639337966218591, 0.0005606455379165709, 0.00023471942404285073, 0.00073870219057425857, 0.00078130781184881926, 0.00074546539690345526, 0.00077615538612008095, 0.00072623300366103649, 0.0016749511705711484, 0.00038204452721402049, 0.00074536085594445467, 0.00036009855102747679, 0.00094320223433896899, 0.00056294031674042344, 0.00099752494134008884, 0.00029418760095722973, 0.00058920937590301037, 0.00056223961291834712, 0.00073713163146749139, 0.00053175981156527996, 0.0008252790430560708, 0.00098230689764022827, 0.00068538961932063103, 0.00063909532036632299, 0.00063875253545120358, 0.00056202954147011042, 0.00032459379872307181, 0.00055583578068763018, 0.0011844561668112874, 0.00087286840425804257, 0.00082460220437496901, 0.00094567949417978525, 0.0011064072605222464, 0.0011551363859325647, 0.00036066866596229374, 0.00042800529627129436, 0.00045910451444797218, 0.00041234242962673306, 0.0013477262109518051, 0.00077017821604385972, 0.00070956302806735039, 0.00016620517999399453, 0.00048888119636103511, 0.00080391491064801812, 0.00065127044217661023, 0.00085153599502518773, 0.00082148885121569037, 0.00056514277821406722, 0.00067724997643381357, 0.00034429359948262572, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 922, -7589, -5923, 26561, 29731, 6621, -8471, -5010, 32038, -1288, 31032, 23616, -6920, 16296, 33862, -22364, };
const TfArray<16, float> quant14_scale = { 16, { 0.0004277429252397269, 0.00026063571567647159, 0.00034617653000168502, 0.00022870046086609364, 0.00039639626629650593, 0.00031727255554869771, 0.00030570887611247599, 0.00039312258013524115, 0.00017600992578081787, 0.0002590912627056241, 0.0004203587886877358, 0.00080835301196202636, 0.0004115615738555789, 0.00046312034828588367, 0.00044609286123886704, 0.00037636933848261833, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -1,19,0,17,53,62,-20,-20,50,7,7,14,0,21,23,62,-8,-18,-16,-9,92,-48,18,-22,-25,-35,-31,-90,-1,-11,55,41,111,-11,14,-8,6,-30,-19,-6,-43,24,18,-28,18,-25,-10,25,-22,27,1,-15,-39,-19,10,-9,44,30,-18,-31,-74,26,-4,-7,4,15,59,3,18,11,1,-33,-77,-8,3,4,-4,-87,10,-20,53,-7,-59,-45,40,-7,9,34,-7,-8,17,-36,24,7,-9,127, 
  /* [1][0][][] */ 84,-104,44,74,-15,-47,4,-45,-13,-80,-4,43,45,-43,-16,-37,-119,-14,7,43,-31,-104,-13,21,127,-47,-72,42,-20,89,7,67,14,11,-45,11,-23,-29,62,-35,-14,-72,76,-46,-43,23,73,1,22,57,2,-67,83,-81,43,-19,48,30,-10,-109,27,-69,27,-50,0,-76,29,42,37,61,-45,11,-97,45,-7,76,42,96,31,-28,51,18,-95,31,-63,94,-15,77,-40,-6,31,-14,12,-65,46,-17, 
  /* [2][0][][] */ 9,21,5,-14,11,-16,-5,34,44,-15,16,49,-18,8,46,-4,-5,-6,19,-11,-22,-52,-2,-43,-6,-16,-36,20,-17,18,78,-60,13,-63,-33,47,18,127,-47,-26,14,-32,-2,31,-43,-48,-52,11,19,20,-27,-23,29,3,4,-36,-37,-2,3,23,3,8,53,78,21,-66,21,-67,-7,-14,-20,16,-15,-4,-22,17,2,51,3,20,3,70,41,0,-23,-12,6,-2,2,27,-4,-43,-31,-7,-7,62, 
  /* [3][0][][] */ -23,-13,-20,30,27,-24,3,-35,-16,9,-1,10,14,-6,43,-5,42,-24,-2,20,-20,-25,-3,9,5,2,4,-9,34,-37,63,-19,19,-9,-8,37,-10,-18,7,13,-2,-83,33,-13,-12,-10,5,26,-127,48,-22,17,-111,-46,-11,-27,29,2,-7,58,-4,26,3,8,-16,-84,-44,20,67,24,1,29,-38,25,-8,-36,-42,-48,23,-46,26,-30,16,61,35,58,27,9,36,-29,-1,12,-36,9,-18,-28, 
  /* [4][0][][] */ -10,-21,12,-63,-9,-5,-52,8,-24,-42,-36,-8,10,57,-3,5,56,-27,0,-9,-12,22,36,4,-13,-14,14,11,4,-10,-8,-14,-43,1,4,20,37,-14,-7,-10,8,11,-89,-15,22,-11,-7,-24,11,67,-5,-12,-24,4,4,0,-16,-23,24,25,9,-3,8,-15,31,-122,19,-25,-34,17,3,-13,-11,13,-31,17,-15,51,47,-10,7,-5,127,-24,25,-25,-11,-16,57,29,-17,29,-38,16,-9,-30, 
  /* [5][0][][] */ -12,10,6,-1,-2,-31,6,94,57,-17,-8,-48,-19,39,51,22,-32,3,-9,-31,-72,-14,-2,-45,11,25,27,97,82,7,60,51,-56,12,6,-13,-57,-64,-26,-16,-33,-28,-7,10,63,13,8,25,-3,26,-3,-1,-44,-16,12,5,-22,-34,-8,34,-56,28,-28,-51,-3,19,-22,17,3,23,10,-8,33,6,9,-10,-7,33,15,124,10,-43,32,33,4,-9,13,-32,-17,-29,15,-118,-32,-30,-7,-127, 
  /* [6][0][][] */ -8,-7,-7,-62,1,-31,-12,6,11,25,-7,6,20,-51,14,-8,-15,-68,30,14,13,19,-4,15,88,12,10,11,36,-16,28,3,-28,4,-32,-8,15,-11,36,29,-14,-24,-46,-26,1,-19,28,-127,-8,51,19,10,7,-4,-8,-50,59,-27,-16,4,3,25,8,15,28,93,27,-14,-18,-8,6,-38,16,9,62,-13,-22,28,17,17,-10,2,47,-38,16,62,29,-8,21,-17,-30,-19,-25,6,-6,7, 
  /* [7][0][][] */ 12,-4,26,-19,-9,7,0,-16,-3,-2,-14,-5,-18,-88,31,6,3,-25,0,-7,25,-20,-42,-10,-13,-10,7,-19,-5,11,11,8,-4,6,-22,-26,2,-9,-25,27,4,-21,-24,12,-1,8,-17,67,3,20,-11,-14,-18,3,-17,-63,32,5,-11,6,-6,8,-17,3,-12,46,6,-29,-21,-8,-11,48,-12,-8,-5,10,40,-3,8,-13,-12,-37,32,-5,-28,127,5,12,-41,-23,3,13,-24,3,-7,-1, 
  /* [8][0][][] */ -67,45,-43,7,57,-20,10,36,12,72,-50,-7,13,42,76,-31,-10,26,-84,11,-4,35,-26,7,-45,-19,17,13,69,-98,-13,-11,31,5,33,2,-26,34,-49,61,13,15,11,-114,-42,-1,49,-30,-63,30,14,61,-127,65,29,9,0,-23,-35,-25,25,-44,15,34,-39,33,42,-19,19,13,37,82,-50,29,29,35,-6,-83,-7,-45,10,11,37,6,-72,-5,12,-59,3,51,-39,8,59,-15,-19,-12, 
  /* [9][0][][] */ 22,-62,-27,-26,11,5,-7,-1,30,-25,9,5,-65,-27,19,21,2,17,55,-31,-20,14,-30,-38,32,30,13,-21,-31,-42,-42,7,-2,27,8,31,6,55,-23,32,37,10,-13,-87,-1,-17,27,-127,-31,-3,5,14,-6,20,-10,18,-63,32,-1,34,20,8,15,43,32,123,43,50,11,-12,3,-20,-17,-12,-27,9,64,-5,2,42,-9,17,40,-50,7,14,-1,-2,-60,47,-20,7,19,28,11,-16, 
  /* [10][0][][] */ 26,51,-15,28,65,-127,-3,-32,24,53,30,-9,-12,7,18,-73,5,34,-25,34,-85,-10,-4,-32,-70,-11,-52,55,24,4,-1,40,-19,-17,36,-17,79,-33,-13,-14,-18,66,35,-12,-51,-14,-30,11,-19,-6,-26,2,-15,-8,0,-6,9,25,-19,-5,-11,-6,-16,15,-6,44,46,29,21,6,34,40,-60,-28,-49,-15,-7,24,-8,-10,41,7,-58,-37,59,-39,87,-4,-33,5,19,-7,77,25,-10,-119, 
  /* [11][0][][] */ 44,33,-26,24,5,12,53,9,0,-23,-28,-9,-4,3,39,-4,-9,-2,-90,-5,-8,15,0,-12,-43,-23,-4,9,8,23,0,-3,-1,8,11,18,4,12,-7,28,3,22,51,-87,34,-28,-5,-10,-127,9,12,-45,11,10,-15,10,-12,-20,5,3,19,-16,-10,8,-47,54,-15,21,29,-5,30,17,-54,-28,9,22,-4,-25,-48,3,22,11,87,38,-6,-15,-15,-10,3,26,-18,0,7,10,-20,14, 
  /* [12][0][][] */ -49,-7,-1,12,-36,28,-1,10,127,-1,-14,11,-3,3,-41,-45,26,16,9,55,41,30,-20,-20,13,-8,15,-29,-117,2,10,-45,17,-4,-11,-14,14,8,15,-6,-39,-27,12,5,-10,37,-7,-4,23,-2,-43,7,4,2,10,-18,61,-34,12,9,22,1,3,-18,-6,17,-35,-1,-1,2,-18,-31,27,0,-87,4,15,-1,-4,-82,2,1,56,51,-21,-29,-36,-32,5,29,-5,41,-10,-31,12,0, 
  /* [13][0][][] */ 18,-12,-28,24,27,3,5,0,-9,4,13,-4,1,-19,-3,-17,24,-66,-19,-1,-3,-25,16,-4,4,9,-2,-13,-23,-31,-5,20,-3,3,2,42,13,-9,-6,5,7,9,18,35,19,10,-13,-127,24,-9,11,12,-16,-5,7,-3,-6,20,4,16,-2,5,-2,4,-14,-14,-23,-55,-2,5,-9,-33,-17,26,4,15,-26,-16,16,6,20,-11,-11,17,6,29,19,24,-5,3,14,3,-5,16,-12,-1, 
  /* [14][0][][] */ -114,-59,39,32,21,-25,-40,0,-6,19,2,13,73,-3,-127,2,77,-14,-3,37,-2,3,60,16,-123,14,41,-10,-32,-67,-27,12,-11,5,30,-66,33,17,-1,2,17,46,-21,-33,13,127,94,64,-112,43,3,29,-61,-12,13,-12,10,17,64,68,16,50,33,31,-7,-3,-48,45,9,71,-41,-91,-75,-8,2,34,0,34,105,-12,62,17,21,16,56,32,66,44,18,30,65,8,-5,13,25,-17, 
  /* [15][0][][] */ 94,-5,58,11,-10,46,42,10,5,57,3,13,-93,-28,-17,40,17,19,39,-8,21,39,-72,51,15,2,71,4,16,33,-44,-62,17,-59,57,-16,55,-58,-68,-113,-17,33,9,39,9,55,-6,-25,95,-58,-38,35,30,-110,49,-111,-6,-59,3,29,-127,2,23,22,59,0,-55,43,-33,84,-10,10,13,7,11,1,24,-58,61,-5,8,-7,35,78,-28,15,23,-27,15,-18,65,-2,-60,33,20,-14, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.018179073929786682, 0.011077017523348331, 0.014712502248585224, 0.0097197694703936577, 0.01684684120118618, 0.013484083116054535, 0.012992626987397671, 0.016707709059119225, 0.00748042156919837, 0.011011377908289433, 0.017865248024463654, 0.034355003386735916, 0.01749136671423912, 0.019682614132761955, 0.018958946689963341, 0.015995696187019348, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10346, -9724, 3365, 59382, -1561, -4328, -10059, 4416, -2722, 787, 3404, -406, -459, -5235, 5145, -6627, -129, 17693, 25543, 2395, 2453, -1480, 1103, -420, 16805, -446, -512, -2890, -5704, -8453, 9131, -9403, -770, -1457, -1665, 12867, 2309, -4537, 21307, -24, -370, 2067, -9893, -7622, -7574, 64991, 1023, 15223, 32476, -12939, 171, 6743, 8491, -451, -6417, 2428, -10919, 1381, 2318, -6527, -486, -709, -12717, -1269, 606, 14986, 29671, 24089, -13802, 1157, -8005, -619, 45720, 11666, 453, 195, 18905, 31693, -1057, -7140, -2191, -6861, 922, -3558, 1517, 1084, 2029, 1042, 2131, -4378, -14, -942, -555, 408, 44, 52011, };
const TfArray<96, float> quant16_scale = { 96, { 0.00020441906235646456, 9.6841889899224043e-05, 0.0002466463774908334, 3.6668960092356429e-05, 0.00014820374781265855, 0.00017833433230407536, 0.00034822325687855482, 7.2973700298462063e-05, 0.00011988691403530538, 0.00043676383211277425, 0.00016893280553631485, 0.00039743719389662147, 0.00013001066690776497, 0.00042102424777112901, 0.00018682413792703301, 0.00012185445666546002, 0.00010469750122865662, 0.00029494662885554135, 5.9316298575140536e-05, 0.00022574093600269407, 4.6165503590600565e-05, 0.00018091837409883738, 0.00014568850747309625, 0.00034348477493040264, 0.0002115407696692273, 0.0002403411635896191, 0.00014040828682482243, 0.00019467860693112016, 0.00010996601486112922, 8.4456747572403401e-05, 0.00010403371561551467, 0.00017696742725092918, 0.00011989053746219724, 0.00012280534429010004, 0.00019369953952264041, 0.00018020207062363625, 0.00040216476190835238, 0.00012204518134240061, 4.9329850298818201e-05, 0.00016099640924949199, 0.00024883743026293814, 0.00031256926013156772, 0.00037994066951796412, 0.00015340399113483727, 0.00019198299560230225, 5.5304561101365834e-05, 0.00022972728766035289, 0.00022932293359190226, 8.3756036474369466e-05, 0.00017445483535993844, 0.0002183150063501671, 0.00019111618166789412, 0.00021781558461952955, 0.00026427162811160088, 0.00028589906287379563, 0.00043777504470199347, 0.00036944349994882941, 0.00024391636543441564, 0.00011025611456716433, 8.4759070887230337e-05, 0.00030031547066755593, 0.00014850094157736748, 0.00029831856954842806, 0.00012488641368690878, 0.00015242777590174228, 0.00019254565995652229, 7.4708696047309786e-05, 7.2596500103827566e-05, 0.00034190379665233195, 0.00022959562193136662, 0.00020159549603704363, 0.000112955502117984, 0.00012710798182524741, 0.0001481043582316488, 0.00014979236584622413, 0.00024389226746279746, 0.00050445989472791553, 5.0962727982550859e-05, 0.00025585672119632363, 0.00024598979507572949, 0.00015701816300861537, 0.00030096707632765174, 0.00012685378897003829, 0.00015808336320333183, 0.00012826366582885385, 9.7903204732574522e-05, 0.00013588722504209727, 0.00021602053311653435, 0.0002105837338604033, 0.00012130403047194704, 0.00020144693553447723, 0.00011403366079321131, 0.00014020237722434103, 0.00044146657455712557, 0.027980342507362366, 7.6836753578390926e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,3,-21,105,-20,24,-64,-56,17,-6,100,-10,6,-9,-6,56,4,14,-30,4,76,1,34,-34,1,19,43,47,24,15,23,48,-5,28,9,-14,3,49,-60,-26,21,9,27,21,-84,-53,24,-5,-10,-20,-10,-6,48,6,-7,1,-3,-35,26,-30,26,-3,127,27,-13,-11,12,-49,65,36,-1,-8,78,-32,72,4,16,-127,31,62,3,16,127,-13,39,29,-31,-21,36,-3,-13,83,2,20,-2,11, -50,13,-8,11,50,-9,-11,-127,39,15,-127,-4,-12,-15,3,93,17,-33,-11,-16,76,-98,127,26,-60,-32,-104,-17,28,39,-49,18,123,14,-11,0,-25,127,-66,-127,7,-20,-29,16,46,-127,127,-45,-76,47,48,7,38,-62,34,56,37,43,-102,82,127,32,3,-21,43,-38,-96,0,37,-31,-19,48,-49,-50,109,-4,-28,-59,-31,57,-63,60,-16,9,-11,47,55,-44,-27,55,-12,72,-127,-31,23,-127, -1,-4,-24,-73,7,21,37,19,-3,-1,3,62,3,-13,-13,4,-12,16,-12,17,11,23,25,-34,0,-32,10,12,-5,8,46,-78,44,17,12,-22,10,6,-33,-22,6,2,-16,11,23,-30,21,1,6,-6,4,-4,4,6,-3,7,-8,46,7,-3,10,-18,3,-16,-25,-18,31,-47,-106,-8,41,-18,-127,-23,-10,16,10,-11,7,10,-14,23,-37,-4,-42,20,26,34,-24,-13,26,-10,16,6,-1,-50, 
  /* [0][1][][] */ -41,56,-19,37,-87,-15,-11,-46,24,96,-44,-23,-28,-26,-8,61,127,-24,-91,-14,58,-127,-29,15,-35,-48,-127,-7,40,37,-50,28,-127,-77,-54,4,64,-1,-51,49,-17,87,2,-1,34,-48,-13,-32,127,45,-5,21,44,10,-36,-18,29,9,-127,127,-38,-89,21,127,-59,-35,-84,125,-34,127,-21,55,-34,-55,39,9,-36,-69,127,49,127,39,10,0,127,28,-97,46,-38,-31,-101,41,96,100,29,-60, 127,127,127,127,-46,-127,127,22,127,-127,16,-127,-102,127,127,127,-16,-127,-64,-127,127,22,-69,127,127,127,-55,-127,127,127,-127,127,-8,-127,-119,127,-127,-43,97,112,-127,-127,127,127,127,-119,-109,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,39,-108,-26,-69,-67,127,127,-73,127,127,-110,-127,127,-41,127,-127,-127,-127,125,-75,127,-39,127,79,127,-39,-127,-25,-110,-127,-119,-22,-127,-21,-127,-127,117, -25,63,-39,3,127,72,-21,45,5,24,-15,-5,-23,-30,-15,-8,-105,-22,-127,37,33,74,-13,-117,-34,-43,124,72,12,37,70,8,125,-50,127,-3,53,6,-96,16,36,24,-21,2,-23,-50,-13,-43,80,15,-13,40,-7,-4,-73,-13,24,21,127,-89,0,127,1,-34,-109,-29,-75,99,16,-18,109,24,-18,-58,15,47,-29,-6,-43,0,-45,9,47,24,-91,34,127,-50,33,-18,127,-9,-113,34,34,16, 
  /* [0][2][][] */ -4,-39,-22,-60,-6,13,40,29,-3,10,-22,52,27,-35,-8,6,42,2,7,21,-13,30,-18,-28,2,-25,8,2,-8,-7,48,-74,-40,72,-27,-25,31,-33,-70,18,12,9,-33,13,13,-78,-12,-1,-7,7,15,-8,7,1,-23,6,-2,46,-51,35,-7,-14,8,15,-5,-9,22,-50,-49,9,-23,-15,-117,-33,3,19,14,-10,56,19,25,23,-41,16,10,24,-23,8,4,26,23,-4,21,38,-6,-31, -28,-10,-27,26,-44,71,-24,62,5,-6,51,-13,127,-6,-18,-17,-2,-41,-57,22,-24,77,-46,-114,-48,-48,101,71,15,43,52,-1,-123,65,-11,-23,-28,-25,-127,-3,44,-12,-14,30,-27,-48,-19,-48,-61,28,68,24,-12,-80,31,52,19,28,73,-55,18,-57,-6,1,19,-25,-127,-53,-7,-30,-62,20,36,-45,-27,-7,-46,26,-56,5,50,35,15,10,6,60,-94,127,15,127,-32,-18,113,-22,46,82, -11,-33,-26,28,14,64,-42,11,3,-6,-3,12,15,-49,-10,-12,-46,-6,10,18,-27,6,-20,4,-3,19,-4,48,0,-6,33,29,20,42,20,-23,-7,-24,-33,8,12,-12,21,3,-73,-32,-12,4,0,-15,-1,-3,-8,8,-15,-4,0,-48,10,-28,-24,47,12,-28,-10,-2,33,-52,48,6,51,-24,28,-57,-16,23,11,12,-6,23,-26,32,88,-14,-19,53,37,-10,108,14,2,-18,12,-23,-7,-50, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0086878100410103798, 0.0041157803498208523, 0.010482470504939556, 0.0015584308421239257, 0.0062986589036881924, 0.007579208817332983, 0.014799488708376884, 0.0031013821717351675, 0.0050951936282217503, 0.01856246218085289, 0.0071796439588069916, 0.016891080886125565, 0.0055254534818232059, 0.017893530428409576, 0.0079400260001420975, 0.0051788142882287502, 0.0044496436603367329, 0.012535231187939644, 0.0025209425948560238, 0.0095939897000789642, 0.001962033798918128, 0.0076890308409929276, 0.0061917616985738277, 0.014598103240132332, 0.0089904824271798134, 0.010214499197900295, 0.0059673520736396313, 0.0082738408818840981, 0.0046735554933547974, 0.0035894117318093777, 0.0044214329682290554, 0.0075211157090961933, 0.0050953477621078491, 0.0052192271687090397, 0.0082322303205728531, 0.0076585877686738968, 0.017092002555727959, 0.005186920054256916, 0.0020965186413377523, 0.006842347327619791, 0.010575590655207634, 0.013284193351864815, 0.016147477552294731, 0.0065196696668863297, 0.0081592770293354988, 0.0023504437413066626, 0.0097634093835949898, 0.009746224619448185, 0.0035596315283328295, 0.0074143302626907825, 0.009278387762606144, 0.0081224376335740089, 0.0092571619898080826, 0.011231543496251106, 0.012150710448622704, 0.018605438992381096, 0.015701347962021828, 0.010366445407271385, 0.0046858848072588444, 0.0036022604908794165, 0.012763407081365585, 0.0063112899661064148, 0.012678538449108601, 0.0053076725453138351, 0.0064781801775097847, 0.0081831905990839005, 0.003175119636580348, 0.0030853510834276676, 0.014530911110341549, 0.0097578139975667, 0.0085678081959486008, 0.0048006088472902775, 0.0054020890966057777, 0.0062944348901510239, 0.0063661751337349415, 0.010365420952439308, 0.021439544856548309, 0.0021659159101545811, 0.010873910970985889, 0.010454566217958927, 0.0066732717677950859, 0.012791100889444351, 0.0053912857547402382, 0.006718542892485857, 0.0054512056522071362, 0.0041608861647546291, 0.0057752067223191261, 0.0091808727011084557, 0.0089498087763786316, 0.0051554213277995586, 0.0085614947602152824, 0.0048464303836226463, 0.0059586009010672569, 0.018762329593300819, 1.1891645193099976, 0.0032655620016157627, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 19737, 1012, 4851, -494, 4092, 5172, 16276, 5922, -1249, 16210, 5322, 2581, 7656, 36490, -330, -1934, 7800, 12540, 1978, -186, -655, 17114, 3937, 4018, 6685, 5061, 4735, 4054, 21, 54, 7152, 10143, 17654, 1611, 5773, -621, 15224, 9243, 756, 3538, 793, 11420, 10463, 4759, 3432, 11969, 13765, 5090, 4137, 3081, 303, -776, 12199, 6400, 6687, 11229, -370, 6746, 2350, 3638, 10436, 7446, 3283, 8053, 6521, 4660, 5535, -1000, 18194, 9474, 9641, -1133, -1204, 3070, 1206, 2366, 23323, 14566, 14700, -2692, 4002, -4619, -1498, 595, 7292, 4987, 6753, 4906, 9312, 3350, 7791, 4358, 15256, 21949, -9775, 14315, };
const TfArray<96, float> quant18_scale = { 96, { 0.00013277967809699476, 0.00030281476210802794, 0.00027566385688260198, 0.0010926971444860101, 0.00039385823765769601, 0.0001803981140255928, 0.00019288607290945947, 0.00060485623544082046, 0.00040951947448775172, 0.00011191573867108673, 0.0002625441993586719, 0.00032068369910120964, 0.0003496902936603874, 0.00013155855413060635, 0.00029614652157761157, 0.00035485811531543732, 0.00027760333614423871, 0.00018727626593317837, 0.00022115296451374888, 0.00075068802107125521, 0.00047249006456695497, 0.00014577800175175071, 0.00039402872789651155, 0.00019381826859898865, 0.00026097532827407122, 0.00041274321847595274, 0.00029822814394719899, 0.00021938799181953073, 0.0006726539577357471, 0.00033113572862930596, 0.00020941293041687459, 0.00018707325216382742, 0.00011308686953270808, 0.00068662688136100769, 0.00028731380007229745, 0.00050707731861621141, 0.00014811365690547973, 0.00028197246138006449, 0.00063414830947294831, 0.00024271874281112105, 0.00063885370036587119, 0.00016323722957167774, 0.00020580019918270409, 0.00016321630391757935, 0.00033182502374984324, 0.00027148160734213889, 0.00020403586677275598, 0.00028536212630569935, 0.00037497925222851336, 0.00028176995692774653, 0.00041119827073998749, 0.00084832357242703438, 0.00021789013408124447, 0.00024562413454987109, 0.00034476522705517709, 0.00016504839004483074, 0.00039525571628473699, 0.00025077519239857793, 0.00032927055144682527, 0.00045650225365534425, 0.00015862150758039206, 0.00019633123883977532, 0.00032328814268112183, 0.0003435038379393518, 0.00015628660912625492, 0.00024633167777210474, 0.00035250603104941547, 0.00031910339021123946, 0.00014803861267864704, 0.00012830250489059836, 0.00020936028158757836, 0.00046451864182017744, 0.00032291022944264114, 0.00043420170550234616, 0.00032551324693486094, 0.0005237701116129756, 0.00010289408965036273, 0.00030545625486411154, 0.00011229206575080752, 0.00044166826410219073, 0.00025639653904363513, 0.00044306533527560532, 0.00025171812740154564, 0.00051391462329775095, 0.0002176298585254699, 0.0003096400760114193, 0.00024112151004374027, 0.00028644243138842285, 0.000181672687176615, 0.00045618831063620746, 0.00017774537263903767, 0.00039381766691803932, 0.00014174693205859512, 0.00012789233005605638, 0.00029943528352305293, 0.00023259317094925791, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 68,-42,108,125,64,-28,27,-44,127,-18,-77,-82,59,90,-21,-95, 
  /* [1][0][][] */ 48,79,-19,7,54,-21,12,32,33,81,-55,127,5,-36,93,-75, 
  /* [2][0][][] */ 48,-27,-3,-7,-37,46,-31,84,-74,-86,3,80,19,-127,83,-80, 
  /* [3][0][][] */ 105,99,-16,21,-127,-19,-52,-11,-16,-1,94,-62,-45,94,-40,-20, 
  /* [4][0][][] */ -6,-1,18,23,-27,18,-17,37,-57,-30,-6,-3,0,-127,18,-4, 
  /* [5][0][][] */ 106,-57,-14,-15,5,-108,-49,-2,-10,-23,-127,-12,41,-9,7,41, 
  /* [6][0][][] */ -102,-112,-25,127,-68,-4,-61,28,-121,-79,-112,-45,37,71,30,110, 
  /* [7][0][][] */ -8,13,-63,52,37,-127,-27,49,3,-31,17,16,8,36,-26,19, 
  /* [8][0][][] */ 20,-31,-17,-8,9,35,-59,-62,-2,21,-58,-6,-127,-4,-15,12, 
  /* [9][0][][] */ 14,-35,77,120,8,39,3,-67,127,-64,20,-29,10,20,-82,29, 
  /* [10][0][][] */ -127,-56,-23,-29,94,75,33,59,104,-46,-72,16,126,-65,-85,49, 
  /* [11][0][][] */ 45,-37,-127,33,64,32,-25,52,-8,-39,-18,-2,8,41,-58,-6, 
  /* [12][0][][] */ 127,-53,-20,3,-20,-75,-95,-56,33,5,-126,-24,-85,-18,7,76, 
  /* [13][0][][] */ 110,-117,21,-67,46,-57,-95,-127,-1,-124,-42,41,61,-85,2,15, 
  /* [14][0][][] */ -65,16,-68,-54,80,-127,31,-67,49,24,-11,-87,34,118,13,16, 
  /* [15][0][][] */ 31,2,66,43,53,-52,-37,-19,27,-58,-67,-13,-127,-63,-21,49, 
  /* [16][0][][] */ -127,68,-20,-5,-27,106,45,88,-35,18,103,16,8,16,-13,-34, 
  /* [17][0][][] */ 4,-13,-30,-40,-49,13,30,97,-38,127,-34,28,11,78,71,-10, 
  /* [18][0][][] */ -8,127,-44,-22,-2,-16,49,-67,1,119,-46,101,13,-76,33,-104, 
  /* [19][0][][] */ 7,-16,23,16,-10,38,2,19,13,15,-42,-22,-127,1,-11,34, 
  /* [20][0][][] */ 106,-72,-13,-84,-28,19,51,-71,-62,24,-127,-35,25,-1,36,0, 
  /* [21][0][][] */ 72,-9,127,48,-12,53,30,-2,3,28,-62,5,-23,110,0,1, 
  /* [22][0][][] */ 10,30,20,-12,-25,11,38,127,-18,-25,29,70,8,30,12,40, 
  /* [23][0][][] */ -38,33,-65,-8,10,-127,7,28,-20,-34,-2,-5,-72,-3,0,45, 
  /* [24][0][][] */ 32,-58,14,-70,44,-7,-39,-11,33,17,57,79,-31,85,127,43, 
  /* [25][0][][] */ -119,-127,-70,17,2,-27,12,5,-81,-2,-124,17,35,48,35,82, 
  /* [26][0][][] */ 12,-3,39,-12,7,6,-38,50,-85,-77,-11,30,0,-127,36,-2, 
  /* [27][0][][] */ -110,46,-31,28,44,-19,-5,36,39,-36,127,31,-22,10,-16,-35, 
  /* [28][0][][] */ -20,-14,19,30,-17,-7,-1,93,20,5,-33,-4,-127,-1,-7,46, 
  /* [29][0][][] */ -13,73,37,-37,43,-18,26,-36,-127,42,-24,0,6,23,-84,16, 
  /* [30][0][][] */ -16,19,-127,-26,29,-46,23,21,-28,8,1,-22,-40,-48,-9,6, 
  /* [31][0][][] */ 101,-35,-127,-8,33,-8,-60,64,-19,-16,-95,-66,17,-2,-71,37, 
  /* [32][0][][] */ -117,39,40,60,5,118,26,47,36,8,127,19,-21,44,-26,-29, 
  /* [33][0][][] */ 10,-2,127,-10,-63,19,22,-42,5,26,-10,16,-12,7,46,18, 
  /* [34][0][][] */ -43,-13,-54,-87,-5,-1,29,0,-5,-44,21,-127,-1,31,21,36, 
  /* [35][0][][] */ 1,-21,22,51,43,4,28,8,-95,58,11,23,-30,127,-46,-36, 
  /* [36][0][][] */ -112,43,-28,-7,-46,14,48,99,0,28,127,-31,16,28,33,16, 
  /* [37][0][][] */ -49,16,127,-45,-71,-68,17,-2,-12,7,-13,25,-12,-73,49,8, 
  /* [38][0][][] */ -3,-2,-6,29,44,-34,-40,17,0,-5,84,-16,127,23,-15,16, 
  /* [39][0][][] */ -26,-13,23,-37,-42,-85,36,127,-19,-11,11,-38,52,54,63,58, 
  /* [40][0][][] */ 61,-4,-21,-22,-12,78,-20,9,11,-16,2,-2,127,7,-17,-1, 
  /* [41][0][][] */ 13,-35,-31,-127,28,-12,-42,-64,4,-69,21,-55,-3,-17,-24,46, 
  /* [42][0][][] */ 53,40,9,113,-81,-5,-89,-1,-80,-39,49,-65,-57,127,-34,3, 
  /* [43][0][][] */ 17,127,-50,121,21,26,81,-51,-37,76,10,20,7,-32,38,52, 
  /* [44][0][][] */ -29,-16,-127,20,76,87,-72,34,-18,-24,59,-39,-2,-43,-46,-5, 
  /* [45][0][][] */ -6,25,-24,-127,-14,8,69,0,-22,24,-19,30,8,-98,17,-26, 
  /* [46][0][][] */ 21,27,48,-2,5,23,-9,63,26,-17,-2,10,10,127,37,-37, 
  /* [47][0][][] */ 21,-24,23,-47,-47,18,-59,62,-8,-38,31,31,25,-127,40,24, 
  /* [48][0][][] */ 9,-7,6,-127,-7,-10,-4,5,13,-32,14,-6,1,42,-2,62, 
  /* [49][0][][] */ 39,-57,20,96,79,-2,-13,49,-70,-6,17,46,-4,47,127,-2, 
  /* [50][0][][] */ -23,-4,52,-12,-6,127,-3,-69,48,6,115,5,88,-32,-14,-71, 
  /* [51][0][][] */ 33,36,15,12,25,7,-40,37,53,11,14,127,26,49,26,-51, 
  /* [52][0][][] */ -38,83,127,-4,-1,-43,6,-51,-31,1,0,46,-2,93,-111,-10, 
  /* [53][0][][] */ -9,-27,-46,-127,-53,1,15,-25,-36,29,15,-18,17,-23,37,5, 
  /* [54][0][][] */ 0,15,-15,-52,13,8,-12,12,38,-21,0,-24,-6,127,17,17, 
  /* [55][0][][] */ -6,-29,-49,8,22,-25,-9,-127,16,-69,-2,-31,-17,-62,-47,-37, 
  /* [56][0][][] */ 36,36,41,68,-4,-33,14,127,26,-21,9,-52,83,-29,-53,30, 
  /* [57][0][][] */ 110,-39,127,-5,-77,-32,16,-6,35,16,-67,5,64,-26,35,12, 
  /* [58][0][][] */ 100,98,16,79,-126,-4,6,76,-2,13,127,-18,-69,-22,-17,-79, 
  /* [59][0][][] */ 105,-25,-7,-9,-28,-27,-23,-1,-37,21,-127,-16,21,-14,19,23, 
  /* [60][0][][] */ -127,24,11,-17,17,25,2,49,6,-22,72,0,-54,9,29,-21, 
  /* [61][0][][] */ -76,57,35,31,38,-2,-62,-49,127,-89,73,-44,56,-21,-65,-86, 
  /* [62][0][][] */ -10,-50,-127,61,41,83,10,93,35,-53,23,-21,-76,7,-94,-4, 
  /* [63][0][][] */ -28,12,127,-45,-64,-74,33,-20,0,12,2,11,-8,-41,65,11, 
  /* [64][0][][] */ 32,54,-27,8,58,-20,103,-127,-46,96,-6,6,-7,-112,-28,63, 
  /* [65][0][][] */ 5,13,17,-27,68,7,-21,-127,-41,-79,-43,-54,5,-30,37,10, 
  /* [66][0][][] */ -127,9,-22,7,-21,22,14,-46,-49,-30,-52,39,56,9,30,65, 
  /* [67][0][][] */ 19,-102,37,114,-2,-17,-87,60,63,-18,-11,-11,6,-4,-127,-22, 
  /* [68][0][][] */ -18,-3,-26,127,-77,-21,-1,-36,-76,34,18,-26,-12,-109,-23,-37, 
  /* [69][0][][] */ 85,111,24,115,67,-1,73,-124,8,127,25,77,-7,-54,5,-13, 
  /* [70][0][][] */ 15,-42,-26,-89,127,-59,37,24,64,-55,69,-83,27,106,83,122, 
  /* [71][0][][] */ -3,63,17,83,44,-127,-49,86,36,-107,32,17,14,-63,-54,47, 
  /* [72][0][][] */ -127,-89,-23,66,12,15,-7,39,-53,-14,-92,57,59,12,17,112, 
  /* [73][0][][] */ -7,-18,-20,49,19,-23,-18,-15,77,-5,-22,3,4,127,-40,-37, 
  /* [74][0][][] */ 48,-29,-5,-31,-44,0,53,-8,-28,0,-63,0,-127,-2,30,42, 
  /* [75][0][][] */ -13,-27,-25,127,-32,3,-2,-8,-61,14,-15,-16,6,-41,-19,-29, 
  /* [76][0][][] */ -3,-20,0,36,17,-1,-40,-127,11,-123,-5,34,-45,-14,51,-28, 
  /* [77][0][][] */ 127,-46,47,65,-24,6,-36,3,53,16,-6,45,30,1,-47,27, 
  /* [78][0][][] */ -41,-4,74,27,21,24,-73,31,81,9,-40,-16,26,127,25,-32, 
  /* [79][0][][] */ -17,25,35,6,33,60,-59,-52,5,-49,72,-22,127,-23,-29,-36, 
  /* [80][0][][] */ -127,-65,-51,81,8,20,3,15,-119,-6,-87,35,89,-91,-24,37, 
  /* [81][0][][] */ 70,11,-69,50,127,95,-32,-27,11,-107,-14,-82,-29,10,-96,32, 
  /* [82][0][][] */ 127,107,12,34,-100,-26,-73,-12,-60,-21,103,-40,-15,92,2,-48, 
  /* [83][0][][] */ 127,46,18,-30,24,-19,-22,8,33,7,92,-44,-42,-35,-37,-92, 
  /* [84][0][][] */ -6,-102,-109,-49,58,54,7,-127,-41,-76,64,39,-31,-16,5,3, 
  /* [85][0][][] */ -31,-33,-63,-61,-33,-29,76,102,-34,127,-17,-56,1,70,74,-20, 
  /* [86][0][][] */ 102,-11,12,0,-8,-30,5,-19,16,6,-127,-4,22,32,-11,23, 
  /* [87][0][][] */ -14,29,-9,-32,-24,34,-35,51,-30,-43,42,13,17,-127,19,9, 
  /* [88][0][][] */ 6,-15,-95,-15,71,-31,-41,-127,-1,-46,-38,-6,-9,-19,18,-21, 
  /* [89][0][][] */ 34,-14,37,-127,21,5,-67,103,55,-56,19,17,-2,34,53,48, 
  /* [90][0][][] */ 0,4,-20,58,81,-5,99,-104,97,127,-41,18,-4,33,-11,-21, 
  /* [91][0][][] */ 49,-21,-48,-2,-24,-127,0,5,-23,11,-76,-7,38,-28,2,40, 
  /* [92][0][][] */ 24,19,127,58,44,44,-17,54,-61,8,-92,23,35,93,3,1, 
  /* [93][0][][] */ 127,-38,-42,-18,-22,-62,11,32,-34,54,-101,-8,-3,7,-8,63, 
  /* [94][0][][] */ 15,-17,48,75,116,-28,-11,54,6,-18,0,57,-6,127,-32,-77, 
  /* [95][0][][] */ -116,61,37,55,34,42,32,3,22,23,127,-15,-14,18,-14,-36, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00039779877988621593, 0.00090721220476552844, 0.00082586996722966433, 0.0032736454159021378, 0.0011799721978604794, 0.00054046034347265959, 0.00057787337573245168, 0.0018121076282113791, 0.0012268921127542853, 0.0003352918429300189, 0.00078656437108293176, 0.00096074625616893172, 0.0010476480238139629, 0.00039414037019014359, 0.00088723457884043455, 0.0010631304467096925, 0.0008316804887726903, 0.00056106678675860167, 0.00066255906131118536, 0.0022490096744149923, 0.0014155476819723845, 0.00043674086919054389, 0.0011804829118773341, 0.00058066617930307984, 0.00078186410246416926, 0.0012365502770990133, 0.00089347094763070345, 0.00065727130277082324, 0.0020152248907834291, 0.00099205982405692339, 0.0006273867329582572, 0.00056045857490971684, 0.00033880048431456089, 0.0020570869091898203, 0.00086077238665893674, 0.0015191687270998955, 0.00044373833225108683, 0.00084477011114358902, 0.0018998646410182118, 0.00072716863360255957, 0.0019139617215842009, 0.00048904749564826488, 0.00061656325124204159, 0.00048898480599746108, 0.00099412491545081139, 0.00081334018614143133, 0.00061127741355448961, 0.0008549252524971962, 0.0011234120465815067, 0.00084416335448622704, 0.0012319217203184962, 0.0025415190029889345, 0.00065278384136036038, 0.00073587300721555948, 0.0010328928474336863, 0.00049447361379861832, 0.0011841589584946632, 0.00075130525510758162, 0.00098647188860923052, 0.0013676492962986231, 0.00047521910164505243, 0.00058819487458094954, 0.00096854899311438203, 0.0010291138896718621, 0.00046822393778711557, 0.00073799275560304523, 0.0010560838272795081, 0.00095601176144555211, 0.00044351350516080856, 0.00038438549381680787, 0.0006272289901971817, 0.0013916658936068416, 0.00096741685410961509, 0.0013008384266868234, 0.0009752152836881578, 0.0015691791195422411, 0.00030826361034996808, 0.00091512588551267982, 0.00033641929621808231, 0.0013232077471911907, 0.00076814636122435331, 0.0013273932272568345, 0.00075413018930703402, 0.0015396528178825974, 0.00065200409153476357, 0.00092766032321378589, 0.00072238344000652432, 0.00085816177306696773, 0.00054427888244390488, 0.0013667087769135833, 0.0005325129022821784, 0.001179850660264492, 0.0004246640601195395, 0.00038315661367960274, 0.00089708750601857901, 0.00069683312904089689, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -40261, 2680, 3418, -4882, 1780, -5747, -13392, -47353, 6653, 25175, 31182, -2012, -4730, -22868, 38914, -47663, };
const TfArray<16, float> quant20_scale = { 16, { 0.00062910257838666439, 0.0007179518579505384, 0.0012421119026839733, 0.00096213974757120013, 0.0009434313396923244, 0.0011267344234511256, 0.00093005801318213344, 0.00050101371016353369, 0.00066277006408199668, 0.00059021014021709561, 0.00080240529496222734, 0.00069035583874210715, 0.0011952531058341265, 0.0012637908803299069, 0.00048666333896107972, 0.00056503643281757832, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -17,-1,-23,10,23,0,-4,110,-50,17,42,-4,15,-10,-14,12,12,-18,-3,-7,74,-6,21,127,-15,91,2,-8,24,-13,25,-30,-16,47,20,-55,11,47,19,-9,-110,-23,22,41,40,28,-127,-51, 
  /* [1][0][][] */ -29,-14,21,15,-31,9,0,50,-48,-39,1,-40,-21,-18,0,-8,-22,111,-8,24,11,6,-26,-12,22,-39,20,20,-23,-82,-34,24,-20,-2,34,0,-1,-41,-2,21,-13,-28,127,9,13,-1,21,-10, 
  /* [2][0][][] */ -22,-7,-8,-41,-2,-66,10,-19,-4,10,14,22,18,6,-12,12,1,-14,-25,-9,-1,3,-1,-127,-10,74,-17,0,-1,-25,-6,-10,-12,51,11,-1,22,13,26,2,-40,3,-15,-4,-7,-9,16,10, 
  /* [3][0][][] */ -9,35,-3,-30,-1,-1,2,-5,-18,-7,4,41,-127,7,-5,-4,5,5,-20,5,-35,3,4,15,-10,-9,0,22,-8,16,1,14,1,3,17,20,-18,25,38,5,9,5,30,-32,2,-8,6,21, 
  /* [4][0][][] */ 30,-30,13,9,20,30,27,-26,-24,-3,-9,-17,-2,4,0,19,17,-8,-79,8,-3,8,14,67,5,-26,-3,50,12,-76,18,7,17,-39,33,-127,10,33,-2,20,-23,22,11,-21,-14,-22,12,2, 
  /* [5][0][][] */ 28,6,-20,58,2,-3,7,23,9,-5,34,16,2,50,-3,-3,-30,23,25,4,7,10,1,-29,5,-50,4,-17,-6,-6,3,2,56,-127,2,29,-20,-15,10,3,-90,58,21,-2,-4,-2,-92,-7, 
  /* [6][0][][] */ 26,0,9,9,-14,-5,-4,-12,0,10,2,9,-20,17,5,-3,-2,-17,127,3,0,15,13,-33,1,6,30,-11,-13,0,-1,8,2,-9,32,-38,1,-47,71,19,3,-6,-9,4,-5,-2,0,-9, 
  /* [7][0][][] */ -45,-17,-8,29,-9,81,-5,58,-7,40,-7,127,85,8,-20,0,3,-27,-7,-28,-33,-13,-16,73,-6,-36,-57,-30,-8,-15,-14,-4,-1,3,-31,4,15,-52,110,-5,26,26,-76,-74,19,-4,-3,8, 
  /* [8][0][][] */ -50,-43,-2,5,-6,7,1,25,-2,-71,10,51,47,3,21,9,-22,66,-34,6,-49,25,-12,-16,-1,2,-1,54,-12,115,-4,7,3,6,-23,-124,-127,64,32,28,19,-4,113,-20,7,26,25,22, 
  /* [9][0][][] */ -24,6,0,31,13,-31,-8,-1,53,-44,14,58,-60,0,25,1,-9,25,-34,-28,49,15,-18,-16,7,10,59,-23,3,10,12,-14,4,22,75,-101,-17,-127,-95,19,-27,25,54,9,1,4,-18,-50, 
  /* [10][0][][] */ -21,-8,-38,-127,40,91,13,-16,1,31,30,12,50,-54,-37,23,29,-37,54,-21,35,-24,35,46,-51,-103,7,-31,45,31,50,-42,-22,-84,20,-4,21,-44,4,-30,-36,-60,-9,11,14,12,27,-36, 
  /* [11][0][][] */ -4,50,-6,65,33,-62,-76,-19,3,54,-21,6,-6,50,9,-78,16,41,7,-13,-49,-92,13,-2,14,-43,32,-24,48,-49,25,-101,42,-13,-34,-92,86,10,-4,-127,-3,57,101,-68,-19,-59,39,22, 
  /* [12][0][][] */ 122,-7,-15,11,4,21,8,106,21,-14,-59,-28,1,7,-14,-4,-3,6,-5,-10,3,-2,7,16,1,12,-7,6,-7,12,-8,18,-3,-68,-8,7,-9,-18,-25,-5,-20,-77,5,-127,-59,-2,83,-8, 
  /* [13][0][][] */ 10,5,5,5,8,-11,1,-1,0,11,9,23,-3,4,3,-1,4,5,8,3,13,-11,6,-3,1,3,11,127,13,-6,6,-5,7,-2,-42,23,11,-5,8,-16,-15,0,1,2,0,-5,-11,-12, 
  /* [14][0][][] */ 69,-27,57,-62,53,19,29,-94,-53,-52,-10,119,-67,8,54,3,55,21,-50,61,17,17,77,-9,18,62,-29,-112,26,-36,68,44,-14,82,-127,-48,-39,44,86,14,-29,2,45,-1,11,8,5,-25, 
  /* [15][0][][] */ -1,-48,-65,-30,61,24,80,-54,-1,14,-13,-36,81,25,-113,63,62,41,92,-79,-95,-29,70,-12,-90,38,33,56,70,57,56,-35,35,65,106,124,-13,-107,-16,-34,100,57,127,-46,-8,-23,-11,62, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026736859232187271, 0.03051295317709446, 0.052789755165576935, 0.04089093953371048, 0.040095832198858261, 0.047886211425065994, 0.039527464658021927, 0.02129308320581913, 0.028167728334665298, 0.025083931162953377, 0.034102223813533783, 0.029340123757719994, 0.050798255950212479, 0.053711112588644028, 0.02068319171667099, 0.024014048278331757, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 4715, 34862, -826, 41328, 4733, 128363, -2218, 50858, 4723, 31911, 25647, -71, 3270, 28498, -1346, -2195, -421, 1013, 2674, -1487, 717, -4010, -188, -21868, -6272, 48298, 133591, 107347, 3309, 4292, -2571, 843, 23715, 1016, 27852, 7389, 33931, 2598, 61112, 2643, 2286, 74583, 238, 5099, 46277, 482, 5554, 50360, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.9444417022168636e-05, 3.4616958146216348e-05, 0.00016938349290285259, 5.4268846724880859e-05, 0.00015537484432570636, 6.3299630710389465e-05, 0.00015788417658768594, 0.00011255355639150366, 7.354310218943283e-05, 3.910552550223656e-05, 5.0314840336795896e-05, 0.00010341325105400756, 3.9457409002352506e-05, 3.522404222167097e-05, 0.00015137463924475014, 0.00019920173508580774, 0.00016322611190844327, 6.2436345615424216e-05, 0.00010786917118821293, 0.00016304207383655012, 9.2550610133912414e-05, 0.00021567297517322004, 8.9214328909292817e-05, 0.00013473787112161517, 8.7137501395773143e-05, 9.0583955170586705e-05, 3.2982243283186108e-05, 6.211847357917577e-05, 0.00012357348168734461, 9.8271593742538244e-05, 0.0001185881847050041, 0.00016373679682146758, 4.2113333620363846e-05, 0.00012833021173719317, 3.1137020414462313e-05, 4.616240767063573e-05, 0.00017502473201602697, 8.2864775322377682e-05, 9.2294540081638843e-05, 0.00010339233267586678, 9.8500597232487053e-05, 7.690657366765663e-05, 8.7203676230274141e-05, 7.7067415986675769e-05, 3.0245799280237406e-05, 0.0001695642713457346, 8.1987898738589138e-05, 2.9325272407731973e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,99,67,52,-35,104,-64,60,-87,-78,48,53,-41,-73,-91,101,75,50,77,66,-73,-83,52,-33,-40,-66,-65,-67,60,-60,-114,-12,42,70,65,-63,53,-50,-24,50,-72,60,61,-94,10,76,-34, 81,-95,127,85,-79,-69,-58,-84,96,-101,-62,73,80,-107,-95,92,-39,93,84,127,86,-116,54,72,-53,-77,-70,-80,55,79,-28,-127,-85,80,82,83,-81,83,-82,-16,76,-93,85,90,-74,-127,94,-100, 35,-46,70,36,18,-42,-48,-39,42,-31,5,33,30,-78,-56,-1,-54,36,36,69,34,-55,30,26,-29,-46,-46,-21,32,29,89,-88,-84,46,36,34,-30,40,-38,-10,41,-40,36,43,-6,-10,36,-71, 
  /* [0][1][][] */ 92,-111,-41,93,55,-82,127,-89,87,-112,-71,81,84,-109,-12,-127,127,105,74,-37,83,107,-127,74,74,-76,-93,-99,-127,87,-68,-8,-87,75,106,96,-85,79,-81,89,84,-101,88,92,-90,106,93,-88, 127,-127,-64,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-21,99,-67,127,127,-52,127,127,68,127,127,-127,-127,-127,52,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 62,-78,-33,66,36,-61,-49,-63,56,-42,-60,59,49,-53,-16,13,-63,51,59,-32,58,65,51,66,66,-66,-63,-45,36,55,127,16,-60,71,49,50,-51,61,-59,57,61,-60,55,61,-61,-68,60,-55, 
  /* [0][2][][] */ 46,-52,-45,48,26,-54,64,-41,42,-73,-4,39,56,-72,82,-79,73,49,35,-32,26,-8,-77,30,-23,-45,-50,-51,-74,31,-42,90,-72,39,49,43,-27,37,-44,-88,48,-51,43,46,-25,15,40,-70, 72,-75,-48,80,-55,-63,-72,-67,51,-77,-65,60,75,-46,127,32,-46,59,61,-44,55,-15,42,68,-47,-66,-79,-64,30,62,-25,115,-54,64,58,60,-50,61,-68,-107,71,-66,63,62,-87,48,63,-51, 42,-41,-28,46,28,-18,-18,-34,15,-26,-50,29,33,4,68,24,-36,22,29,-33,29,3,40,44,-23,-28,-50,-25,35,33,58,67,1,33,16,23,-23,30,-29,-56,30,-32,29,28,-64,9,31,-3, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.002951387781649828, 0.0014712207484990358, 0.0071987984701991081, 0.0023064259439706802, 0.0066034304909408092, 0.0026902342215180397, 0.0067100771702826023, 0.0047835260629653931, 0.0031255818903446198, 0.0016619848320260644, 0.0021383806597441435, 0.0043950630351901054, 0.0016769398935139179, 0.0014970217598602176, 0.0064334217458963394, 0.0084660733118653297, 0.006937109399586916, 0.0026535447686910629, 0.0045844395644962788, 0.0069292881526052952, 0.003933400847017765, 0.0091661009937524796, 0.0037916088476777077, 0.0057263593189418316, 0.0037033436819911003, 0.0038498181384056807, 0.0014017453650012612, 0.0026400350034236908, 0.0052518728189170361, 0.0041765426285564899, 0.0050399978645145893, 0.0069588138721883297, 0.0017898166552186012, 0.0054540340788662434, 0.0013233233476057649, 0.0019619022496044636, 0.0074385511688888073, 0.0035217530094087124, 0.0039225178770720959, 0.004394174087792635, 0.004186275415122509, 0.0032685294281691313, 0.0037061562761664391, 0.0032753651030361652, 0.0012854464584961534, 0.0072064814157783985, 0.0034844856709241867, 0.0012463240418583155, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 532, 693, 1403, 462, 7713, 12756, 1820, -38, -620, -510, 822, 886, 2445, 764, 20451, 2408, 1236, -1033, -384, 2305, -1528, 9815, 7603, 7816, 4708, 149, 3010, 3206, 7943, -405, 7473, 4514, 389, -190, 4060, 3133, -1401, 222, -568, 4386, 561, -388, -717, 64, 809, 2767, 510, 859, };
const TfArray<48, float> quant24_scale = { 48, { 0.00048321069334633648, 0.0010006175143644214, 0.0003651865990832448, 0.00035002565709874034, 0.00028295931406319141, 0.00031570019200444221, 0.00059870450058951974, 0.00026716108550317585, 0.00048058773973025382, 0.0008875442435964942, 0.0012372168712317944, 0.00032954307971522212, 0.00052076170686632395, 0.00098346464801579714, 0.00017352320719510317, 0.00051150901708751917, 0.00039044523146003485, 0.00040051224641501904, 0.00027369969757273793, 0.00039374467451125383, 0.00040470249950885773, 0.0002644647320266813, 0.000482905626995489, 0.00020416625193320215, 0.00032906362321227789, 0.00040943836211226881, 0.0023170886561274529, 0.00057430786546319723, 0.00022593449102714658, 0.0005130642675794661, 0.00034717432572506368, 0.00026890146546065807, 0.00094851368339732289, 0.00033059480483643711, 0.00090550701133906841, 0.00060296448646113276, 0.00097417098004370928, 0.00042565260082483292, 0.00024153162667062134, 0.00040887235081754625, 0.00025105124223046005, 0.00031256367219612002, 0.00043969930266030133, 0.00032281404128298163, 0.0023881196975708008, 0.00051560497377067804, 0.00048525221063755453, 0.0013769351644441485, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,2,0,72,-30,38,24,-25, 
  /* [1][0][][] */ 17,76,48,26,2,-47,110,127, 
  /* [2][0][][] */ -23,7,6,0,-127,-27,22,3, 
  /* [3][0][][] */ 103,9,-1,-127,-123,15,29,-23, 
  /* [4][0][][] */ -127,24,-16,-16,69,-15,32,25, 
  /* [5][0][][] */ -106,-38,24,-12,-127,10,12,94, 
  /* [6][0][][] */ -15,-127,22,-25,12,8,-6,27, 
  /* [7][0][][] */ -74,-7,9,99,127,-39,-35,6, 
  /* [8][0][][] */ 71,-4,3,-127,-3,-30,-44,-28, 
  /* [9][0][][] */ -3,-127,-19,-2,3,88,-50,94, 
  /* [10][0][][] */ -92,-9,5,39,-127,89,69,-10, 
  /* [11][0][][] */ 109,18,41,18,-67,-53,-30,-127, 
  /* [12][0][][] */ 1,16,39,0,13,-67,127,60, 
  /* [13][0][][] */ 46,-9,-10,-2,127,104,105,-35, 
  /* [14][0][][] */ 127,39,-12,19,-107,3,-28,-34, 
  /* [15][0][][] */ -8,-127,3,-14,-1,6,-2,38, 
  /* [16][0][][] */ -60,-19,10,1,-127,-4,16,5, 
  /* [17][0][][] */ -21,105,-126,11,-1,-127,104,-89, 
  /* [18][0][][] */ 127,-25,-49,14,-67,35,20,110, 
  /* [19][0][][] */ 127,-33,-16,-8,42,-13,45,14, 
  /* [20][0][][] */ 127,10,-19,126,-6,34,1,-48, 
  /* [21][0][][] */ 10,36,-59,7,-29,95,-127,-96, 
  /* [22][0][][] */ -127,10,21,-11,-31,2,-62,-31, 
  /* [23][0][][] */ -37,-51,-1,26,-127,64,73,-16, 
  /* [24][0][][] */ 127,-4,-25,-1,-105,-27,9,10, 
  /* [25][0][][] */ 22,-15,-3,-24,127,44,46,-26, 
  /* [26][0][][] */ 13,-77,16,-39,0,-127,71,-55, 
  /* [27][0][][] */ -19,-127,23,-16,-5,-53,33,-3, 
  /* [28][0][][] */ -88,28,-45,21,-28,-32,127,115, 
  /* [29][0][][] */ -12,53,9,11,4,40,-107,-127, 
  /* [30][0][][] */ 127,-19,-10,22,-75,-11,-43,-22, 
  /* [31][0][][] */ -20,-44,59,-3,-2,-101,127,67, 
  /* [32][0][][] */ -70,14,3,10,-127,-100,-98,53, 
  /* [33][0][][] */ -31,7,1,21,-127,-54,-48,22, 
  /* [34][0][][] */ 12,-127,50,-11,-1,94,-81,64, 
  /* [35][0][][] */ -26,-53,-127,-13,-4,-72,50,-54, 
  /* [36][0][][] */ 5,127,48,8,-16,9,-23,-37, 
  /* [37][0][][] */ -127,39,34,-19,64,-35,-5,-96, 
  /* [38][0][][] */ -127,-22,-63,-20,52,24,39,125, 
  /* [39][0][][] */ -10,-36,59,-6,19,-97,127,107, 
  /* [40][0][][] */ -32,-23,-16,-41,-127,105,114,-24, 
  /* [41][0][][] */ -127,47,6,-72,-87,-99,-90,54, 
  /* [42][0][][] */ -51,-127,-119,-5,-4,59,-111,-69, 
  /* [43][0][][] */ -72,3,-21,-127,92,63,67,5, 
  /* [44][0][][] */ 127,-15,22,-97,41,-34,-15,50, 
  /* [45][0][][] */ -20,-127,-8,-12,-9,-62,73,6, 
  /* [46][0][][] */ 103,-9,-6,-15,127,-33,-23,8, 
  /* [47][0][][] */ 127,6,-6,113,-13,20,9,-43, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00072010041913017631, 0.0014911612961441278, 0.00054421607637777925, 0.00052162259817123413, 0.00042167759966105223, 0.00047046938561834395, 0.00089221401140093803, 0.00039813443436287344, 0.00071619160007685423, 0.0013226548908278346, 0.0018437514081597328, 0.00049109861720353365, 0.00077606044942513108, 0.0014655994018539786, 0.0002585914044175297, 0.00076227175304666162, 0.00058185751549899578, 0.00059685978339985013, 0.00040787854231894016, 0.00058677449123933911, 0.00060310430126264691, 0.0003941162140108645, 0.00071964581729844213, 0.00030425694421865046, 0.00049038411816582084, 0.00061016186373308301, 0.0034530207049101591, 0.00085585715714842081, 0.00033669685944914818, 0.00076458946568891406, 0.00051737343892455101, 0.0004007279931101948, 0.0014135140227153897, 0.00049266597488895059, 0.0013494237791746855, 0.00089856242993846536, 0.00145174958743155, 0.00063432496972382069, 0.00035994034260511398, 0.00060931837651878595, 0.00037412685924209654, 0.00046579522313550115, 0.00065525795798748732, 0.00048107074690051377, 0.0035588738974183798, 0.00076837569940835238, 0.00072314275894314051, 0.0020519653335213661, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -39590, 25676, -15226, -10005, 23974, 3563, 31098, 42272, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045024981955066323, 0.00062109221471473575, 0.0013421045150607824, 0.0016561445081606507, 0.0007472242577932775, 0.00063326256349682808, 0.000654384377412498, 0.00090617453679442406, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -39,-14,-31,27,3,-33,3,-8,-99,127,-40,117,108,16,83,-14,-7,-31,5,-10,-12,-3,-29,-39,28,-99,9,66,-11,26,18,-39,-2,-81,114,17,-2,-8,-13,-14,105,-2,51,-32,-31,13,-15,-18, 
  /* [1][0][][] */ -13,26,127,-1,-2,-30,4,-77,24,6,22,10,-26,9,0,-122,4,-68,6,-4,-30,26,20,-40,-17,-10,10,9,23,-2,12,-9,1,8,23,12,-27,-32,72,-58,10,51,-14,28,-15,6,28,-6, 
  /* [2][0][][] */ 1,-51,11,-43,29,25,-4,-33,-2,8,-1,20,-9,59,9,-5,-37,127,-19,-31,-25,19,-40,-8,118,3,4,-6,-33,-15,-1,-41,-4,-14,4,9,-12,-6,-12,6,17,-15,-17,-1,6,18,-31,-35, 
  /* [3][0][][] */ 2,-93,-2,6,4,-10,-8,0,-5,-19,14,18,9,-11,53,2,-5,-22,2,21,-4,19,-25,4,3,49,-1,7,-8,12,127,-3,14,7,-4,-1,-19,-14,-4,13,-14,6,-11,24,-8,-1,2,32, 
  /* [4][0][][] */ -106,11,1,0,2,-32,3,-4,52,-53,24,-16,-40,0,-14,-9,-6,9,4,40,23,-24,13,2,-5,48,9,104,0,-11,-4,-26,7,-127,-47,7,3,0,9,-6,-53,10,-9,22,-59,2,7,6, 
  /* [5][0][][] */ -18,27,11,3,-50,3,0,43,28,-5,9,9,-1,-42,13,32,5,-90,16,3,50,-49,9,39,11,-3,-69,-36,-40,-29,18,-4,-1,-67,-7,-73,59,-2,-33,19,11,-40,2,1,127,-5,-36,-4, 
  /* [6][0][][] */ -30,-24,-9,-9,37,-25,-11,-22,-12,0,43,-12,-16,38,-3,-55,5,-1,-5,-25,-47,60,-1,-75,1,-15,-62,-73,23,46,-7,7,6,-59,-17,67,-68,-49,-2,-59,-8,-2,17,42,127,-31,45,14, 
  /* [7][0][][] */ 16,41,-79,28,-21,18,9,68,0,-5,69,-36,11,-29,-6,7,-15,-127,39,-44,57,43,22,-55,24,-17,15,5,-15,28,-10,6,0,34,7,-30,-2,-49,-39,-69,-18,-36,41,70,-31,-33,-11,7, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019135616719722748, 0.026396417990326881, 0.057039439678192139, 0.070386141538619995, 0.031757030636072159, 0.026913659647107124, 0.027811335399746895, 0.038512416183948517, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52501, -159, 8597, -1195, 5722, -3771, 1602, 19618, 1869, 30569, -1882, 23889, -7061, -1161, 22046, 3897, 81, 16858, 27633, 11208, 369, -492, -175, 11604, -8335, 26004, 45867, 32506, 3182, 410, -978, 920, 1300, 15786, -6823, 12629, -10941, 17367, -22393, 117127, 17588, 20358, 11923, -1531, 15482, 3228, 1064, 32, };
const TfArray<48, float> quant28_scale = { 48, { 0.00031377887353301048, 0.00028271949850022793, 0.00018868235929403454, 0.00028119146008975804, 0.0001324359473073855, 0.00010072287841467187, 0.00073390972102060914, 0.0001788141526049003, 0.00013563527318183333, 0.00015787417942192405, 9.9320117442402989e-05, 0.00017877628852147609, 0.00027698886697180569, 0.00015454288222827017, 0.00011195519618922845, 0.00040168504347093403, 0.00018458218255545944, 0.00022942984651308507, 8.1777667219284922e-05, 0.00016368414799217135, 0.00023382667859550565, 0.00022726683528162539, 0.00019924940716009587, 0.0001730777439661324, 0.00016588601283729076, 0.00014345147064886987, 0.00072511227335780859, 0.00010120130173163489, 0.00021749950246885419, 0.0018264944665133953, 9.2439840955194086e-05, 0.00021941812883596867, 0.0006687087588943541, 0.00017685674538370222, 0.00019325465837027878, 0.00017841877706814557, 0.00036707127583213151, 0.00014722271589562297, 0.00026914523914456367, 2.0959996618330479e-05, 0.00018460446153767407, 6.0347327234921977e-05, 0.00013103542733006179, 0.00014706137881148607, 0.00014914062921889126, 0.00010738609853433445, 0.00024550341186113656, 0.00011109702609246597, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-2,20,111,4,79,-1,27,14,7,9,8,-6,-9,-45,8,-2,8,-22,-116,-7,-21,127,-9,-3,5,-5,10,-5,5,17,99,21,29,38,-26,1,34,-2,2,18,-66,-7,-9,17,2,-7,-10, 127,10,15,-127,28,85,10,10,124,127,6,43,-48,-24,6,8,127,-55,-58,-58,-101,26,-109,15,18,69,-32,-83,22,21,10,-122,5,-60,127,10,-41,-47,-6,114,-79,-94,-28,3,-34,-7,-127,22, -32,-3,8,16,0,64,4,16,28,9,-15,31,-13,-3,18,3,-103,29,-3,78,-32,-11,-18,-6,-5,-58,-3,31,-16,5,3,-21,7,-22,17,-18,-1,47,43,-13,50,38,-14,11,-42,4,-2,-5, 
  /* [0][1][][] */ 126,7,0,-98,14,-28,35,-17,8,8,-13,53,-6,-2,18,-33,0,-49,-59,-86,10,-73,-124,-18,5,96,-14,-127,-8,34,12,-107,17,-51,-1,127,-3,59,-42,42,-62,-127,40,-89,-45,-14,-12,-4, 27,-127,-127,116,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-107,127,127,111,127,127,-127,-127,29,-127,-127,93,127,-127,127,-28,-40,127,-127,127,127,127,-79,127,127,127,-121,103,105, 55,6,48,-13,6,-61,44,17,-24,14,-106,-8,2,-41,127,3,63,-65,-69,88,13,-45,12,-33,0,6,-37,70,20,41,0,4,32,-43,9,67,-5,64,69,-9,-81,8,-82,-32,27,-17,-10,6, 
  /* [0][2][][] */ -54,-7,25,-16,7,33,-37,21,7,-24,11,32,7,-5,-38,17,5,22,-14,108,5,-34,-15,-11,-3,20,0,51,-10,3,46,-32,-18,-43,-32,-37,0,30,7,-20,10,-4,43,-38,-36,18,-10,17, 68,126,75,22,16,-20,123,34,18,-4,43,26,-4,-1,-90,24,-58,-56,-35,126,-38,48,12,21,32,-65,-41,30,75,0,127,22,85,-25,7,-34,-25,-17,-14,120,-27,-12,-39,44,22,-33,9,-127, -42,-4,7,-3,6,-6,-61,7,-19,-11,-41,-40,22,-10,-9,10,33,24,-6,-127,22,-10,5,-8,-7,9,-10,-53,-15,7,5,10,-21,87,-37,-21,-4,35,24,-59,5,8,-36,6,-41,127,-4,-4, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.013335602357983589, 0.012015578337013721, 0.0080190002918243408, 0.011950637213885784, 0.005628527607768774, 0.0042807222343981266, 0.031191162765026093, 0.0075996015220880508, 0.005764499306678772, 0.0067096524871885777, 0.0042211050167679787, 0.0075979921966791153, 0.011772026307880878, 0.0065680723637342453, 0.0047580958344042301, 0.017071614041924477, 0.0078447423875331879, 0.0097507685422897339, 0.0034755507949739695, 0.0069565759040415287, 0.0099376337602734566, 0.0096588404849171638, 0.008468099869787693, 0.0073558040894567966, 0.0070501556620001793, 0.0060966871678829193, 0.030817272141575813, 0.004301055334508419, 0.0092437285929918289, 0.07762601226568222, 0.0039286930114030838, 0.0093252705410122871, 0.028420122340321541, 0.0075164115987718105, 0.0082133226096630096, 0.0075827976688742638, 0.015600529499351978, 0.0062569654546678066, 0.011438672430813313, 0.00089079985627904534, 0.0078456895425915718, 0.0025647613219916821, 0.0055690053850412369, 0.0062501085922122002, 0.0063384766690433025, 0.0045639090240001678, 0.010433894582092762, 0.0047216233797371387, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 66031, 6410, 6973, 7380, 1516, 8870, -1804, -257, 786, 2201, 3340, 290, 1756, -841, 851, -1963, 4930, 12145, -249, 22337, 4284, 2436, 8551, -474, 3927, 4790, 24703, 9460, -73, -2542, 132, 2058, -1754, 7982, 2313, 5718, 7936, 4984, 23352, 1728, -1055, 2655, 899, 3552, 3718, 1942, -1270, 2738, };
const TfArray<48, float> quant30_scale = { 48, { 6.5473599534016103e-05, 0.00034691521432250738, 0.00022943339718040079, 0.0004348742077127099, 0.0014617240522056818, 0.00057142239529639482, 0.0010640094988048077, 0.0011793832527473569, 0.00071885361103340983, 0.0006343444692902267, 0.00067418214166536927, 0.00051593838725239038, 0.00053823424968868494, 0.00053415884030982852, 0.00055210024584084749, 0.001853666384704411, 0.00032739070593379438, 0.00035289410152472556, 0.0020349917467683554, 0.00012003475421806797, 0.00029593054205179214, 0.00041192679782398045, 0.00046413118252530694, 0.0010037645697593689, 0.00031911366386339068, 0.00024473090888932347, 0.00016458208847325295, 0.00038952217437326908, 0.0008100604172796011, 0.0010299771092832088, 0.00056282524019479752, 0.00041614659130573273, 0.0011345718521624804, 0.00027565259370021522, 0.00043381055002100766, 0.00032040404039435089, 0.00046482699690386653, 0.00027519866125658154, 0.00010131730232387781, 0.0026298870798200369, 0.00058167986571788788, 0.0010437605669721961, 0.000504143419675529, 0.00042189547093585134, 0.00031893127015791833, 0.00053093949100002646, 0.00092335836961865425, 0.00098593637812882662, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 89,42,-3,-13,127,64,-56,-58, 
  /* [1][0][][] */ -7,1,-2,127,12,-4,-4,13, 
  /* [2][0][][] */ 26,-127,-30,42,-15,-85,79,5, 
  /* [3][0][][] */ 127,-41,-9,18,-3,-49,28,11, 
  /* [4][0][][] */ 9,-47,127,-20,-3,-53,24,-100, 
  /* [5][0][][] */ 50,-6,3,6,127,-2,6,10, 
  /* [6][0][][] */ -19,80,-13,127,35,47,-68,-46, 
  /* [7][0][][] */ -1,127,-4,6,2,-7,13,-3, 
  /* [8][0][][] */ 127,26,-6,5,-31,-23,12,-18, 
  /* [9][0][][] */ -127,10,5,23,40,11,-12,-2, 
  /* [10][0][][] */ -57,3,29,127,43,34,-16,-12, 
  /* [11][0][][] */ -127,0,22,-64,21,1,-26,-34, 
  /* [12][0][][] */ 127,11,-6,17,-51,-3,3,-44, 
  /* [13][0][][] */ -11,85,-127,-4,1,101,-71,69, 
  /* [14][0][][] */ -75,-29,-6,127,4,19,-15,-31, 
  /* [15][0][][] */ -5,127,1,-3,-3,-20,14,-45, 
  /* [16][0][][] */ -17,-109,-23,3,-19,-127,109,-27, 
  /* [17][0][][] */ 27,127,-7,-19,1,87,-81,-15, 
  /* [18][0][][] */ -20,56,-127,0,15,50,-47,59, 
  /* [19][0][][] */ -87,20,-3,0,-127,-6,39,35, 
  /* [20][0][][] */ -127,-19,-8,2,45,-26,26,-4, 
  /* [21][0][][] */ -60,-1,0,4,-127,2,8,5, 
  /* [22][0][][] */ -127,-21,7,-1,79,0,49,39, 
  /* [23][0][][] */ -19,-17,-19,-7,-8,77,-127,-103, 
  /* [24][0][][] */ -7,50,-127,3,12,52,-25,73, 
  /* [25][0][][] */ 96,-31,-7,127,-59,-14,20,-56, 
  /* [26][0][][] */ 2,-17,-4,-5,-14,127,124,-33, 
  /* [27][0][][] */ 71,4,-6,7,127,27,46,-27, 
  /* [28][0][][] */ 9,127,-74,12,-6,73,-31,119, 
  /* [29][0][][] */ -1,3,-3,-14,-7,92,-127,-76, 
  /* [30][0][][] */ 6,0,-1,-127,-10,1,-6,-20, 
  /* [31][0][][] */ -80,-2,3,9,-127,-2,9,4, 
  /* [32][0][][] */ -8,25,-2,-127,-9,28,-68,-89, 
  /* [33][0][][] */ -60,1,-4,-10,-127,41,37,0, 
  /* [34][0][][] */ -127,51,15,32,20,-13,7,16, 
  /* [35][0][][] */ -7,127,-2,-11,5,-63,56,-26, 
  /* [36][0][][] */ -14,60,11,-35,-2,105,-127,-39, 
  /* [37][0][][] */ 30,-88,-3,25,26,-127,102,11, 
  /* [38][0][][] */ 18,-127,10,9,10,58,-71,62, 
  /* [39][0][][] */ 9,-127,-10,-6,1,-7,-58,-109, 
  /* [40][0][][] */ 102,68,12,-14,-50,86,-127,-100, 
  /* [41][0][][] */ 9,-118,28,8,-1,90,-69,127, 
  /* [42][0][][] */ 55,-14,19,-127,-36,-3,16,-24, 
  /* [43][0][][] */ -68,-27,21,-127,62,7,-19,12, 
  /* [44][0][][] */ 9,-21,6,29,-14,75,127,-2, 
  /* [45][0][][] */ -127,-44,-10,-6,13,20,18,-26, 
  /* [46][0][][] */ 16,72,127,11,-10,10,13,30, 
  /* [47][0][][] */ 9,10,13,127,7,8,-1,-7, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00015339399396907538, 0.00081276590935885906, 0.00053752510575577617, 0.0010188395390287042, 0.0034245816059410572, 0.0013387496583163738, 0.0024928010534495115, 0.0027631029952317476, 0.0016841570613905787, 0.0014861659146845341, 0.0015794991049915552, 0.0012087597278878093, 0.0012609952827915549, 0.0012514472473412752, 0.0012934810947626829, 0.0043428386561572552, 0.00076702312799170613, 0.00082677346654236317, 0.0047676544636487961, 0.00028122190269641578, 0.00069331709528341889, 0.00096507748821750283, 0.0010873838327825069, 0.0023516570217907429, 0.00074763136217370629, 0.00057336472673341632, 0.00038558905362151563, 0.00091258710017427802, 0.0018978397129103541, 0.0024130688980221748, 0.0013186079449951649, 0.0009749637683853507, 0.0026581173297017813, 0.00064580916659906507, 0.0010163475526496768, 0.00075065455166622996, 0.0010890139965340495, 0.00064474571263417602, 0.00023736995353829116, 0.006161397323012352, 0.001362781273201108, 0.0024453611113131046, 0.0011811259901151061, 0.00098843243904411793, 0.00074720405973494053, 0.0012439048150554299, 0.00216327840462327, 0.0023098886013031006, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -3763, -22811, 23310, 22704, 1095, -1451, 40281, 10861, };
const TfArray<8, float> quant32_scale = { 8, { 0.0011193527607247233, 0.00062012829585000873, 0.0014765213709324598, 0.0012019608402624726, 0.0012552064144983888, 0.0012004250893369317, 0.00084152899216860533, 0.00073612341657280922, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -14,-2,9,-99,10,25,6,6,4,8,5,-5,102,0,0,7,0,-5,-4,-7,82,-3,2,4,33,33,10,15,5,5,3,-127,12,11,-2,0,-24,2,-19,32,4,-24,-7,2,1,-3,6,4, 
  /* [1][0][][] */ -42,-12,-4,-7,48,27,-34,81,24,5,-30,-23,16,0,16,37,0,44,22,-50,-3,27,127,22,-31,0,53,3,24,-1,17,-13,13,-12,-11,-23,5,-62,13,4,-4,-6,-92,-8,-45,7,-52,-101, 
  /* [2][0][][] */ -58,14,2,14,42,-4,28,26,-11,58,9,0,2,0,1,52,0,13,-127,23,-4,12,1,-16,-38,8,35,2,13,32,23,5,1,-7,-8,-12,16,3,12,4,38,-12,-35,0,22,-51,25,13, 
  /* [3][0][][] */ 4,1,-1,10,-10,28,-1,-2,61,16,0,-5,23,0,-28,-9,0,3,-14,-1,-4,1,5,-12,-13,-10,-10,-4,-5,-2,-4,-8,-53,42,-58,-5,6,1,-1,-127,1,6,0,-46,-5,3,3,5, 
  /* [4][0][][] */ -2,-9,88,34,0,-20,1,-2,7,-2,-8,-6,-82,0,-15,7,0,11,8,-1,68,5,0,-6,-13,43,-5,45,-8,-5,-2,107,11,8,-2,2,21,-15,-6,-15,-5,-127,7,-2,4,-5,1,0, 
  /* [5][0][][] */ -7,42,3,-10,-1,47,22,16,-21,31,6,53,31,0,-127,-1,0,13,-39,21,-7,9,-11,43,-16,0,31,-4,-15,19,22,-10,52,31,-39,-3,1,16,-45,19,24,-9,-12,31,20,61,21,22, 
  /* [6][0][][] */ -23,-58,1,7,42,-49,-24,7,26,-22,-13,93,-6,0,-127,46,0,-11,50,-19,-3,-2,28,-32,33,-7,-2,-12,52,-11,-11,-3,95,-33,31,1,-4,-9,-80,-23,-15,-18,-6,-24,-22,-87,-19,-30, 
  /* [7][0][][] */ -113,-23,-14,6,127,20,69,27,17,9,26,-36,-28,0,93,103,0,15,-4,65,-8,0,-36,47,16,4,43,5,53,74,56,-6,-12,-15,-26,-19,17,25,16,35,76,-1,-34,-11,59,11,70,81, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.047572493553161621, 0.026355452835559845, 0.06275215744972229, 0.051083333790302277, 0.053346272557973862, 0.051018066704273224, 0.035764981061220169, 0.031285244971513748, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 76309, 60231, 61142, 42872, 544, 13783, 1645, 26590, 25369, 24246, 28313, 9945, -47054, -127, 35494, 477, -204, 32322, 1260, 2599, -13215, 9631, 47688, 32844, -18861, 23388, 35726, 17397, -1634, 16000, -8500, -49985, 8789, 105406, 29643, 1571, 57669, 138, 134915, -24931, 15807, -28755, 1703, 102535, -782, 63094, 2871, -22137, };
const TfArray<48, float> quant34_scale = { 48, { 7.8045937698334455e-05, 6.5936037572100759e-05, 0.00017606126493774354, 0.00011647546489257365, 0.00016791129019111395, 0.00015878790873102844, 0.00013988405407872051, 6.1189064581412822e-05, 8.9347304310649633e-05, 3.3143773180199787e-05, 8.9354078227188438e-05, 2.827266143867746e-05, 0.00019579123181756586, 0.005541567225009203, 7.2935370553750545e-05, 0.00027715848409570754, 0.0027484172023832798, 2.1992267647874542e-05, 0.0001038129412336275, 0.00016220689576584846, 9.8113872809335589e-05, 0.0001622636045794934, 0.00011963994620600715, 3.7277015508152544e-05, 9.0314315457362682e-05, 0.00011997851106571034, 3.5749035305343568e-05, 4.7901809011818841e-05, 0.00029720444581471384, 5.7037785154534504e-05, 4.6976052544778213e-05, 0.00022555982286576182, 0.00026930513558909297, 9.1619440354406834e-06, 8.3277089288458228e-05, 0.00018755524070002139, 1.7368087355862372e-05, 0.00050002982607111335, 3.3700474887154996e-05, 8.6838677816558629e-05, 6.2674887885805219e-05, 0.00023807726392988116, 0.00012751715257763863, 9.1409774540807121e-06, 0.00016741214494686574, 9.3977978394832462e-05, 0.00020730750111397356, 0.00011672185792122036, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-17,6,-39,-79,-67,-27,-51,9,68,35,-71,114,-42,-113,-84,38,-7,-2,-71,-111,-79,-34,-126,-62,-21,70,14,97,25,-127,-90,-7,55,18,47,-127,80,-77,-13,105,-111,-2,-35,-87,107, 75,12,-29,-29,58,-127,-127,-81,59,-76,-114,109,38,-82,-1,62,-52,-114,58,7,11,-111,-127,-70,-4,-127,-119,-40,-56,20,-57,54,30,-127,65,83,12,72,-93,127,-127,6,126,-127,1,-22,-127,95, -33,44,7,-5,-66,-110,-59,-18,86,-8,-127,37,9,-71,-101,-11,-127,-26,27,11,-17,-75,-35,-23,-11,-31,-57,-12,-11,17,-25,9,108,-88,72,31,14,35,-5,16,-79,4,8,-81,-18,5,-55,14, 
  /* [0][1][][] */ -86,-127,-44,-44,-11,55,101,-105,-26,-108,-19,114,90,-64,28,-96,-121,-95,90,-77,39,-87,-102,-127,42,-121,-77,-38,127,-60,127,84,-44,-82,-15,85,-36,-77,-105,90,42,60,105,-111,-91,-117,79,120, 127,-84,-127,-127,127,42,95,-127,99,-127,-108,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-119,127,-98,-127,-127,-121,-127,-71,127,29,-111,127,127,-70,-127,-97,89,60,127,127,-116,-114,-127,122,127, -53,30,-60,-86,-121,-24,31,-38,127,-20,-73,33,57,-70,-25,-44,-37,-31,55,-72,55,-82,-39,-24,48,-6,-45,-59,14,-91,-36,20,29,-99,120,23,-36,-63,1,-15,36,54,11,-76,-59,-37,63,34, 
  /* [0][2][][] */ -60,-107,-34,-34,-1,35,-5,-34,-37,-60,-15,60,76,-127,-127,-64,-43,-17,64,75,49,-32,-14,-59,32,-55,-13,-58,75,28,77,61,110,-26,-38,-9,-94,34,-19,31,10,38,16,-58,96,-77,3,30, 88,-75,-89,-84,80,20,7,-48,47,-70,-32,54,82,-26,15,92,-24,-31,78,117,81,-56,-19,-57,92,-68,-20,-97,-52,40,-45,110,-17,-47,67,5,-127,50,-17,-2,11,32,16,-65,127,-100,-13,40, -28,28,-40,-36,-81,-19,21,-11,59,-5,-14,32,32,-43,111,-29,-93,-6,31,59,72,-29,-3,-5,42,2,-7,-63,-15,29,-20,39,-91,-44,68,2,-21,21,25,-39,7,35,-5,-16,62,-36,-5,17, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0033169523812830448, 0.0028022816404700279, 0.007482603657990694, 0.0049502071924507618, 0.0071362298913300037, 0.0067484858445823193, 0.0059450720436871052, 0.0026005350518971682, 0.003797260345891118, 0.0014086103765293956, 0.0037975481245666742, 0.0012015880784019828, 0.0083211269229650497, 0.23551659286022186, 0.003099753288552165, 0.011779234744608402, 0.1168077290058136, 0.00093467137776315212, 0.0044120498932898045, 0.0068937926553189754, 0.004169839434325695, 0.0068962029181420803, 0.0050846976228058338, 0.0015842730645090342, 0.0038383582141250372, 0.005099086556583643, 0.0015193339204415679, 0.0020358269102871418, 0.01263118814677, 0.0024241057690232992, 0.0019964822567999363, 0.0095862923189997673, 0.011445468291640282, 0.00038938262150622904, 0.0035392760764807463, 0.0079710977151989937, 0.00073814368806779385, 0.021251266822218895, 0.0014322701608762145, 0.0036906437017023563, 0.0026636826805770397, 0.010118283331394196, 0.005419478751718998, 0.00038849152042530477, 0.0071150157600641251, 0.0039940639398992062, 0.0088105686008930206, 0.0049606789834797382, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3630, 83, 10673, 5930, 7092, 7069, 10248, -39, 23, -305, 2026, 487, 12193, -80811520, 2445, 21861, -65235256, -102, -405, 10344, 4127, -10, -35, 394, 4066, -900, 71, 595, 3116, 1555, 2245, 15778, 3342, 311, 265, -1683, 309, 2747, -160, 12168, 1949, 13863, -366, -85, 11687, 147, 9188, 3562, };
const TfArray<48, float> quant36_scale = { 48, { 0.00057577149709686637, 0.00046604289673268795, 0.00029213613015599549, 0.00031486226362176239, 0.00028675550129264593, 0.00029665403417311609, 0.00036963162710890174, 0.0015353973722085357, 0.00043750423355959356, 0.0024687363766133785, 0.00072734616696834564, 0.0017214091494679451, 0.00018044983153231442, 2.0069372830278098e-09, 0.0010906528914347291, 0.00015200428606476635, 2.0069372830278098e-09, 0.0070264684036374092, 0.00044411231647245586, 0.00037203074316494167, 0.000247239600867033, 0.0051342076621949673, 0.00035058226785622537, 0.001584603451192379, 0.00092483439948409796, 0.00059880857588723302, 0.0024227339308708906, 0.0020765818189829588, 0.00035600128467194736, 0.0018994432175531983, 0.0013128996361047029, 0.00014755589654669166, 0.00022282102145254612, 0.0104039516299963, 0.00053562968969345093, 0.00071164494147524238, 0.0048543158918619156, 0.00046225017285905778, 0.0023552491329610348, 0.00028367110644467175, 0.0014506357256323099, 0.00016045692609623075, 0.00049265491543337703, 0.01006767712533474, 0.0004296608385629952, 0.00052019825670868158, 0.00030540858278982341, 0.00024094455875456333, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,-127,43,-41,32,-23,-43,26, 
  /* [1][0][][] */ 73,68,-30,-109,19,-23,-90,127, 
  /* [2][0][][] */ 37,0,-50,127,60,123,43,103, 
  /* [3][0][][] */ 73,68,-67,127,-78,-5,-7,16, 
  /* [4][0][][] */ -41,-92,76,27,2,29,-31,-127, 
  /* [5][0][][] */ 22,1,-31,35,5,-30,29,127, 
  /* [6][0][][] */ 61,-20,-127,-85,100,15,49,-33, 
  /* [7][0][][] */ 127,19,28,-23,29,-11,88,-64, 
  /* [8][0][][] */ 17,-91,9,102,13,28,-13,-127, 
  /* [9][0][][] */ 104,-127,13,5,-19,8,-117,87, 
  /* [10][0][][] */ -127,-41,-109,23,-21,18,-100,53, 
  /* [11][0][][] */ -21,-44,-6,-116,-127,-37,51,-11, 
  /* [12][0][][] */ 18,14,-29,72,-72,-19,54,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -13,-34,-9,10,53,127,45,40, 
  /* [15][0][][] */ 47,8,19,-127,70,51,-63,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,23,127,19,-21,-12,23,24, 
  /* [18][0][][] */ 86,-127,27,39,-3,22,-118,-4, 
  /* [19][0][][] */ -127,-11,36,66,-56,-67,-91,78, 
  /* [20][0][][] */ 37,23,-60,119,-28,-127,4,65, 
  /* [21][0][][] */ 55,20,127,11,-11,-8,56,4, 
  /* [22][0][][] */ -77,-16,-127,4,1,3,-94,5, 
  /* [23][0][][] */ -98,125,-13,-17,9,-16,127,-76, 
  /* [24][0][][] */ 3,-53,-54,94,-1,-67,96,127, 
  /* [25][0][][] */ 9,45,41,33,127,109,-69,-59, 
  /* [26][0][][] */ -91,-25,-127,-4,9,9,-102,-1, 
  /* [27][0][][] */ 11,-26,-22,-1,-58,127,74,68, 
  /* [28][0][][] */ 0,-18,-14,38,26,127,44,49, 
  /* [29][0][][] */ 81,32,127,0,-16,-16,78,-6, 
  /* [30][0][][] */ -76,127,-28,-30,9,-6,97,-43, 
  /* [31][0][][] */ -43,-92,-23,4,25,-73,127,107, 
  /* [32][0][][] */ -4,5,-49,127,-13,95,73,115, 
  /* [33][0][][] */ 0,66,-16,-113,17,-12,-11,127, 
  /* [34][0][][] */ -21,83,-5,-98,37,-11,14,127, 
  /* [35][0][][] */ 127,6,-12,-48,16,45,90,-43, 
  /* [36][0][][] */ -127,-4,37,63,-25,2,-117,84, 
  /* [37][0][][] */ -7,-27,-7,18,23,127,49,50, 
  /* [38][0][][] */ 12,24,10,94,127,-5,-23,39, 
  /* [39][0][][] */ 8,27,32,-116,21,-3,-32,127, 
  /* [40][0][][] */ 81,33,127,-3,-17,-12,79,-12, 
  /* [41][0][][] */ 0,-29,-31,100,70,127,72,119, 
  /* [42][0][][] */ -87,-7,127,19,-32,10,-30,57, 
  /* [43][0][][] */ -7,-51,6,102,-18,-2,15,-127, 
  /* [44][0][][] */ 36,-6,-57,-127,65,-31,-2,-98, 
  /* [45][0][][] */ -91,127,-3,-51,16,-4,78,-61, 
  /* [46][0][][] */ -127,-21,44,28,-36,39,-86,39, 
  /* [47][0][][] */ 104,9,94,1,17,-40,127,-2, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0011294906726107001, 0.00091423618141561747, 0.00057308335090056062, 0.00061766518047079444, 0.00056252814829349518, 0.00058194610755890608, 0.00072510621976107359, 0.0030119884759187698, 0.00085825187852606177, 0.004842919297516346, 0.0014268347295001149, 0.0033768876455724239, 0.00035398834734223783, 3.937008052901092e-09, 0.0021395334042608738, 0.00029818675830028951, 3.937008052901092e-09, 0.013783819973468781, 0.00087121495744213462, 0.00072981254197657108, 0.00048500980483368039, 0.010071773082017899, 0.00068773707607761025, 0.0031085158698260784, 0.0018142472254112363, 0.0011746825184673071, 0.0047526760026812553, 0.0040736296214163303, 0.00069836759939789772, 0.0037261368706822395, 0.002575514605268836, 0.00028946035308763385, 0.00043710789759643376, 0.020409427583217621, 0.0010507445549592376, 0.0013960335636511445, 0.0095227090641856194, 0.00090679596178233624, 0.0046202912926673889, 0.00055647752014920115, 0.0028457115404307842, 0.0003147682873532176, 0.00096644094446673989, 0.019749758765101433, 0.00084286549827083945, 0.0010204727295786142, 0.00059911987045779824, 0.00047266084584407508, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 115, -43699, -8345, -11714, -31723, -1883, -26233, -28175, };
const TfArray<8, float> quant38_scale = { 8, { 0.0021357783116400242, 0.0021609421819448471, 0.0024145531933754683, 0.0011787619441747665, 0.0013702749274671078, 0.0020797299221158028, 0.0014034470077604055, 0.00096994335763156414, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,-2,-3,127,-3,0,-1,-3,-123,-91,-6,0,121,-2,0, 
  /* [1][0][][] */ 0,-29,7,87,72,11,23,8,0,-7,127,-45,0,30,-12,0, 
  /* [2][0][][] */ 0,1,3,-13,-62,7,8,4,-1,1,-16,0,0,127,-9,0, 
  /* [3][0][][] */ 0,-14,-20,-127,76,25,70,15,-1,61,1,35,0,0,14,0, 
  /* [4][0][][] */ 0,44,-18,29,-49,31,127,5,0,-57,17,-9,0,-9,15,0, 
  /* [5][0][][] */ 0,-16,-10,-1,-26,-24,-9,12,0,10,-6,-48,0,-4,127,0, 
  /* [6][0][][] */ 0,14,-3,6,48,-19,-22,-5,2,-114,116,70,0,127,59,0, 
  /* [7][0][][] */ 0,11,-14,127,5,-1,23,10,-1,69,-56,74,0,-9,48,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090770579874515533, 0.091840043663978577, 0.102618508040905, 0.050097383558750153, 0.058236684650182724, 0.088388517498970032, 0.059646498411893845, 0.041222590953111649, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 24536, 47993, 10469, 9810, 71641, 12326, 72560, -4565, 5738, 29803, 14459, -445, 27051, 11521, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00010684090375434607, 8.3783546870108694e-05, 0.00033410239848308265, 0.00017261590983252972, 4.6318309614434838e-05, 0.00039418533560819924, 5.3794683481100947e-05, 2.7306279662298039e-05, 0.00031461229082196951, 0.000196378881810233, 0.00070937303826212883, 0.00072724185883998871, 0.00023367497487924993, 0.00017880006635095924, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,51,-105,5,127,-25, 24,-25,89,-2,-72,67,-94,77,-94,-27,4,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-28,13,-28,0,3,-109,-49,8,-29,-14, -78,-42,-58,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,33,-25,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,67,2,-6,38,-39,51,-76,0,0,4,40,2,-27,23, 23,-4,30,-2,-27,39,-34,20,-125,-13,0,84,-58,0,-28,-111, 21,-7,18,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.004540738184005022, 0.0035608008038252592, 0.014199351891875267, 0.0073361760005354881, 0.0019685281440615654, 0.016752876341342926, 0.0022862739861011505, 0.001160516869276762, 0.013371022418141365, 0.008346102200448513, 0.030148353427648544, 0.030907778069376945, 0.0099311862140893936, 0.0075990026816725731, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 19499, -73534, 6121, 336753, 34507, 43518, 14219, 265922, 22547, 20699, 154999, -1073741824, 37471, 44964, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00021001178538426757, 0.00026468493160791695, 4.0390077629126608e-05, 8.2531996667967178e-06, 0.00018337802612222731, 7.627785817021504e-05, 0.00034547958057373762, 6.3708403104101308e-06, 5.4074112995294854e-05, 0.00014321565686259419, 3.4586049878271297e-05, 1.1533876076441629e-09, 0.00010195080540142953, 6.4996929722838104e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 39,-2,29, -9,-18,16, -127,-103,-61, 
  /* [1][1][][] */ -4,-6,-3, -26,3,-5, -4,-25,6, 
  /* [1][2][][] */ -6,16,-2, -5,9,0, 41,-9,18, 
  /* [2][0][][] */ 27,-19,-12, 81,113,-3, 39,-60,2, 
  /* [2][1][][] */ 10,2,-4, 77,127,-34, 15,-22,-13, 
  /* [2][2][][] */ 59,-80,23, 86,-58,-24, 33,-72,12, 
  /* [3][0][][] */ 7,32,13, 33,92,30, -1,3,-5, 
  /* [3][1][][] */ 22,32,15, 74,127,37, -14,-21,2, 
  /* [3][2][][] */ 6,-1,10, 28,23,11, -2,-7,2, 
  /* [4][0][][] */ 71,82,-2, 47,98,3, 16,27,29, 
  /* [4][1][][] */ 63,71,63, 64,127,64, 72,81,22, 
  /* [4][2][][] */ 68,57,41, 71,122,38, 5,40,65, 
  /* [5][0][][] */ 3,-2,-127, -11,-4,-113, -11,24,-33, 
  /* [5][1][][] */ 2,-44,-127, -4,-46,-114, -4,10,-27, 
  /* [5][2][][] */ -3,9,-16, 2,-1,-8, 1,13,-12, 
  /* [6][0][][] */ 26,-62,35, 48,-86,40, 12,-18,11, 
  /* [6][1][][] */ 36,-96,61, 63,-127,71, 10,-26,19, 
  /* [6][2][][] */ 21,-35,13, 15,-43,27, -9,10,2, 
  /* [7][0][][] */ -34,20,7, -109,-35,3, -24,28,5, 
  /* [7][1][][] */ -18,-5,2, -127,-89,-5, -5,0,9, 
  /* [7][2][][] */ -20,38,-3, -6,20,7, -16,34,5, 
  /* [8][0][][] */ -14,-38,-79, -14,-41,-92, -43,-74,-125, 
  /* [8][1][][] */ -11,-42,-67, -18,-48,-82, -37,-70,-118, 
  /* [8][2][][] */ -11,-37,-57, -20,-41,-77, -40,-67,-127, 
  /* [9][0][][] */ -23,-8,10, -10,-7,4, 4,1,-9, 
  /* [9][1][][] */ 97,114,-5, 77,127,18, -7,19,26, 
  /* [9][2][][] */ -27,-26,17, -2,-38,-5, 9,0,-24, 
  /* [10][0][][] */ -24,-82,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -59,-102,-14, 78,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -9,-1,7, 
  /* [11][0][][] */ 5,-6,16, 25,-21,22, 23,-75,-32, 
  /* [11][1][][] */ -24,-22,0, -14,-40,-16, 2,-38,-33, 
  /* [11][2][][] */ 7,-21,-56, 119,127,70, -21,26,-28, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-96,-18, -61,-110,-26, -9,-17,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,16,10, 
  /* [13][2][][] */ -8,-19,2, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 47,-10,-37, 78,-32,-52, 32,-13,-19, 
  /* [14][1][][] */ 89,-22,-75, 127,-47,-91, 58,-23,-37, 
  /* [14][2][][] */ 55,-15,-47, 72,-29,-56, 23,-12,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.053553003817796707, 0.067494653165340424, 0.010299469344317913, 0.0021045657340437174, 0.046761393547058105, 0.019450852647423744, 0.088097289204597473, 0.0016245641745626926, 0.013788897544145584, 0.036519989371299744, 0.0088194422423839569, 2.9411381774480105e-07, 0.025997454300522804, 0.01657421700656414, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.50976204872131348, } };
const TfArray<1, int> quant46_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.4268328845500946, } };
const TfArray<1, int> quant50_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.51341110467910767, } };
const TfArray<1, int> quant53_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.6710323691368103, } };
const TfArray<1, int> quant54_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.33378604054450989, } };
const TfArray<1, int> quant58_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.26263427734375, } };
const TfArray<1, int> quant61_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.37687462568283081, } };
const TfArray<1, int> quant62_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.28870758414268494, } };
const TfArray<1, int> quant65_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.44882321357727051, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant65_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.064722061157226562, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13903401792049408, } };
const TfArray<1, int> quant69_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_10_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_10_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
