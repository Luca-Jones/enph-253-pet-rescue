/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.06.2025 05:01:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 16160, -22398, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00032410872518084943, 0.00023228286590892822, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 14,-32,-33,127,9,-8,-25,51,80,-20,-27,-4,-25,37,-29,37,61,-70,-14,-68,62,51,-29,-44,-36,-79,-29,54,6,-15,81,84, 
  /* [1][0][][] */ 54,71,67,-107,-77,73,-9,8,-40,-17,36,91,107,38,30,-6,-40,9,-73,-84,-76,30,43,105,72,69,-45,-6,94,-99,-127,-62, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0053179822862148285, 0.0038113018963485956, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 142, -10, 20, 1503, 209, 38, -269, 285, 190, 146, -15, -702, 29, 2, -490, 23, 18, -383, 655, -357, 62, 9, 185, -77, -510, 125, -143, -215, -445, 24, 1654, 1228, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.507157402462326e-05, 4.6452350943582132e-05, 4.4910273572895676e-05, 5.7644771004561335e-05, 4.4272688683122396e-05, 4.5380507799563929e-05, 4.2557094275252894e-05, 4.2343264794908464e-05, 4.5035674702376127e-05, 5.528606561711058e-05, 4.9337115342495963e-05, 4.2901679989881814e-05, 4.607501978171058e-05, 4.3129497498739511e-05, 4.3366875615902245e-05, 4.6943237975938246e-05, 4.4519456423586234e-05, 8.5953586676623672e-05, 6.6762404458131641e-05, 4.143794285482727e-05, 4.8090820200741291e-05, 4.3456362618599087e-05, 5.4670970712322742e-05, 4.4130218157079071e-05, 4.3341718992451206e-05, 5.4725627705920488e-05, 3.9328006096184254e-05, 4.1779658204177395e-05, 4.2380812374176458e-05, 4.0743037970969453e-05, 6.0121255955891684e-05, 6.8395238486118615e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -38,-35,69,10,54,-22,-66,-67,44,-88,-79,-18,54,13,-27,45,-40,-26,-54,-58,-49,-80,6,88,-99,6,64,-42,88,-9,-10,-61,65,-37,-64,64,-91,-60,-67,33,62,-67,-76,82,30,-79,89,-10,18,-59,-50,83,-44,-31,-80,71,23,57,127,-84,-60,48,-36,32,0,16,56,84,52,76,72,-96,80,-102,15,65,-76,13,-44,20,43,17,80,9,-44,-26,-63,82,27,98,-13,-84,10,62,35,16, 
  /* [1][0][][] */ -65,19,-90,-2,-20,66,39,3,76,-113,-93,99,97,-18,21,66,103,-35,30,127,-40,-5,32,27,28,19,-35,92,19,15,94,-49,51,103,7,37,46,59,-20,-53,-54,5,-20,-94,-45,40,-22,-47,-22,-63,103,65,24,95,-78,-52,29,96,92,79,-52,109,-59,-87,-33,40,71,45,123,32,20,10,-104,63,-55,38,90,-44,-35,57,-70,84,-42,-94,29,109,-58,-52,78,81,90,23,84,93,40,1, 
  /* [2][0][][] */ 36,24,-82,91,0,-68,88,89,-93,63,-29,111,127,-7,77,-101,-53,-22,29,73,-87,-14,106,22,-28,81,103,1,-57,89,79,105,-70,-11,-74,-91,-85,94,100,-18,-107,-74,15,-9,-91,119,-17,-70,96,53,87,-73,-29,80,17,13,-62,95,-24,7,-14,58,-30,53,111,53,47,91,-63,71,12,-67,34,-93,21,21,-37,-25,8,-1,41,-85,-4,-24,4,-91,-12,-20,91,114,-20,16,-35,-72,-31,-59, 
  /* [3][0][][] */ 70,35,127,-5,-64,65,-62,49,44,59,67,1,74,77,104,6,102,96,-20,10,93,-31,-17,-51,38,-74,-41,121,30,-123,84,-7,-32,-22,-19,-18,-28,1,45,48,-1,-41,-41,44,106,30,-40,-43,66,-100,69,-15,56,-2,122,-31,-64,-106,-64,-28,-52,39,-12,110,18,-29,-12,-12,-55,-37,5,94,36,-26,89,20,3,111,95,-19,-58,-80,32,51,43,71,-24,-116,-53,47,4,-72,63,-65,-92,76, 
  /* [4][0][][] */ 65,121,51,52,-47,40,32,28,56,114,-8,48,-17,-46,-6,-62,-15,-12,-47,-30,92,-82,94,29,-11,-12,67,12,-52,-5,-60,-63,78,107,11,-87,-18,-14,-95,48,-54,-56,-71,-65,35,92,25,61,28,-72,-26,-87,-78,28,-81,4,37,-102,40,18,-13,-71,-22,-49,-54,45,8,-35,-3,-97,-88,-78,-48,24,127,78,48,-7,-5,-47,0,-52,-123,-32,1,74,88,-15,-125,-83,50,34,7,89,-118,-23, 
  /* [5][0][][] */ 81,-97,51,79,52,-118,29,50,102,-127,2,-64,59,100,32,40,60,60,-73,112,34,49,16,-24,-100,-55,-12,-94,54,40,17,-80,-39,9,-52,28,-111,-31,41,28,-80,-50,40,88,-42,29,38,-46,-101,115,22,39,52,32,29,-25,104,50,-13,-36,31,-62,37,-81,-8,103,-25,33,95,7,101,-66,-44,50,-37,-73,23,-47,14,68,105,44,31,116,-74,78,1,45,68,-88,115,93,-11,33,81,-72, 
  /* [6][0][][] */ 14,-45,125,75,-94,-59,-6,65,-19,-87,2,-98,90,50,115,-127,37,-2,-5,103,-83,-123,106,56,-69,-87,-11,-52,-35,-121,44,-82,-95,-127,-45,-109,-12,36,-110,76,82,55,17,-18,-115,101,-95,-50,-87,6,-24,-71,51,-62,95,-24,4,-19,-66,107,-97,-3,65,-74,-54,60,98,-54,62,-14,-112,-4,52,-61,-87,-41,-86,-105,-60,-23,28,-33,39,-32,-77,-92,-47,-103,80,89,90,13,-61,-72,67,-35, 
  /* [7][0][][] */ 95,60,-50,-45,-73,109,-9,-14,126,0,-91,32,38,-82,52,87,63,27,-1,122,58,44,1,96,-45,113,48,50,-61,127,-20,39,31,21,84,95,-97,91,-25,-21,103,-72,87,73,54,3,105,-106,60,-21,-124,-61,-1,75,26,23,112,-83,9,-48,2,9,80,-122,-81,-43,78,24,-90,19,79,84,93,6,50,63,-49,63,-92,40,103,-32,-20,-73,96,36,-100,109,87,15,101,67,-55,-21,0,-64, 
  /* [8][0][][] */ 19,44,-14,-82,15,33,-70,-23,10,52,42,89,-42,-46,-73,-71,-64,92,-54,-6,26,-19,83,108,-102,91,44,80,-71,13,-86,97,96,-35,34,-22,115,2,-24,65,76,100,-103,-108,4,-32,-25,102,20,-107,-63,-10,-71,-26,-28,-100,40,101,-127,101,104,37,36,119,-52,-48,-16,94,-98,47,30,-5,72,90,18,30,-55,106,80,84,34,72,-109,-96,25,40,70,-44,34,-37,-81,83,-82,-93,-52,55, 
  /* [9][0][][] */ 39,22,127,38,80,-81,-40,-75,36,70,-6,56,-16,-60,-74,-23,5,1,-69,-17,11,80,-79,-82,95,12,-8,35,-5,-5,-60,78,55,4,8,-21,-57,22,-9,-38,42,-37,51,-52,90,25,-73,48,48,0,-32,-41,44,-58,-7,114,64,-38,-9,-4,-52,92,96,-37,-34,0,83,38,-38,84,82,-44,17,105,-35,-67,-73,-91,-31,98,29,33,92,20,-31,-72,27,-13,86,27,-23,101,98,-19,53,-22, 
  /* [10][0][][] */ -61,61,57,-57,5,82,97,23,35,8,24,-59,127,78,-32,15,-29,72,-91,-34,-12,25,48,-59,23,51,-99,-106,-34,81,-79,-56,69,95,117,76,-39,9,-29,38,-27,100,-96,-37,-96,-44,4,-49,-2,17,34,20,68,38,-60,-34,-84,-9,61,-38,0,71,100,23,126,-58,-85,-12,46,-11,-79,-57,76,38,-82,88,0,54,61,9,72,5,55,106,-85,61,93,-12,36,13,-1,-50,-39,-36,-26,-53, 
  /* [11][0][][] */ 96,-3,-31,87,107,39,37,14,95,80,-94,95,-20,-99,11,-82,-73,-117,48,34,15,58,8,-127,-122,-110,-35,53,65,-10,11,-33,-102,-87,35,32,-80,60,-46,-76,-42,87,-91,-12,-58,-74,-106,-106,61,95,107,42,-109,-104,3,11,-83,-70,-43,-105,-93,72,79,2,27,71,-74,13,82,42,-100,-90,26,91,-106,34,-73,17,-62,72,-121,-39,-85,-58,30,-94,-2,-40,-110,-22,-6,-103,-96,-45,-77,-53, 
  /* [12][0][][] */ 3,52,-74,3,97,-2,-28,31,-68,37,-9,14,-3,19,44,-67,-89,-27,-49,-55,30,-8,15,93,-64,-40,98,-100,96,25,-30,123,-83,-57,-28,27,-4,-65,-18,48,112,37,-101,-40,-29,-70,-30,113,-40,-91,-71,108,50,19,-79,77,-15,-50,85,65,57,108,-1,38,127,40,-41,117,79,102,42,69,80,85,-25,-10,-19,32,-105,-96,-48,102,50,29,-30,32,57,118,-82,-94,91,49,101,-5,40,77, 
  /* [13][0][][] */ 96,-67,83,96,90,80,84,58,73,-127,16,-33,118,78,66,-43,-115,-67,-81,47,70,-27,116,-46,-61,46,7,9,-81,-84,83,50,39,109,-11,46,-85,-25,19,76,-58,75,-51,11,-51,36,2,-27,36,116,-39,-99,-84,41,98,-86,-54,29,13,-73,-27,116,-74,1,-37,-55,-92,92,-16,-10,96,-4,-90,16,-89,-45,-91,66,84,-71,56,-91,98,33,-79,-101,98,127,-9,-45,-70,62,115,-39,79,-1, 
  /* [14][0][][] */ -61,-105,74,58,75,-39,-29,-119,-88,-43,57,75,-30,-89,-103,-93,-63,-72,5,13,-50,20,-13,48,-119,-83,-46,20,-121,-118,-84,28,95,-33,-44,3,84,104,30,-122,-17,-123,30,77,54,-119,54,-96,103,35,76,43,86,-21,-29,0,-58,7,41,87,-18,-92,-36,65,-93,-25,64,-113,-94,-92,-96,89,-3,70,40,-84,46,-117,42,29,33,-24,-121,-43,-127,-101,-118,96,100,-4,77,-56,82,91,-22,61, 
  /* [15][0][][] */ 5,-23,4,67,26,-59,57,-90,51,7,-65,-3,54,0,-82,-106,82,8,-68,-32,44,21,72,100,67,77,36,90,10,50,61,-102,8,1,-71,-31,-59,97,104,-65,11,109,-44,-18,28,-74,-44,-82,-13,-94,-10,21,-91,-116,-46,-22,44,51,-97,102,-42,-75,-4,122,-37,82,-62,4,-77,0,59,-65,15,-21,50,-89,-5,56,96,78,-79,46,-95,-64,-112,-36,-84,31,77,60,-127,-41,49,114,-113,96, 
  /* [16][0][][] */ -62,14,127,-62,6,118,-55,36,47,66,-108,70,-67,-53,-47,-63,104,76,75,38,102,79,-34,50,-23,49,-69,74,-105,-4,36,-6,-92,64,38,41,-28,48,-54,-74,17,-42,68,92,75,92,89,-15,-52,-121,2,92,-52,86,71,46,19,82,20,13,107,105,29,76,21,5,-33,80,15,86,-33,-14,27,113,69,93,-25,99,-107,0,10,-86,49,-8,9,95,94,-1,70,7,-13,97,59,-34,-97,19, 
  /* [17][0][][] */ 40,-75,-35,55,32,-60,-31,-20,20,-77,49,37,127,48,-72,32,18,17,43,73,-28,-15,2,-27,-44,36,-30,13,70,-8,5,85,-50,23,42,34,-43,55,-16,-2,-45,-23,-3,-37,-53,14,70,-50,29,67,19,48,11,112,-11,-36,-22,64,-6,-54,37,-37,47,19,10,-20,14,-30,-15,22,66,40,0,-88,-36,3,76,-36,22,-59,11,5,-16,1,-54,47,46,-1,28,35,-50,-36,26,39,38,14, 
  /* [18][0][][] */ -20,73,127,-13,-6,-48,-58,26,15,113,-56,-40,-35,24,58,-24,17,-5,64,-19,76,-15,29,-37,31,-65,-1,98,11,25,16,25,49,-1,-57,-70,-11,36,-12,44,-16,20,-21,21,-35,22,26,10,26,-49,79,32,-69,-4,42,68,23,29,-11,-68,76,62,17,58,-41,-78,-6,65,23,-49,-34,83,-43,15,-40,-40,26,53,8,-32,-35,16,-4,-36,73,-12,48,43,-61,-38,-47,81,61,-40,42,-8, 
  /* [19][0][][] */ 18,27,76,37,66,-87,95,92,92,-63,25,-18,-100,30,-61,58,71,-113,112,50,-27,78,-61,9,75,-83,26,-72,-98,-127,-70,43,80,-89,30,-5,5,-74,-58,-107,42,-124,-90,7,-92,27,75,-99,-32,32,-43,42,-39,11,4,-11,21,97,-4,-32,53,-69,100,61,-75,-7,-31,-4,-12,50,72,-56,-69,-125,-59,-86,-29,-120,11,108,56,-121,-34,76,-93,-11,4,-9,88,27,-7,62,-38,112,68,-54, 
  /* [20][0][][] */ 2,79,87,87,-79,93,17,64,11,30,-75,1,-21,77,43,-66,-44,-36,-55,-59,18,-36,-63,-59,77,-69,-92,54,13,-12,-33,95,93,38,-18,56,43,-29,0,-96,-75,-28,-77,-83,-17,-57,-64,95,58,-127,-87,29,35,91,49,0,81,59,78,80,99,-51,-61,-15,-32,-63,-42,14,-96,-70,-62,68,-54,-56,39,28,87,74,98,109,72,8,73,-27,53,109,-15,57,14,84,26,59,17,13,-13,6, 
  /* [21][0][][] */ 73,59,52,-104,87,-80,76,9,-2,-78,-69,39,-5,39,-52,-84,-100,-30,24,14,103,-48,68,-80,58,-84,-31,65,25,18,-9,-21,6,17,-78,-113,108,93,-127,-26,-6,3,27,-18,-107,-80,-80,95,-25,-53,-28,94,53,63,-89,9,-55,51,-28,119,42,-75,20,-26,83,36,-35,-64,-91,1,63,65,33,-51,54,63,-97,-31,65,91,16,99,30,-67,26,-97,67,-76,-104,83,109,-112,-51,-55,78,-24, 
  /* [22][0][][] */ 32,-32,-74,-88,74,-74,94,31,-69,54,-50,-73,118,-76,-78,-73,36,84,-127,-8,83,-54,23,33,63,18,-80,73,-44,-63,-47,-76,10,63,15,24,-13,7,-56,-78,17,-13,4,66,53,-83,87,-21,-47,-49,12,-12,-88,-45,-45,55,-38,-22,-69,-25,90,-69,-53,-99,-26,31,-87,-24,111,87,-37,2,-73,10,33,-94,43,-48,56,85,104,-102,-40,-74,76,79,86,-3,-29,40,-41,42,28,33,7,87, 
  /* [23][0][][] */ 39,-102,-23,51,108,-123,5,-111,53,-101,83,73,45,-100,13,-35,88,-33,-109,106,92,-81,97,-34,-21,-18,81,12,78,52,68,-38,-44,43,34,39,91,-8,-127,9,-102,-7,5,-113,-89,-87,111,28,74,-91,-103,-41,92,-50,-62,68,-80,-19,126,45,-116,-88,-52,-29,44,42,-115,-107,89,-14,112,-77,-8,-70,-51,-101,55,-24,92,101,-50,-47,26,-93,92,6,113,-16,-86,46,106,-26,106,-45,-15,85, 
  /* [24][0][][] */ -82,-59,-116,-79,-94,-116,-81,-100,55,101,70,34,103,50,-51,-127,-93,31,17,-57,84,-92,-67,-49,44,-41,61,45,95,44,-8,-69,-3,-2,40,20,-64,-95,53,-30,-84,-111,91,-6,10,-48,33,61,-92,-56,-32,2,59,51,59,-83,-14,65,21,-11,78,-17,31,82,-103,84,-58,-96,-109,40,-68,-38,-49,34,85,89,51,-87,-115,-89,-90,-104,-73,-126,-10,54,-25,-111,15,-117,-2,-78,-30,19,-101,20, 
  /* [25][0][][] */ -87,-69,-65,3,78,-31,-74,26,38,-90,-30,19,47,0,-75,-21,-56,46,4,-61,56,71,-9,-39,2,-49,-73,39,63,-91,24,70,69,-102,64,48,83,-54,-42,-21,-72,81,-91,1,71,31,45,33,-85,76,-26,4,40,-33,-41,-9,-18,26,-83,58,108,45,38,28,-24,57,-9,-21,-98,-14,-20,-84,26,-127,51,20,59,60,17,-7,29,49,-38,51,-63,-43,-79,-88,-21,-37,81,-12,-90,-19,-58,-82, 
  /* [26][0][][] */ 73,-115,1,-13,-114,12,-15,-11,-118,-118,113,96,-115,-58,13,-21,122,29,-83,-99,13,78,110,14,55,64,11,60,6,-8,-102,-15,-34,-73,-118,-127,-70,90,-51,113,-112,113,60,38,-71,72,-49,110,-26,16,0,101,-4,-66,-3,-112,106,68,26,26,3,-105,70,-11,106,-29,-61,58,-117,80,94,108,87,-77,-83,13,37,-116,-108,25,-35,79,88,-95,84,2,-55,6,-92,119,7,11,-63,114,44,90, 
  /* [27][0][][] */ 9,7,-60,-98,-49,-74,-75,-15,48,102,35,-101,-28,55,82,-31,60,-21,116,-100,-101,9,-33,-29,-96,43,-117,19,64,7,-35,-11,76,68,-87,-85,-94,-68,-110,87,-100,15,24,16,104,23,67,106,97,84,59,-82,-90,-91,-6,-38,100,-30,-66,-84,-63,-55,-44,59,34,-53,-116,105,50,2,-127,4,60,-35,-15,-91,39,-70,87,118,83,-24,112,-62,-79,-93,-37,25,-55,-8,-28,-53,52,6,84,53, 
  /* [28][0][][] */ 83,-12,76,33,-116,-65,-110,-86,-49,-112,48,66,-83,-97,-7,90,84,103,-73,74,-37,12,-121,-87,-127,71,-94,-65,-79,-77,-11,-21,-112,7,69,66,7,-118,-49,19,95,31,-106,41,-118,-19,4,37,13,-64,-81,-38,-92,15,47,35,55,-24,72,42,-10,-52,-98,1,52,63,-34,71,-81,18,-117,-52,58,34,-8,-112,-119,-76,-99,36,-83,-103,106,-38,52,-122,54,-90,-111,-81,-45,-68,-44,50,-101,-75, 
  /* [29][0][][] */ 58,65,84,-51,-112,17,-122,9,105,-12,-93,-99,87,-111,-41,-51,-103,105,29,-35,-84,-32,60,9,-34,12,-45,-16,-111,-21,109,-6,56,0,-88,-62,-5,108,-4,99,50,111,-45,91,11,107,-60,-26,20,-20,62,-106,68,-108,120,67,-103,48,-66,114,-127,105,-98,-44,-76,-70,59,92,82,-88,29,-76,115,115,76,35,114,-62,-29,46,-6,-90,-15,-89,68,124,46,76,-42,100,77,78,-111,15,-6,57, 
  /* [30][0][][] */ 51,0,45,62,-62,70,-15,30,106,49,33,-41,-106,22,83,25,13,44,90,-56,36,-34,-44,45,-37,51,-26,119,-10,-87,-42,8,-17,-30,-69,-18,46,17,27,50,91,-16,15,127,117,-5,96,74,-11,23,18,-67,58,-33,45,101,-36,-36,-43,-18,-56,2,-7,7,-69,-47,-29,99,-71,91,37,-4,-25,118,108,0,-45,-8,-21,19,38,45,-78,-2,-51,53,-55,84,-18,-58,70,46,-29,-3,5,-36, 
  /* [31][0][][] */ 84,-7,127,84,28,80,-24,3,-16,51,-28,-55,37,-75,1,81,-22,-57,47,-10,33,50,12,92,66,-80,34,86,-52,-89,51,41,31,23,-62,3,97,-20,4,-43,40,-26,8,83,32,-24,-40,34,58,-17,74,-38,-61,-63,-12,5,-55,32,30,90,-20,-2,89,3,45,60,0,-21,-4,-50,-65,12,-28,-5,59,73,-58,8,53,103,-49,11,38,35,50,98,-56,-18,4,-28,-36,-51,-7,54,-29,1, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023405419196933508, 0.0019742248114198446, 0.001908686594106257, 0.002449902705848217, 0.0018815891817212105, 0.0019286716124042869, 0.001808676403015852, 0.0017995887901633978, 0.001914016087539494, 0.0023496577050536871, 0.0020968273747712374, 0.0018233213340863585, 0.0019581883680075407, 0.0018330035964027047, 0.0018430921481922269, 0.0019950876012444496, 0.0018920769216492772, 0.0036530273500829935, 0.0028374020475894213, 0.0017611124785616994, 0.002043859800323844, 0.0018468954367563128, 0.0023235161788761616, 0.0018755343044176698, 0.0018420229898765683, 0.0023258391302078962, 0.0016714402008801699, 0.0017756354063749313, 0.0018011844949796796, 0.0017315790755674243, 0.0025551533326506615, 0.0029067976865917444, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -1997, 3277, 6998, 1603, -2868, -3132, 14800, 2055, 2426, -1147, 8054, -222, -5617, 2097, 15040, 6732, 15828, 4773, -3281, -4217, 4130, 26114, 23935, 17414, 924, 756, 3583, 2114, 1750, -4137, 8693, -2368, -280, 3103, -46, 720, 7732, 4249, -1508, 3710, 8331, 4731, 3952, 12071, 4816, 4525, 1550, 7487, 3666, -3998, -5133, 436, -265, -1013, 1783, 5, 129, -863, -2401, 10832, -895, 942, -1349, -1383, -2393, 5393, 18599, 1638, -1810, 592, 1360, 1775, 1218, -1276, 459, 7489, -511, 17959, 13510, -790, 8574, 1859, -456, 1345, 11702, 7097, 3520, 1174, 4634, 3521, -390, -6652, 693, -2090, -1693, -1633, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00031692703487351537, 0.00050019577611237764, 0.00035400420892983675, 0.00054217647993937135, 0.00036416892544366419, 0.00046248006401583552, 0.00022295201779343188, 0.00034770779893733561, 0.00025222051772288978, 0.00055071752285584807, 0.00024323171237483621, 0.00036361339152790606, 0.0004570937599055469, 0.0013536534970626235, 0.00020650323131121695, 0.00016753750969655812, 0.0001174031276605092, 0.00030423147836700082, 0.00059776741545647383, 0.0003952460247091949, 0.00015437601541634649, 0.00010243795259157196, 0.00012795084330718964, 9.5913761470001191e-05, 0.00019561720546334982, 0.00058427604380995035, 0.00082816544454544783, 0.00053782731993123889, 0.00029796105809509754, 0.00046469451626762748, 0.0001691472134552896, 0.00032691351952962577, 0.00026069366140291095, 0.00036683262442238629, 0.00031277976813726127, 0.00027417621458880603, 0.00024723008391447365, 0.0002512224018573761, 0.00040087781962938607, 0.00048513888032175601, 0.00015456060646101832, 0.00054308510152623057, 0.00037426940980367362, 0.0001939940411830321, 0.00040521769551560283, 0.00022226398868951946, 0.00031266734004020691, 0.00029029644792899489, 0.00036816729698330164, 0.00033780865487642586, 0.00030272046569734812, 0.00022015324793756008, 0.00052861764561384916, 0.00030297448392957449, 0.00043740699766203761, 0.00036100376746617258, 0.00058306159917265177, 0.00033319316571578383, 0.00065621157409623265, 0.00016961756045930088, 0.00085292814765125513, 0.00070195033913478255, 0.00024737944477237761, 0.00055812543723732233, 0.00077550660353153944, 0.00035719727748073637, 0.0001160543251899071, 0.00026686894125305116, 0.00062596058705821633, 0.00053106277482584119, 0.00029315636493265629, 0.00028768728952854872, 0.0010927290422841907, 0.00030604272615164518, 0.00046347704483196139, 0.00028900353936478496, 0.00027964758919551969, 0.00010782254685182124, 0.00013499963097274303, 0.00025840190937742591, 0.00016833689005579799, 0.00017519909306429327, 0.0002097472024615854, 0.00018797373923007399, 0.0001551629975438118, 0.00033863913267850876, 0.00066356797469779849, 0.00024507867055945098, 0.00013663116260431707, 0.00057885947171598673, 0.00022906156664248556, 0.00030000630067661405, 0.00032037933124229312, 0.0005008136504329741, 0.0003755497164092958, 0.00024904808378778398, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -44,95,6,-127,-30,-21,-39,-61,-13,25,7,83,16,-50,-19,47, 
  /* [1][0][][] */ -58,18,-56,10,-33,-32,47,-70,63,68,-46,24,-6,40,48,-127, 
  /* [2][0][][] */ 26,12,-13,53,21,37,-60,-55,127,-28,-7,31,17,72,-48,32, 
  /* [3][0][][] */ 17,-5,-8,-87,3,-11,-16,5,91,17,68,31,1,36,13,127, 
  /* [4][0][][] */ -72,32,-3,52,32,-38,21,67,-5,-23,43,-38,-127,2,-9,78, 
  /* [5][0][][] */ 11,80,89,5,-11,57,-83,53,-43,43,-34,-9,29,-49,-127,35, 
  /* [6][0][][] */ 32,-24,95,-127,37,1,-28,93,-73,-80,21,-64,5,55,-8,69, 
  /* [7][0][][] */ 34,91,-27,-58,109,10,-13,-76,127,71,-31,7,-4,-32,31,38, 
  /* [8][0][][] */ 20,-79,13,-75,40,-29,-3,-77,36,50,86,1,6,127,66,60, 
  /* [9][0][][] */ -5,-22,-6,127,31,-13,36,-58,-49,89,31,-22,-4,-51,0,-1, 
  /* [10][0][][] */ -11,16,-32,-127,8,-11,-5,29,7,-23,8,-24,-14,-33,8,15, 
  /* [11][0][][] */ -10,15,51,-15,74,-30,78,-37,-94,48,-3,21,6,127,-57,-36, 
  /* [12][0][][] */ 41,-15,-127,3,36,0,5,-14,28,12,-21,-38,-28,46,-20,98, 
  /* [13][0][][] */ -14,-1,-19,10,5,-127,-1,26,-4,5,1,-7,16,-15,13,10, 
  /* [14][0][][] */ 30,-13,86,-41,72,8,-127,-78,-25,-49,19,5,11,-72,-9,-19, 
  /* [15][0][][] */ -127,72,-75,-67,-32,1,122,60,-22,93,69,-28,10,68,90,12, 
  /* [16][0][][] */ 23,57,112,127,-27,1,102,66,-101,41,-106,17,6,9,0,-105, 
  /* [17][0][][] */ -42,-127,-23,39,-83,-15,-65,5,-114,-42,23,-34,-14,43,50,-48, 
  /* [18][0][][] */ 13,41,-13,74,61,11,29,-10,90,40,-20,-28,1,127,61,22, 
  /* [19][0][][] */ 12,-33,61,2,44,-12,-66,-45,-90,-77,-50,-127,-18,-34,-9,-22, 
  /* [20][0][][] */ 127,-56,-56,11,29,-81,-6,31,-35,59,-103,15,36,25,-16,-22, 
  /* [21][0][][] */ 58,-81,61,12,-6,-26,-3,71,4,-92,96,58,-24,127,19,42, 
  /* [22][0][][] */ -24,64,-16,127,-65,6,97,88,-21,49,-34,19,15,9,39,8, 
  /* [23][0][][] */ 54,13,107,-127,37,22,-4,53,38,-4,-11,-71,19,-24,-106,30, 
  /* [24][0][][] */ -127,55,17,-16,-1,120,16,-34,12,15,97,-4,-70,3,57,-38, 
  /* [25][0][][] */ 15,14,26,11,8,20,68,-47,0,-127,-9,-19,-11,-29,23,16, 
  /* [26][0][][] */ -33,-1,-10,-1,-63,-13,-25,-25,-126,-22,-10,-40,14,127,-25,54, 
  /* [27][0][][] */ 3,20,-5,64,29,-28,-24,-41,67,-1,-31,9,0,127,-8,22, 
  /* [28][0][][] */ 14,77,66,55,127,-12,30,54,-118,-7,-45,-40,34,97,67,-27, 
  /* [29][0][][] */ 2,-2,12,2,9,-7,22,49,-35,-10,-16,-127,-4,1,10,32, 
  /* [30][0][][] */ -18,94,-44,73,-39,-21,40,-127,-49,58,-24,-12,63,39,78,91, 
  /* [31][0][][] */ -54,1,-23,-71,13,10,-65,-122,27,91,7,-127,-38,-48,7,11, 
  /* [32][0][][] */ -127,-68,-18,71,53,52,-29,-10,11,-41,-88,56,67,-3,52,57, 
  /* [33][0][][] */ -26,-17,-33,-14,-90,3,-80,11,57,33,-2,-53,44,-104,127,23, 
  /* [34][0][][] */ 44,-31,116,48,58,14,-57,109,-118,-48,88,28,14,12,-28,127, 
  /* [35][0][][] */ -28,63,-89,-4,-27,-10,29,-125,115,86,-112,0,-11,-37,78,-127, 
  /* [36][0][][] */ -25,11,-16,127,70,44,85,-11,26,4,29,-6,-21,12,-110,-49, 
  /* [37][0][][] */ -5,-43,25,-57,9,12,-51,-58,-60,-25,21,9,-8,-127,44,-50, 
  /* [38][0][][] */ 35,72,-2,-58,127,-5,36,-44,124,68,-16,-14,-10,-30,47,9, 
  /* [39][0][][] */ -17,49,-10,-127,-28,24,-48,26,52,-75,-19,-13,11,66,47,34, 
  /* [40][0][][] */ -8,-59,-9,-91,-8,9,-11,-57,-99,-28,17,-4,-12,-127,86,-81, 
  /* [41][0][][] */ -14,-46,-31,-12,3,-37,14,-15,-21,7,-26,2,-127,11,15,18, 
  /* [42][0][][] */ 107,47,-44,-26,-70,-52,-5,-64,13,24,87,-35,-61,37,92,-127, 
  /* [43][0][][] */ -63,91,-95,1,59,34,108,-63,104,95,6,48,56,-127,-127,-113, 
  /* [44][0][][] */ -14,-9,-4,-26,72,11,-93,-127,-10,-20,31,22,-28,-24,62,-42, 
  /* [45][0][][] */ -13,6,-127,-26,30,-61,16,-81,17,17,29,-46,5,-32,42,-32, 
  /* [46][0][][] */ 8,16,-20,-90,-9,24,12,-31,-103,-19,0,10,-3,-127,65,-25, 
  /* [47][0][][] */ 19,44,14,-14,127,-7,-29,10,-40,33,8,27,1,1,99,-26, 
  /* [48][0][][] */ -127,-48,-23,47,40,34,-1,-26,17,0,-86,48,45,6,64,28, 
  /* [49][0][][] */ 8,15,99,69,127,-11,34,50,-114,-30,-14,-42,-10,100,15,-38, 
  /* [50][0][][] */ 7,-13,-54,-27,11,-127,-33,6,-37,-5,-15,-16,32,-10,-28,3, 
  /* [51][0][][] */ 16,25,40,-2,15,-8,6,42,-127,65,8,-110,9,-88,-1,90, 
  /* [52][0][][] */ -14,87,10,26,74,-17,69,66,48,77,-13,-127,40,125,89,67, 
  /* [53][0][][] */ 12,-26,-39,-31,-103,-3,-82,0,45,35,-5,-71,32,-127,125,20, 
  /* [54][0][][] */ 50,4,-44,28,127,86,-113,-50,-58,-12,-22,-48,-6,-43,-27,-42, 
  /* [55][0][][] */ 42,-8,33,-1,56,-35,-71,-127,-40,-66,-63,6,0,-24,19,-9, 
  /* [56][0][][] */ -28,17,20,-14,-4,-22,-81,56,-7,127,1,-4,17,4,-12,1, 
  /* [57][0][][] */ 6,29,-44,-21,-47,-57,108,85,-25,30,-10,-3,31,23,127,0, 
  /* [58][0][][] */ 34,42,-127,20,43,81,-17,47,-45,-14,-6,-12,-17,-8,4,11, 
  /* [59][0][][] */ -110,84,127,28,-59,-49,107,118,30,0,45,-13,18,21,54,-9, 
  /* [60][0][][] */ 9,-34,-49,1,19,-127,-20,-9,-1,-6,-15,-11,3,-23,-8,-4, 
  /* [61][0][][] */ 31,-1,40,127,96,23,31,15,-105,-10,18,33,-14,24,43,-51, 
  /* [62][0][][] */ -68,127,2,-45,-14,11,-114,49,-7,-43,-63,-29,-30,-101,-95,-54, 
  /* [63][0][][] */ -21,13,-21,127,-55,8,-62,-26,-53,-17,-25,-14,21,49,15,40, 
  /* [64][0][][] */ 18,15,-11,37,-8,14,-18,68,17,-1,-40,-60,-14,-127,60,8, 
  /* [65][0][][] */ -21,-18,35,-107,27,-24,75,-14,-24,57,1,-127,-3,17,20,-29, 
  /* [66][0][][] */ 21,-34,59,-2,-12,4,-9,81,19,-60,40,44,-19,127,8,49, 
  /* [67][0][][] */ 13,40,-23,-127,-9,4,-53,30,85,-103,-19,-10,14,72,68,36, 
  /* [68][0][][] */ -27,28,127,-1,10,-13,0,20,-54,-11,-13,-33,29,-6,76,-36, 
  /* [69][0][][] */ 127,97,3,-15,-77,-17,-39,-33,-1,26,81,-69,-45,47,70,-95, 
  /* [70][0][][] */ 31,12,-35,-16,-13,25,52,127,-38,74,-31,-7,22,53,-14,23, 
  /* [71][0][][] */ 12,-15,-20,23,-10,-78,-14,8,-22,29,-81,26,-127,-10,18,33, 
  /* [72][0][][] */ 4,22,-127,29,-5,25,15,74,-25,-26,9,-1,18,14,-24,-6, 
  /* [73][0][][] */ -64,33,32,4,65,-37,-67,-127,8,-82,46,-23,30,-59,43,-16, 
  /* [74][0][][] */ -16,34,32,127,-11,20,-88,71,-51,11,-22,45,27,-94,24,-67, 
  /* [75][0][][] */ -28,48,-60,9,-3,0,3,-41,127,0,-1,14,24,89,-64,-3, 
  /* [76][0][][] */ 4,-7,5,24,6,-18,-21,69,21,-33,-24,-127,-11,-4,1,9, 
  /* [77][0][][] */ -4,-4,-34,127,-59,27,55,78,37,48,5,63,-8,-25,-40,-19, 
  /* [78][0][][] */ 7,46,29,-95,52,-25,-73,37,39,-53,15,-24,37,127,-15,33, 
  /* [79][0][][] */ -27,-84,-72,-44,-75,6,30,-61,127,36,30,53,32,39,35,-61, 
  /* [80][0][][] */ -49,-15,108,-127,61,-20,10,-112,-62,16,-46,-125,11,62,101,-35, 
  /* [81][0][][] */ -47,55,-127,22,64,-118,-12,59,-7,-40,58,-12,27,-2,17,5, 
  /* [82][0][][] */ 113,14,-14,13,2,-106,-27,14,-17,-8,-97,-9,127,-11,-3,25, 
  /* [83][0][][] */ -23,91,-127,-81,-13,-30,11,-123,57,47,-53,-125,3,43,39,110, 
  /* [84][0][][] */ -43,20,70,-17,-8,-22,48,-127,-26,55,1,-31,39,61,45,-25, 
  /* [85][0][][] */ -86,127,28,-112,-63,-19,-33,-12,-42,-9,-55,33,3,-6,-98,-31, 
  /* [86][0][][] */ -2,-3,-1,-14,-14,-32,127,28,-17,-19,-1,-15,5,33,67,-22, 
  /* [87][0][][] */ -19,-25,0,-122,8,-22,49,-13,-4,12,-9,-127,-17,-7,24,-22, 
  /* [88][0][][] */ 69,-20,31,-20,8,-127,18,13,-58,16,-113,-88,32,6,90,-15, 
  /* [89][0][][] */ 20,-8,-31,-38,17,-20,-34,-14,-39,4,27,-51,127,-12,4,-47, 
  /* [90][0][][] */ -19,-38,59,-58,58,-2,-65,94,47,-84,-38,-34,3,117,22,-127, 
  /* [91][0][][] */ -54,-21,2,-34,27,-7,-40,-114,-12,85,-25,-127,-24,-8,-1,-9, 
  /* [92][0][][] */ -21,30,43,12,-2,-127,13,6,-4,-20,-5,-21,8,-25,28,10, 
  /* [93][0][][] */ 40,-15,127,-7,-53,59,20,-39,-15,23,-86,-15,-25,-3,24,-2, 
  /* [94][0][][] */ 23,18,-20,-41,11,4,-21,2,-25,-5,-2,-64,127,-16,53,-19, 
  /* [95][0][][] */ 127,79,24,47,-101,-10,-87,-13,-13,-22,89,-34,-31,39,63,-101, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00077063753269612789, 0.0012162725906819105, 0.00086079415632411838, 0.0013183525297790766, 0.00088551064254716039, 0.0011245632776990533, 0.00054212857503443956, 0.00084548385348170996, 0.00061329762684181333, 0.0013391209067776799, 0.00059144053375348449, 0.00088415975915268064, 0.001111465971916914, 0.0032915342599153519, 0.00050213182112202048, 0.00040738302050158381, 0.00028547662077471614, 0.00073976709973067045, 0.0014535270165652037, 0.00096107745775952935, 0.00037537963362410665, 0.00024908740306273103, 0.00031112437136471272, 0.00023322322522290051, 0.00047566142166033387, 0.0014207215281203389, 0.0020137613173574209, 0.0013077771291136742, 0.00072452001040801406, 0.0011299479519948363, 0.00041129719465970993, 0.00079492060467600822, 0.00063390086870640516, 0.00089198764180764556, 0.00076055311365053058, 0.00066668493673205376, 0.00060116295935586095, 0.00061087060021236539, 0.00097477168310433626, 0.001179660321213305, 0.00037582847289741039, 0.0013205618597567081, 0.00091007089940831065, 0.00047171456390060484, 0.00098532449919730425, 0.00054045557044446468, 0.00076027971226722002, 0.0007058827904984355, 0.00089523300994187593, 0.00082141318125650287, 0.00073609297396615148, 0.00053532310994341969, 0.0012853828957304358, 0.00073671061545610428, 0.0010635957587510347, 0.00087781425099819899, 0.0014177685370668769, 0.00081019016215577722, 0.0015956395072862506, 0.00041244085878133774, 0.0020739741157740355, 0.0017068575834855437, 0.00060152611695230007, 0.0013571339659392834, 0.0018857164541259408, 0.00086855841800570488, 0.00028219688101671636, 0.00064891664078459144, 0.0015220814384520054, 0.0012913285754621029, 0.00071283697616308928, 0.0006995383882895112, 0.0026570723857730627, 0.00074417138239368796, 0.0011269875103607774, 0.00070273899473249912, 0.00067998911254107952, 0.00026218054699711502, 0.00032826414098963141, 0.00062832830008119345, 0.00040932680713012815, 0.00042601287714205682, 0.00051001983229070902, 0.00045707562821917236, 0.0003772932686842978, 0.00082343252142891288, 0.0016135271871462464, 0.00059593154583126307, 0.00033223137143068016, 0.001407550647854805, 0.00055698450887575746, 0.0007294932147487998, 0.00077903212513774633, 0.0012177749304100871, 0.00091318407794460654, 0.00060558359837159514, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -12775, 19861, -21034, 3758, -7334, 19980, 22722, -55139, 2137, 30130, 18250, 14269, -6646, 13867, -8443, 12696, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00074991880683228374, 0.00035238362033851445, 0.00024169120297301561, 0.00023303937632590532, 0.0003709235752467066, 0.00034899218007922173, 0.00032802321948111057, 0.00024708212004043162, 0.00031639484222978354, 0.00025580119108781219, 0.00074890477117151022, 0.00052717054495587945, 0.00046149163972586393, 0.00026590380002744496, 0.00050962984096258879, 0.0005421084351837635, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -6,-12,-9,-41,26,0,-36,4,15,3,-6,-10,-15,2,-15,-1,-8,0,1,1,1,-33,-2,3,8,-8,-2,127,24,-39,36,-6,-4,-3,13,16,-27,0,-42,-4,-18,10,1,31,10,8,6,15,18,-11,-16,-4,18,1,-15,84,12,16,-21,-35,-9,28,-2,-32,-34,-46,-28,41,5,14,14,-15,2,-33,0,-25,-14,29,-3,-2,-17,-31,18,11,-9,-7,-1,-95,-22,-30,16,-3,45,-25,-28,-42, 
  /* [1][0][][] */ 51,-94,-69,-79,107,-107,110,40,-32,-97,-24,-22,17,-54,-49,14,-75,-23,63,113,49,45,-32,-73,15,27,-49,-53,18,-35,-57,51,-35,36,26,26,-30,12,-32,1,-76,56,-45,-1,-26,63,18,1,18,-80,2,-49,-38,48,34,15,1,-13,-46,-38,1,-84,-16,-61,-89,127,-26,-36,-47,-84,-62,13,94,-105,-44,-1,39,-48,24,26,8,-82,-10,-22,-55,15,-2,23,13,-24,-16,4,36,16,18,69, 
  /* [2][0][][] */ 42,46,-127,-6,66,67,69,84,-7,-69,0,6,-29,-17,13,8,21,-25,-19,78,34,91,92,43,24,13,-33,-72,19,17,42,-85,18,41,-15,28,-66,-73,24,8,-39,-14,22,-29,48,-46,-6,36,-18,10,-30,-4,89,-9,3,63,73,29,35,-26,11,0,37,-17,50,-32,-20,-34,-40,-14,-43,-19,-54,-64,-6,70,73,45,18,0,9,-84,34,-30,-34,24,12,39,-20,44,-32,-40,-9,-48,-44,-23, 
  /* [3][0][][] */ 31,16,126,-2,29,-28,0,-46,15,-65,34,-25,24,18,33,100,12,-5,33,-13,119,-41,21,40,35,2,14,22,25,9,-24,64,-88,20,32,24,20,11,5,27,-9,-53,61,27,31,36,-26,-41,-55,-18,-56,32,3,-126,-2,25,-127,63,8,44,23,89,-22,-22,17,39,-12,-50,46,4,37,-35,37,-14,30,-19,-3,-36,33,35,12,-51,52,0,-7,40,-17,32,24,12,18,21,37,77,78,-2, 
  /* [4][0][][] */ 32,-4,2,-17,98,0,-1,-37,-39,-55,-12,-56,-67,17,7,47,32,-97,-82,127,29,38,43,-34,-19,-6,-4,-56,37,-27,86,-52,89,24,-28,14,53,53,8,9,-83,-4,-18,-30,8,-95,-9,-23,39,40,-20,10,-22,-35,-3,-51,39,-26,-62,28,7,78,72,24,53,40,11,-23,-44,-9,67,88,47,-79,-40,-22,55,9,96,-49,-19,-71,7,1,-65,-28,63,55,-29,52,8,-80,4,19,42,-48, 
  /* [5][0][][] */ -16,-26,37,2,27,-40,32,-14,-33,-47,8,2,3,28,1,32,-11,-6,8,-22,24,-9,-60,55,20,4,11,-80,-3,21,-4,40,-15,5,7,-45,15,26,-18,22,12,-18,26,-3,-1,15,9,-23,-14,-1,8,-13,-22,-46,-19,-50,-4,4,-40,24,70,0,-3,24,-24,76,0,72,-1,79,7,15,24,1,-4,44,-25,-11,6,7,1,-7,-36,25,-15,12,-9,127,2,1,8,-8,20,27,-53,-11, 
  /* [6][0][][] */ 58,-83,-53,-38,-30,51,72,50,0,14,-26,-64,-16,-19,-49,43,24,-8,9,32,-36,58,32,13,-38,-1,-22,-25,-22,27,60,-18,63,16,50,5,-19,-9,21,-109,-73,127,8,-46,4,-32,-25,27,-20,19,-23,55,-14,-43,7,-2,15,-50,39,10,-30,48,38,-95,44,-27,4,-21,-18,-23,106,-1,-29,20,-27,40,-83,12,19,13,28,17,21,-12,-54,0,58,11,5,35,69,-44,-20,-13,-18,0, 
  /* [7][0][][] */ 48,127,-21,4,110,62,70,-22,-31,-25,31,-22,-11,8,10,47,5,-41,29,65,38,28,65,2,-18,16,-6,-15,14,-8,28,8,45,6,-37,26,7,1,-5,60,-97,53,5,9,-24,-53,6,-7,-42,-63,18,-24,36,-29,-17,55,70,8,21,-2,-40,-69,-11,-29,-46,69,-36,-114,-31,-69,-40,82,-16,-23,15,24,74,74,26,-23,-72,-82,0,-14,-29,48,-3,-27,-54,39,-21,-39,-65,-53,43,12, 
  /* [8][0][][] */ -57,-20,117,21,-127,-34,21,-27,36,74,76,7,-14,30,34,13,-56,10,4,2,-53,-58,-123,69,8,-37,62,2,14,-19,-28,44,61,-18,3,4,-15,6,8,69,12,-53,17,24,-35,17,39,1,-112,14,3,41,-77,-43,-39,48,18,-64,-115,2,31,-29,-54,18,-8,98,-15,-31,21,14,-20,-18,45,67,49,-33,-30,-73,11,9,-77,34,-49,9,29,43,50,52,26,-58,37,53,14,17,33,-1, 
  /* [9][0][][] */ -16,-92,2,17,57,89,-16,-70,28,-67,108,89,-8,35,117,-93,-2,-30,1,16,-30,-53,26,-11,-10,26,4,-3,-28,19,-6,2,12,12,-103,20,12,39,-12,66,49,-87,-8,81,-3,-22,-55,-27,35,29,1,-71,44,5,4,-76,-20,70,-49,-3,35,-55,-29,127,-106,-1,13,-2,35,32,-70,-73,40,-2,7,9,51,-73,-4,24,27,4,48,9,12,-26,5,8,13,-38,-45,39,-60,-12,52,-10, 
  /* [10][0][][] */ -21,-18,-33,-40,-13,15,56,-22,37,20,32,42,21,-9,-9,8,-1,26,-31,-15,-7,16,22,21,-16,-1,13,-127,25,-40,58,-38,0,16,2,0,0,50,16,-1,3,-33,32,-53,1,11,27,22,-2,55,-8,-16,-27,-15,9,-62,6,17,1,-29,28,24,17,-3,-38,91,0,-30,35,-16,15,-26,-16,-4,20,58,7,31,-7,16,-14,10,14,32,-8,-15,6,123,8,-13,20,8,21,-18,48,-54, 
  /* [11][0][][] */ -108,22,48,4,14,-53,-33,-20,-44,-23,7,24,21,34,-25,-8,43,9,-75,-66,16,-60,-21,10,80,7,81,20,-26,6,-49,35,-4,12,-13,-8,10,23,23,26,23,-33,13,15,82,50,74,18,49,50,-6,51,4,-68,15,-9,-68,-15,-48,-22,8,8,-10,33,-16,-20,27,10,32,46,24,23,-16,10,14,-10,-27,48,-103,43,-16,23,-73,-57,127,33,37,11,32,29,-33,-56,-12,61,-22,-5, 
  /* [12][0][][] */ -3,0,-63,-6,49,-2,20,1,-22,15,23,1,-13,-6,47,-34,-34,-26,35,-7,-18,29,-34,39,0,31,-27,65,-34,30,-23,0,-20,31,-3,11,-25,-20,-2,5,-16,6,-6,-12,-4,-11,9,21,-18,-28,1,-29,-34,17,-19,-10,29,16,21,0,-15,-46,6,46,51,-71,9,32,-33,-127,-34,57,-7,2,-1,66,11,13,-32,6,-19,-18,-18,-21,9,-13,6,-57,-22,21,-9,-5,-33,10,-8,13, 
  /* [13][0][][] */ -33,38,-40,-4,-68,11,-10,38,-76,-8,19,37,82,-6,-42,6,-32,16,-56,16,20,-19,74,-57,49,30,-14,-19,15,-11,-3,-90,-90,-10,-24,-10,-37,43,40,-22,-72,122,2,20,57,28,-21,8,49,-27,15,67,53,-54,52,-26,19,58,40,11,2,35,-14,27,14,-35,3,-4,-26,10,31,-119,53,-9,-68,7,49,35,-30,-26,57,-19,-11,-35,14,-57,127,-4,-41,30,-38,9,17,-22,-38,14, 
  /* [14][0][][] */ -27,18,-56,-45,45,-11,6,48,-82,23,2,10,-29,-72,-65,-39,-75,-26,70,3,38,42,20,-97,-45,19,-71,-31,14,-16,-14,-45,-63,-23,12,18,-26,-21,10,-9,-43,104,-69,-35,-44,-21,11,0,127,-23,21,-20,35,70,-92,35,-17,43,-81,-8,-20,12,51,24,12,34,-9,1,-57,-14,33,41,33,-6,-25,33,58,-52,-21,-80,4,-64,11,33,18,-82,-51,6,-53,52,43,45,4,23,18,-40, 
  /* [15][0][][] */ -11,-77,-30,-29,8,21,-2,-59,-13,15,-21,-28,50,-19,41,-7,-86,-4,-4,18,-18,14,-44,-51,-15,17,-8,-2,-25,-13,64,-79,-10,39,22,12,-23,18,-82,-4,8,-44,-10,30,-40,-51,37,40,37,-3,-6,-127,2,43,12,20,32,-12,-19,32,7,-8,44,-2,7,3,-14,1,-32,12,-13,40,-33,10,6,-23,-18,9,8,19,-17,42,3,55,-24,-46,-30,-39,-59,43,28,74,-35,-16,0,12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.031871549785137177, 0.014976303093135357, 0.010271876119077206, 0.0099041732028126717, 0.015764251351356506, 0.014832167886197567, 0.01394098624587059, 0.010500989854335785, 0.013446779921650887, 0.010871550999581814, 0.031828451901674271, 0.02240474708378315, 0.019613394513726234, 0.011300911195576191, 0.021659268066287041, 0.023039607331156731, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 23923, 64056, 238, -30, 15397, -3586, -376, -2103, 5580, 10902, -3529, -391, 1337, 3445, 5146, -9365, -3545, 954, -1321, 14211, -11798, 22507, -5345, 9689, 13336, 414, -4496, 17290, 13953, -19575, -121, 22916, 21733, -12342, 1592, 575, -762, 642, 3425, -9490, -5992, -1732, -7094, 284, 32564, -2183, 12134, 482, -14419, -402, 158, 122, -2561, 11471, -5106, 14973, 20368, -108, 38146, 514, -9134, -1760, 680, -92, -1182, 11337, 746, -4698, -4768, 3298, -997, -5046, 1554, 390, -2022, -6027, -6, -2042, 49219, -8579, -6628, -7601, -1216, -627, 62696, -14535, -11652, -26664, -7576, 12223, -1793, 37871, -323, -3432, -2780, 1127, };
const TfArray<96, float> quant10_scale = { 96, { 0.00010078939521918073, 8.9024266344495118e-05, 0.0001469418202759698, 0.00022987123520579189, 0.00024447945179417729, 0.00020189231145195663, 5.8977700973628089e-05, 9.3097238277550787e-05, 0.00027018357650376856, 0.00022162633831612766, 0.00033489597262814641, 0.00011123378499178216, 0.00031123033841140568, 0.00022295466624200344, 0.00041937764035537839, 0.00014933297643437982, 0.00021412434580270201, 0.00019062146020587534, 0.00019745112513191998, 8.8602952018845826e-05, 6.3386491092387587e-05, 5.2311042963992804e-05, 0.00013993828906677663, 7.8101395047269762e-05, 6.918856524862349e-05, 0.00010387381917098537, 0.00016861110634636134, 0.00017607481277082115, 7.0905305619817227e-05, 0.00045583362225443125, 0.00038059390499256551, 0.00022960908245295286, 0.00010368035145802423, 0.00011749816621886566, 0.00022405124036595225, 0.00041082073585130274, 0.00036729188286699355, 0.00025867862859740853, 0.0002217574801761657, 7.2840884968172759e-05, 0.00023317326849792153, 0.00024239084450528026, 0.00035302675678394735, 8.6094412836246192e-05, 0.00037297472590580583, 9.847968613030389e-05, 0.00012254962348379195, 0.0002430480089969933, 0.00067332753678783774, 0.00014216171985026449, 0.00044317194260656834, 0.00016275131201837212, 0.00022713917132932693, 0.00025553253362886608, 0.00015398708637803793, 0.00012678239727392793, 0.00015493411046918482, 0.00046712954645045102, 4.3596908653853461e-05, 0.00015956343850120902, 0.00031244801357388496, 0.00034317461540922523, 0.00010786200436996296, 0.00016007341037038714, 0.00012652340228669345, 0.00015227880794554949, 0.00033128881477750838, 0.00046807463513687253, 0.00021058507263660431, 0.00011334195005474612, 0.00020103280257899314, 9.7830925369635224e-05, 0.00026749697281047702, 0.00013705737364944071, 0.00038443616358563304, 0.00032688982901163399, 0.00013514098827727139, 8.108437032205984e-05, 5.2138995670247823e-05, 0.00014434155309572816, 0.00022042839555069804, 0.0002308215043740347, 0.00019560434157028794, 0.00028089617262594402, 5.6985969422385097e-05, 0.00010297174594597891, 8.6720276158303022e-05, 0.00049394275993108749, 0.00027911437791772187, 0.0001328876824118197, 0.00037885055644437671, 2.6982259441865608e-05, 0.00015627933316864073, 9.8863980383612216e-05, 0.00036196198198013008, 0.00027332056197337806, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -44,-70,-9,127,22,73,74,-66,-15,-17,-16,-3,-32,-5,38,5,-16,-54,26,24,21,-127,127,4,-83,9,52,-29,-127,-127,41,23,14,31,57,-19,-32,-9,28,4,-15,29,-112,74,22,-72,42,44,-18,54,-26,19,8,-8,20,46,-96,-51,-64,-21,-5,3,9,45,68,-26,72,14,-4,16,21,127,23,25,31,0,-12,18,127,-3,-14,6,-21,23,121,26,-74,-17,-4,-26,-16,-36,4,-30,-15,26, 127,-127,74,99,-43,127,39,-119,68,5,-16,127,127,-94,-12,13,14,127,127,-116,127,-84,85,61,-119,-111,-68,-36,-58,45,-54,-21,-88,58,-127,-89,-44,-16,-53,63,0,127,127,86,-56,-116,-113,-51,-15,-127,43,83,68,-32,51,80,-53,42,-92,-116,-41,-39,-61,67,75,-62,25,29,-79,31,-16,89,116,127,10,14,1,57,-30,52,67,127,127,-21,-10,91,-107,127,-124,-97,4,-127,-89,-127,-38,104, -75,-14,28,-83,13,-14,56,-6,80,-32,-27,24,-21,4,-9,-11,-13,-14,10,-10,-22,-123,36,-3,-127,99,2,-57,119,48,-14,9,0,18,14,-33,-11,37,17,17,30,17,-119,69,15,-23,37,11,-15,11,-18,4,-3,0,-7,17,-73,6,-34,49,0,43,35,0,-5,-37,-32,22,2,4,0,32,8,-29,0,5,-12,-6,-80,10,-20,-29,-14,3,-114,10,-30,-23,-50,25,-28,-27,29,-24,-14,1, 
  /* [0][1][][] */ -66,-73,71,-32,-49,91,27,127,-52,-21,1,-114,24,-118,79,38,-7,-69,-14,94,52,-65,49,46,-96,-21,127,-21,-26,63,120,-105,-127,87,-84,-58,-38,27,-26,94,-47,-22,-7,43,-49,127,-21,62,15,98,17,-2,14,-54,34,31,127,122,-71,-86,127,-30,-37,127,72,-38,-17,-1,127,40,127,103,-41,103,1,16,13,15,-30,12,-43,113,-66,112,1,36,-53,29,84,-127,-29,-2,127,-68,-23,1, 68,124,54,-114,127,76,86,36,-127,127,127,-34,-69,-127,-127,127,127,-68,-118,-48,99,95,-122,127,-105,-98,-47,127,-126,109,-127,-127,-88,127,108,127,127,-127,-101,127,-64,-91,112,-127,-127,-32,-127,-127,127,-108,82,44,127,127,127,-127,100,-127,-127,127,17,-78,-127,-101,-127,127,-127,127,-115,-127,-105,-86,-127,-81,127,127,-127,127,-77,127,127,29,-39,-127,57,127,94,47,127,8,127,4,-66,41,127,-127, -53,-12,-46,35,-57,-84,26,-25,15,-34,-25,86,-1,102,15,7,-6,63,-1,126,0,-86,-38,7,-73,94,-72,-20,-66,-17,15,-61,-70,32,4,-22,-27,46,-67,49,127,-1,-38,31,-41,-56,14,40,8,115,-16,6,-30,-70,7,18,95,3,6,22,-38,127,95,-53,-43,13,32,-12,-70,124,-16,-88,-2,-57,-10,-15,24,15,74,-27,-71,-38,57,17,-49,-12,67,22,19,60,-45,22,-40,104,-26,-4, 
  /* [0][2][][] */ -75,-2,-13,-16,10,-38,56,26,60,-29,-35,-4,18,24,-28,3,-13,64,9,8,-50,-77,8,-8,-22,-53,33,-66,83,39,32,23,16,-8,-8,-47,-5,31,-2,-3,-12,-3,-71,109,3,31,16,34,-16,-23,7,-21,29,-6,7,16,-67,25,-19,12,16,2,-19,-6,-2,-47,-49,13,-22,21,29,35,15,-22,32,9,17,4,-77,-12,-7,-27,19,15,-127,5,17,-45,-49,-60,-27,-52,9,58,-20,-10, 113,30,-127,-37,-74,-21,29,34,-63,-28,-20,-106,-77,118,-14,36,3,-56,-4,-127,93,-73,-32,3,-108,127,-50,21,-38,-20,-5,-7,-61,18,27,3,-20,-32,127,44,11,-9,66,-30,-41,82,-67,-44,-33,-4,-127,-127,-41,-28,3,38,-72,-7,4,39,-9,-17,11,-51,-56,33,54,-24,114,113,-21,-69,14,-59,4,9,96,2,49,23,12,-111,-46,3,4,10,127,40,-53,28,-17,-122,39,88,-10,26, -61,11,-24,26,12,-54,-127,6,-7,-9,-15,-1,14,-21,18,-4,-13,-17,6,21,-50,-74,25,3,22,-99,16,4,-49,-39,-4,16,42,-21,-2,-31,-32,3,41,-35,33,1,-49,-25,3,67,28,15,-10,0,7,-10,24,1,-7,0,-59,-13,2,-41,-13,13,90,-16,33,-3,-6,27,8,17,-1,25,-16,10,6,22,38,-1,76,-7,4,-12,-3,-14,71,1,41,-40,67,26,-20,-52,-7,5,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0042835492640733719, 0.003783531254157424, 0.0062450272962450981, 0.0097695272415876389, 0.010390376672148705, 0.0085804229602217674, 0.0025065522640943527, 0.0039566326886415482, 0.011482801288366318, 0.0094191189855337143, 0.014233078807592392, 0.0047274357639253139, 0.013227288611233234, 0.0094755729660391808, 0.01782354898750782, 0.0063466513529419899, 0.0091002844274044037, 0.0081014120951294899, 0.008391672745347023, 0.0037656254135072231, 0.0026939257513731718, 0.0022232192568480968, 0.0059473770670592785, 0.0033193093258887529, 0.0029405138920992613, 0.0044146371074020863, 0.0071659721434116364, 0.0074831796810030937, 0.0030134755652397871, 0.019372928887605667, 0.016175240278244019, 0.0097583858296275139, 0.0044064149260520935, 0.0049936720170080662, 0.0095221772789955139, 0.01745988056063652, 0.015609905123710632, 0.010993841104209423, 0.0094246929511427879, 0.0030957376584410667, 0.0099098635837435722, 0.010301610454916954, 0.015003637410700321, 0.0036590124946087599, 0.015851425006985664, 0.0041853864677250385, 0.0052083590999245644, 0.010329539887607098, 0.028616419062018394, 0.0060418732464313507, 0.018834806978702545, 0.0069169304333627224, 0.0096534145995974541, 0.010860132984817028, 0.0065444512292742729, 0.005388251505792141, 0.0065846997313201427, 0.019853005185723305, 0.001852868590503931, 0.0067814462818205357, 0.013279040344059467, 0.01458492036908865, 0.0045841350220143795, 0.0068031200207769871, 0.0053772446699440479, 0.0064718490466475487, 0.014079774729907513, 0.019893171265721321, 0.0089498655870556831, 0.0048170327208936214, 0.0085438936948776245, 0.00415781419724226, 0.01136862114071846, 0.0058249384164810181, 0.016338536515831947, 0.013892817310988903, 0.0057434919290244579, 0.003446085611358285, 0.0022159072104841471, 0.0061345160938799381, 0.0093682063743472099, 0.0098099140450358391, 0.0083131846040487289, 0.011938086710870266, 0.0024219036567956209, 0.0043762992136180401, 0.0036856117658317089, 0.020992565900087357, 0.011862360872328281, 0.0056477263569831848, 0.01610114797949791, 0.0011467459844425321, 0.0066418712958693504, 0.0042017190717160702, 0.015383384190499783, 0.011616123840212822, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1927, 8568, 10472, 28047, 31246, -3395, -1810, 5042, 34662, -4737, 15981, 5272, 6943, 13310, 35762, 1259, 2879, 7908, 9871, 5055, -214, 703, 12707, -1074, 6952, -1, 11555, 10888, 7669, 41019, 48285, 24842, 8434, -996, 12006, 3123, 1375, 4219, 28540, -718, 11515, 8672, 35331, -2323, 29326, 8731, 8056, 15456, 60787, 10645, -374, 11385, -4210, -367, -1573, 5242, -558, 18372, 6013, 7418, 5679, 14122, 6800, 8458, 10900, 7679, 6665, -6354, 9093, -2373, 4358, 9415, 32540, 7656, -4563, -4922, 8369, 265, 2180, -1097, 19105, 15131, 3348, 23410, 2579, 117, 7847, 97651, 6753, 12415, 4865, -249, 8477, 9659, 6508, 10978, };
const TfArray<96, float> quant12_scale = { 96, { 0.00027406468871049583, 0.00016923699877224863, 0.00016848281666170806, 8.2537269918248057e-05, 9.6840107289608568e-05, 0.00029945102869533002, 0.00045779361971653998, 0.00031804371974430978, 6.8676272348966449e-05, 0.00029776719748042524, 0.00016635420615784824, 0.0001611589832464233, 0.00018175080185756087, 0.00017426855629310012, 6.8012341216672212e-05, 0.00045121100265532732, 0.00018284577527083457, 0.00016207320732064545, 0.00022608166909776628, 0.00020485698769334704, 0.00028597898199222982, 0.00058101193280890584, 0.00015451268700417131, 0.00057427282445132732, 0.00037186348345130682, 0.00021180456678848714, 0.0001896120811579749, 0.00012907382915727794, 0.00021735754853580147, 8.6045860371086746e-05, 5.7845518313115463e-05, 0.00010059554188046604, 0.00019076192984357476, 0.00022818484285380691, 0.00016605886048637331, 0.00018831061606761068, 0.00035578003735281527, 0.00035184915759600699, 9.5540046459063888e-05, 0.0007024294463917613, 0.00014517850650008768, 0.00017253153782803565, 7.6986019848845899e-05, 0.00042245819349773228, 0.0001126372953876853, 0.00017101512639783323, 0.00021285435650497675, 0.0001729814539430663, 6.7985856730956584e-05, 0.00019796173728536814, 0.00025485357036814094, 0.00014893384650349617, 0.00025956734316423535, 0.0002099880512105301, 0.00061567284865304828, 0.00019069395784754306, 0.0001368167286273092, 0.00010309505887562409, 0.00035192494397051632, 0.00020027294522151351, 0.00028857577126473188, 9.6825235232245177e-05, 0.00021368489251472056, 0.00011839665239676833, 0.00022667243320029229, 0.00024897092953324318, 0.00020695243438240141, 0.00021442823344841599, 0.0001849691616371274, 0.00030853581847622991, 0.00024930192739702761, 0.00017187424236908555, 6.4229519921354949e-05, 0.0001308823557337746, 0.00032419289345853031, 0.00026477128267288208, 0.00019820255693048239, 0.00032741861650720239, 0.00037774041993543506, 0.00031320881680585444, 0.00010949256829917431, 0.00010344551265006885, 0.00022396011627279222, 8.420125232078135e-05, 0.00045676020090468228, 0.00032439699862152338, 0.00028897041920572519, 3.9426904550055042e-05, 0.00020040637173224241, 0.00017938370001502335, 0.00026059930678457022, 0.00040497659938409925, 0.00016972995945252478, 0.00016062133363448083, 0.00017454969929531217, 0.00015333696501329541, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 11,39,-18,56,15,9,15,15,37,34,-52,127,19,-105,73,-75, 
  /* [1][0][][] */ 59,67,-12,-15,17,-32,111,-127,43,120,-53,-5,-37,-33,34,14, 
  /* [2][0][][] */ -30,8,39,-24,34,-63,47,127,-98,94,108,-19,-54,4,-3,33, 
  /* [3][0][][] */ -9,80,91,15,-27,19,62,127,-41,41,-80,-6,38,-74,-102,0, 
  /* [4][0][][] */ -7,-51,11,96,-22,106,-35,47,96,-42,45,66,-23,53,-127,-95, 
  /* [5][0][][] */ -12,-46,85,-15,27,-7,-10,30,-74,56,-17,-127,-22,26,-14,-26, 
  /* [6][0][][] */ 7,-10,64,-28,14,51,-64,-78,-20,3,47,-32,127,-5,-11,-10, 
  /* [7][0][][] */ -2,8,127,-48,-19,-60,6,-42,-68,57,-40,-25,-6,-11,59,-12, 
  /* [8][0][][] */ -16,31,53,26,-81,93,-4,43,29,-26,4,-73,-59,7,-127,-43, 
  /* [9][0][][] */ 22,-106,19,45,-20,6,5,6,120,22,60,27,-34,8,-127,-23, 
  /* [10][0][][] */ -76,-127,23,23,-86,11,12,102,105,107,72,-93,23,87,6,-54, 
  /* [11][0][][] */ 112,49,-4,-123,41,-13,-87,-102,-66,78,-57,-113,-28,-37,50,-127, 
  /* [12][0][][] */ -33,34,-13,-52,-40,-48,-75,-18,-61,-75,-23,0,20,127,79,33, 
  /* [13][0][][] */ -7,-101,-57,-9,3,-48,-19,-82,118,-2,-4,10,16,28,127,6, 
  /* [14][0][][] */ -3,-90,61,-7,-2,34,-7,127,13,16,75,-19,27,9,-64,106, 
  /* [15][0][][] */ 14,-46,4,53,1,-18,101,9,-11,-127,18,-45,3,-30,-3,-11, 
  /* [16][0][][] */ 41,-50,-18,46,-7,-10,65,-87,107,49,84,8,66,97,124,127, 
  /* [17][0][][] */ -127,-119,29,37,98,34,-42,-27,110,-92,37,-23,27,15,-92,98, 
  /* [18][0][][] */ 4,29,22,51,-87,24,-18,25,-38,-15,-20,-43,10,-127,43,7, 
  /* [19][0][][] */ -15,-55,61,-79,100,37,-102,27,66,-45,127,37,-23,48,26,102, 
  /* [20][0][][] */ 8,-12,42,-95,-20,-2,-24,39,-26,-65,111,4,7,4,-26,127, 
  /* [21][0][][] */ -27,-43,-10,-17,9,-5,-65,-39,29,23,7,18,-127,35,15,-31, 
  /* [22][0][][] */ 9,-62,27,-22,17,-65,31,-5,-127,9,-11,-67,-9,17,61,10, 
  /* [23][0][][] */ 18,25,34,4,20,5,4,6,-8,-30,59,-8,127,9,3,-47, 
  /* [24][0][][] */ 32,-23,-11,-111,-37,-55,51,-4,-55,6,10,-127,55,-112,72,54, 
  /* [25][0][][] */ -54,73,-70,9,3,-54,-38,-127,-29,51,-43,-101,-27,-112,12,-16, 
  /* [26][0][][] */ 54,-35,-14,-26,106,3,-58,-26,127,-72,48,8,11,80,38,76, 
  /* [27][0][][] */ 119,-33,30,-46,-50,-85,-4,-30,-61,23,-127,10,13,-24,-10,55, 
  /* [28][0][][] */ -93,-7,-119,-109,11,-2,127,-59,-31,52,-37,-54,37,-12,-12,66, 
  /* [29][0][][] */ -63,-45,-31,127,-37,-1,61,-31,-35,23,-66,57,28,-82,33,-23, 
  /* [30][0][][] */ 39,12,127,-57,112,37,-7,76,-40,-85,85,-92,-32,59,-65,85, 
  /* [31][0][][] */ 54,-80,-26,-87,-11,-100,16,-70,-20,39,65,45,-20,69,73,127, 
  /* [32][0][][] */ -6,79,-26,32,-127,26,-74,-57,-71,-18,-16,42,16,19,44,65, 
  /* [33][0][][] */ 51,-12,-1,127,23,2,22,-61,-106,57,60,-33,14,-11,-4,118, 
  /* [34][0][][] */ 59,13,44,24,104,-58,-127,-6,-29,116,-59,51,-51,18,-26,8, 
  /* [35][0][][] */ 60,30,-11,-22,13,-127,-10,-6,-60,-21,-65,-3,67,22,5,25, 
  /* [36][0][][] */ 40,3,-127,48,25,25,-1,44,-21,-3,-21,-15,-3,8,-14,38, 
  /* [37][0][][] */ 23,2,127,5,-53,45,3,-34,20,25,-14,48,6,28,41,-10, 
  /* [38][0][][] */ -127,73,-30,12,-16,126,118,-3,7,27,115,-55,-99,26,-17,-27, 
  /* [39][0][][] */ -8,3,10,17,30,-49,-127,30,-5,16,-11,-40,-7,-16,-3,28, 
  /* [40][0][][] */ -19,127,-13,55,12,1,70,4,-125,-21,-74,-10,72,-34,-99,-47, 
  /* [41][0][][] */ 30,-15,-43,-2,-72,-31,127,92,-56,59,-90,-24,8,87,-2,-27, 
  /* [42][0][][] */ 50,-8,-27,-17,-4,-48,0,127,37,-121,7,-5,-22,-1,-71,12, 
  /* [43][0][][] */ -87,29,-14,-44,37,-21,-28,-23,-33,69,24,-6,-127,11,37,-22, 
  /* [44][0][][] */ 21,10,-18,17,-19,4,3,-36,127,26,-43,58,11,97,-5,51, 
  /* [45][0][][] */ 7,-99,7,-87,-27,-40,-35,116,-18,-102,58,67,23,112,-31,127, 
  /* [46][0][][] */ -18,14,-16,101,-71,-37,20,-49,-127,61,-79,-42,-5,17,-20,-28, 
  /* [47][0][][] */ -56,-37,-127,124,-13,28,-8,-33,24,76,75,58,-38,-5,39,-9, 
  /* [48][0][][] */ -83,24,-13,-88,38,6,-46,-47,-12,42,36,17,3,38,127,11, 
  /* [49][0][][] */ -15,51,49,51,-42,17,-8,28,-7,-62,-77,-32,15,-63,-127,-120, 
  /* [50][0][][] */ 26,50,29,-74,53,15,-16,44,127,-21,-54,16,-9,-26,12,-21, 
  /* [51][0][][] */ -1,-19,39,20,108,-43,-77,-126,49,-127,-84,-82,42,-22,-47,-81, 
  /* [52][0][][] */ -3,-34,26,40,57,12,-109,93,-62,126,-26,-50,50,127,24,-57, 
  /* [53][0][][] */ -37,103,3,-15,-39,75,28,4,5,20,-73,41,10,-111,-127,-91, 
  /* [54][0][][] */ 21,25,0,17,37,-49,9,-51,-13,28,-39,-23,-2,127,-44,10, 
  /* [55][0][][] */ -116,95,68,4,36,16,-6,-31,-35,35,76,-79,-3,-37,127,12, 
  /* [56][0][][] */ 53,-6,18,-117,67,9,-39,52,98,-41,127,115,-75,59,83,45, 
  /* [57][0][][] */ -53,-38,-13,43,-42,23,65,127,4,-15,-21,-6,41,32,-8,8, 
  /* [58][0][][] */ 42,127,-18,-97,11,23,-19,-1,97,-46,-13,51,-11,-78,22,52, 
  /* [59][0][][] */ 29,37,23,-100,-29,-6,20,-15,24,20,27,-47,-27,-127,-52,13, 
  /* [60][0][][] */ 57,-12,107,-39,-80,127,57,-15,-3,0,-34,24,30,-6,24,21, 
  /* [61][0][][] */ -3,35,-92,-13,-65,9,99,89,-23,101,11,-18,20,127,9,-30, 
  /* [62][0][][] */ -17,-127,78,-7,-76,-1,-56,20,-95,-33,-34,-90,-42,-81,89,79, 
  /* [63][0][][] */ 56,-10,16,-88,56,-120,-100,-127,-84,111,-71,30,81,-26,-21,-41, 
  /* [64][0][][] */ -46,-17,76,35,127,11,2,-101,18,-108,22,-95,63,-22,-12,-8, 
  /* [65][0][][] */ -127,1,44,-68,40,64,58,-31,-81,17,47,-32,23,33,-18,-21, 
  /* [66][0][][] */ -2,-11,73,17,-17,-18,-29,127,-84,14,55,-18,44,52,-113,22, 
  /* [67][0][][] */ -17,1,40,89,93,-39,-96,-84,87,-127,-35,-27,-58,64,-96,14, 
  /* [68][0][][] */ 15,-44,-127,33,-74,-43,-3,-119,24,-12,32,-71,-58,62,109,-43, 
  /* [69][0][][] */ -18,7,-54,79,7,-117,-36,40,89,-20,34,-5,127,27,12,-61, 
  /* [70][0][][] */ -3,-18,-26,-46,-2,-15,127,109,-23,61,-4,-14,15,39,17,-1, 
  /* [71][0][][] */ 42,-20,-19,-20,25,11,10,66,-15,-42,3,-34,-5,-127,75,28, 
  /* [72][0][][] */ 37,45,-86,50,2,-52,4,-127,-12,99,-89,73,2,60,103,67, 
  /* [73][0][][] */ -48,-127,-76,-111,-101,-58,37,-54,-22,41,-78,-34,31,-72,113,-7, 
  /* [74][0][][] */ -45,49,82,98,-15,22,-127,81,10,-45,-31,-23,3,-11,-22,5, 
  /* [75][0][][] */ -44,60,-28,11,-2,127,34,124,-5,65,9,0,-94,46,19,8, 
  /* [76][0][][] */ -31,-29,13,-15,122,-105,-127,-44,-78,29,0,-50,27,-35,94,5, 
  /* [77][0][][] */ -41,14,-44,-22,-50,-4,-20,-56,127,10,-61,-1,9,30,16,-87, 
  /* [78][0][][] */ -74,-115,11,96,47,44,14,65,-27,-30,-110,65,52,-42,76,127, 
  /* [79][0][][] */ 49,-13,36,-79,127,-9,91,32,57,-9,-3,28,34,-1,26,-52, 
  /* [80][0][][] */ -16,-51,95,-127,-14,-27,-16,-10,-93,-61,3,-76,5,84,-41,46, 
  /* [81][0][][] */ 43,9,98,101,74,31,15,50,-25,-19,30,-27,5,76,-127,72, 
  /* [82][0][][] */ -68,-94,115,-75,-71,51,28,-44,69,-29,-42,-127,6,-97,-86,0, 
  /* [83][0][][] */ -62,21,-64,-119,-49,31,-31,7,-96,-40,36,-78,-2,-92,55,127, 
  /* [84][0][][] */ 127,33,34,58,-49,3,-36,33,-28,16,66,-37,-56,19,69,-48, 
  /* [85][0][][] */ -42,-2,-18,-36,43,-18,-7,85,-73,-97,-34,6,-19,59,75,-127, 
  /* [86][0][][] */ 22,38,45,-23,-78,59,-34,66,-127,-58,63,-28,11,-52,18,5, 
  /* [87][0][][] */ 127,-26,-29,-35,-64,-80,38,33,23,28,-113,36,50,26,49,89, 
  /* [88][0][][] */ 21,4,-23,-10,-17,-25,21,3,51,-29,-14,-24,16,-45,127,-68, 
  /* [89][0][][] */ 74,76,-124,-28,-56,-12,42,-117,82,14,21,9,-41,-21,-9,-127, 
  /* [90][0][][] */ -13,-1,-27,-60,-40,30,91,-76,55,-127,32,-50,86,9,-45,-26, 
  /* [91][0][][] */ 5,-11,79,-71,-9,-8,51,-18,-80,56,127,84,53,34,22,103, 
  /* [92][0][][] */ 7,-6,17,65,85,4,-120,-127,106,-104,-27,-31,-24,-48,-44,-76, 
  /* [93][0][][] */ 38,-44,-2,-116,-43,-26,-54,51,52,-105,127,40,-42,116,-45,26, 
  /* [94][0][][] */ -46,60,-96,-13,59,-127,14,-1,-30,-60,71,-43,20,-33,-10,12, 
  /* [95][0][][] */ -27,70,9,-127,-34,25,-15,-13,36,-47,-78,-83,-6,27,-62,4, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0008625248447060585, 0.00053261558059602976, 0.0005302420468069613, 0.00025975782773457468, 0.00030477112159132957, 0.00094241969054564834, 0.001440748805180192, 0.0010009338147938251, 0.00021613508579321206, 0.00093712040688842535, 0.00052354298532009125, 0.00050719280261546373, 0.00057199847651645541, 0.000548450683709234, 0.00021404557628557086, 0.0014200323494151235, 0.00057544454466551542, 0.00051007000729441643, 0.00071151473093777895, 0.00064471730729565024, 0.00090002105571329594, 0.0018285362748429179, 0.00048627582145854831, 0.0018073273822665215, 0.0011703131021931767, 0.00066658243304118514, 0.00059673917712643743, 0.00040621572406962514, 0.00068405852653086185, 0.00027079990832135081, 0.00018204898515250534, 0.0003165900707244873, 0.00060035794740542769, 0.00071813375689089298, 0.00052261346718296409, 0.00059264327865093946, 0.0011196959530934691, 0.0011073248460888863, 0.00030067961779423058, 0.002210656413808465, 0.0004568996955640614, 0.00054298399481922388, 0.00024228716210927814, 0.001329542719759047, 0.00035448736161924899, 0.0005382116069085896, 0.00066988629987463355, 0.00054439995437860489, 0.00021396222291514277, 0.00062301685102283955, 0.00080206443089991808, 0.00046871835365891457, 0.00081689946819096804, 0.00066086556762456894, 0.0019376196432858706, 0.0006001440342515707, 0.0004305838665459305, 0.00032445642864331603, 0.0011075633810833097, 0.00063029059674590826, 0.00090819352772086859, 0.00030472432263195515, 0.0006725001148879528, 0.00037261296529322863, 0.00071337394183501601, 0.00078355084406211972, 0.00065131200244650245, 0.00067483953898772597, 0.00058212719159200788, 0.00097101094434037805, 0.00078459252836182714, 0.00054091541096568108, 0.00020214045071043074, 0.00041190744377672672, 0.0010202862322330475, 0.00083327706670388579, 0.00062377477297559381, 0.0010304381139576435, 0.0011888088192790747, 0.00098571763373911381, 0.00034459040034562349, 0.00032555937650613487, 0.00070483784656971693, 0.00026499465457163751, 0.0014374965103343129, 0.0010209286119788885, 0.00090943556278944016, 0.00012408269685693085, 0.00063071050681173801, 0.0005645488272421062, 0.00082014722283929586, 0.0012745253043249249, 0.00053416698938235641, 0.00050550070591270924, 0.00054933549836277962, 0.00048257567686960101, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -3068, -2761, -13735, 22598, 34057, 16166, -13715, -173, 34514, -18985, 34229, 23577, -2134, 11284, 25930, -18870, };
const TfArray<16, float> quant14_scale = { 16, { 0.00045894918730482459, 0.00032246275804936886, 0.00027731285081245005, 0.0002175443951273337, 0.00035685501643456519, 0.00031825312180444598, 0.00027349876472726464, 0.0004445058002602309, 0.00022277746757026762, 0.00022929911210667342, 0.00033121200976893306, 0.00080577208427712321, 0.00037176808109506965, 0.00035544464481063187, 0.00037265836726874113, 0.00036851124605163932, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -7,-5,19,14,34,79,-23,-8,52,10,9,28,13,6,18,77,-12,-4,-9,10,81,-46,5,-11,-33,-32,-49,-77,-18,2,47,47,127,-17,8,6,7,-14,-40,3,-18,21,26,-37,31,-47,-10,32,-3,-17,6,-11,-23,-13,-4,-12,32,42,-32,-30,-57,39,-10,-25,11,9,50,2,27,26,-26,-17,-66,14,-4,-9,-6,-83,-6,-20,36,-21,-52,-44,55,1,5,60,-8,-2,1,-39,25,19,-19,110, 
  /* [1][0][][] */ 54,-86,37,109,-2,-55,-19,-33,12,-77,-20,-6,-13,-56,-30,-12,-104,-6,-3,30,-7,-105,3,9,127,-62,-62,14,-35,96,-17,40,32,-27,-62,5,-58,-6,58,8,32,-85,46,-37,-66,23,52,-30,48,44,16,-60,81,-29,38,-34,40,28,-42,-95,62,-85,1,-69,-3,-95,30,30,-2,53,-72,19,-76,51,-38,54,48,65,1,-31,15,-12,-76,58,-96,47,0,85,-42,33,20,-27,-3,-11,24,-13, 
  /* [2][0][][] */ 21,-22,11,-20,5,-19,-46,30,37,-5,12,56,-5,14,38,-7,-13,-44,3,-4,-19,-70,7,-38,-1,-21,-30,41,-29,50,127,-59,-2,-63,-14,22,16,122,-103,-44,19,-4,4,21,-33,-53,-46,21,34,20,-14,-14,42,-11,4,-34,-40,17,-5,35,-15,23,73,90,-1,-58,22,-71,-6,-28,-23,20,-1,48,-24,17,-8,44,13,6,-8,49,26,6,-1,29,39,1,28,-1,-2,-43,-59,-18,-18,63, 
  /* [3][0][][] */ -31,-14,-27,51,51,-5,-2,-37,-18,16,-1,14,9,-23,47,11,31,-29,19,28,-6,0,0,11,10,25,6,-17,19,-29,51,-30,36,-15,-33,39,-2,19,23,10,34,-68,12,-23,-23,-5,2,6,-127,45,-18,45,-116,-43,-23,-21,42,28,14,70,2,20,1,14,17,-88,-70,30,50,31,-7,24,-40,10,4,-38,-33,-47,28,-48,17,-60,30,59,35,47,24,-5,26,-2,-16,14,-40,21,8,-29, 
  /* [4][0][][] */ 14,-48,16,-76,23,-37,-51,33,-47,-30,-22,-25,6,69,10,-24,63,-43,4,-3,-28,18,66,1,-43,7,48,7,0,0,0,27,-56,10,-42,-35,50,-40,-39,-12,13,21,-101,-19,13,-13,-30,-8,0,83,-13,-13,-4,-17,2,-42,1,-55,25,36,31,-3,-14,-9,47,-104,16,-39,-58,18,2,30,-7,28,-44,38,-40,67,82,-8,7,-1,127,-38,44,-19,16,18,83,29,-2,30,-66,7,-19,-30, 
  /* [5][0][][] */ -31,-4,-16,20,-8,-30,-12,96,56,-20,-25,-32,-30,30,59,17,-18,0,10,-31,-35,-16,-15,-79,15,8,16,58,61,10,42,57,-53,25,-11,7,-56,-47,5,-28,-27,-25,-14,-8,34,14,5,1,-6,26,-37,26,-40,-15,15,-40,-23,-20,-32,24,-75,28,-24,-48,0,17,-19,-11,-14,35,-2,-7,8,-7,9,20,-35,-1,0,125,0,-61,34,14,-5,-26,14,-25,-17,-6,28,-116,-33,-22,10,-127, 
  /* [6][0][][] */ -34,-7,6,-66,-34,-6,-4,7,28,35,-38,-5,40,-36,-18,-3,7,-67,35,10,29,-2,-10,12,84,-9,-12,4,16,1,-3,-4,-27,35,-12,-32,33,38,7,32,-5,-43,-57,-37,20,-13,52,-127,32,17,31,18,9,14,-36,-48,55,-5,-25,16,-21,19,35,2,57,98,26,-11,-28,-21,-6,-45,36,5,96,-33,-13,20,22,32,-17,15,32,-40,-5,65,41,-18,11,-28,-18,-6,-30,-9,-5,19, 
  /* [7][0][][] */ 28,-27,34,-13,-8,3,-6,-36,8,0,-19,-13,-1,-67,19,13,-6,-34,4,-1,11,-23,-38,-1,-28,-19,0,-14,-2,18,7,-9,-18,12,-2,-15,8,-10,-44,8,8,-10,-13,13,10,8,-4,56,-2,2,-33,-21,-18,6,-24,-57,11,11,-6,-5,-15,8,-3,-9,-18,45,10,-21,-18,-13,-16,29,-11,5,2,-23,32,2,7,-7,-4,-34,30,-4,-12,127,0,9,-36,-31,0,9,-25,-11,-1,-15, 
  /* [8][0][][] */ -89,63,-41,10,32,-31,3,33,8,61,-37,13,-32,30,58,-36,-6,51,-71,19,9,45,-2,-8,-30,-25,1,21,56,-116,-30,26,55,-20,8,29,-14,3,24,44,-12,17,58,-127,-34,-3,38,-22,-46,47,-34,62,-111,96,20,-39,18,-34,-68,-1,8,-7,-24,27,-37,18,28,-35,-3,-16,48,86,-58,18,-10,54,-22,-94,-14,-43,2,-4,20,-4,-73,-50,-7,-62,-10,17,-10,33,43,-3,-15,-7, 
  /* [9][0][][] */ 37,-65,2,-42,15,43,-25,35,42,-20,2,3,7,-32,-4,53,-9,-3,38,-26,-41,17,-45,-13,61,30,44,-32,-51,-57,0,-15,-9,-13,-7,23,7,76,-27,17,12,8,-31,-94,-19,-15,2,-118,-26,-13,42,41,-22,-23,9,17,-51,24,1,-3,-1,-10,7,39,46,127,32,73,13,-7,-11,-2,35,-11,-25,15,75,7,6,-20,-30,-9,-26,-45,1,33,5,13,-30,45,-54,-12,-1,2,-15,5, 
  /* [10][0][][] */ 54,30,-22,11,95,-119,1,-18,13,56,49,17,23,10,23,-127,31,35,2,45,-84,-23,-46,-34,-117,-13,-32,17,9,9,-3,52,-22,13,10,-29,92,-34,-23,-21,-10,71,35,-15,-66,-35,-48,-15,-33,-29,-81,0,-4,-15,20,-5,21,53,-22,-10,2,14,-57,25,11,34,61,24,38,23,43,36,-32,-15,-76,0,-7,13,-8,33,52,1,-69,-52,82,-45,90,12,-8,0,21,4,88,32,-32,-111, 
  /* [11][0][][] */ 43,40,-41,15,14,17,53,13,-11,-31,-21,-9,-4,0,50,-20,7,-2,-74,-8,-7,7,4,-30,-44,-11,-11,-11,7,1,-12,-1,-1,9,0,33,6,-9,25,37,16,17,48,-91,13,-28,-19,-19,-127,28,-21,-31,20,23,-1,-9,4,-14,-1,3,27,-13,-47,12,-27,47,-6,16,10,-16,33,26,-56,-20,-14,36,4,-26,-43,-2,16,16,76,33,-11,-17,-23,-11,-5,45,-20,-3,6,21,-13,18, 
  /* [12][0][][] */ -47,20,29,12,-40,61,13,33,127,-8,-21,4,9,2,-52,-27,35,36,-28,65,37,29,20,-13,24,-2,6,-36,-100,29,60,-60,20,-27,-9,-30,4,-10,9,-21,-21,-18,-6,15,-11,35,31,-8,9,-9,-52,6,9,-27,4,-9,35,-26,-3,7,0,1,3,-7,-4,27,-50,8,-7,7,-47,-29,1,11,-69,-1,20,-23,4,-79,-17,-6,32,39,-27,-26,-20,-13,22,-7,10,30,-42,-11,18,6, 
  /* [13][0][][] */ 27,-23,-24,32,40,2,6,0,-3,27,24,12,14,-8,4,-26,23,-73,-35,25,-5,-22,21,1,9,2,1,-5,-19,-35,-11,25,-4,19,1,40,28,11,3,18,-5,16,29,41,40,10,-5,-127,31,-31,8,10,-1,14,-1,3,-6,18,30,19,-4,29,-4,1,-6,-15,-29,-71,21,2,5,-28,-28,41,8,19,-28,-1,37,9,36,-6,-5,24,37,31,18,22,-15,-18,20,2,11,10,-20,-4, 
  /* [14][0][][] */ -121,-59,25,8,35,1,-44,-14,3,19,4,20,89,-11,-127,19,69,-11,-19,38,-7,-9,36,39,-120,14,42,-9,-30,-75,-20,-12,6,52,43,-73,13,36,-36,-18,22,52,-6,0,11,109,97,65,-106,37,44,38,-37,-10,41,11,8,18,64,49,-2,45,46,50,-12,-20,-40,34,8,98,-38,-114,-20,-37,14,61,5,12,91,31,69,15,-5,28,65,30,32,42,42,17,89,20,16,9,23,-14, 
  /* [15][0][][] */ 115,-12,58,-20,-11,78,36,8,3,50,28,30,-52,-23,-28,47,-9,23,34,4,22,17,-82,87,-15,-2,44,-25,21,39,-30,-42,-5,-31,48,7,15,-49,-87,-120,-19,31,13,56,35,35,-10,-58,80,-57,-69,25,39,-115,32,-83,15,-62,-25,30,-127,-15,10,4,45,-15,-24,17,-27,64,-27,-20,58,51,12,-20,36,-65,55,-5,14,-36,-6,96,-5,16,-10,-46,35,-24,66,8,-76,12,13,6, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.019505340605974197, 0.013704666867852211, 0.011785795912146568, 0.009245636872947216, 0.015166337601840496, 0.013525757007300854, 0.011623697355389595, 0.018891496583819389, 0.00946804229170084, 0.0097452122718095779, 0.014076510444283485, 0.034245312213897705, 0.015800142660737038, 0.015106396749615669, 0.015837980434298515, 0.015661727637052536, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 13583, -11098, 3724, 59176, -702, -4601, -9740, 5132, -2803, 856, 3267, -1071, 1541, -6802, 6565, -5027, 1481, 16840, 28574, 2149, 2058, -3695, 456, -474, 13742, -238, -41, -3968, -6136, -7316, 7055, -8618, -811, -2516, -685, 13816, 2962, -857, 20817, -165, -512, 1884, -11066, -8016, -7898, 58259, 235, 18760, 29639, -13386, -194, 6665, 7689, -438, -5274, 2437, -15095, 1818, 2808, -8121, -2035, -1613, -11509, 399, 1663, 16307, 26800, 20185, -12625, -85, -6628, -816, 38312, 10208, 575, -423, 19114, 32498, 208, -9152, -1243, -7348, 1471, -3318, 555, -1529, 2055, 933, 912, -4704, -419, -277, -3449, -991, 625, 50135, };
const TfArray<96, float> quant16_scale = { 96, { 0.00018710998119786382, 0.0001110699595301412, 0.00023336373851634562, 3.6450554034672678e-05, 0.00016345026961062104, 0.00016387147479690611, 0.00032443879172205925, 7.5332260166760534e-05, 0.00015003686712589115, 0.00045156045234762132, 0.00019921093189623207, 0.0003408342890907079, 9.0110494056716561e-05, 0.00036871680640615523, 0.00016455403238069266, 0.00015566965157631785, 9.9996810604352504e-05, 0.00025389101938344538, 5.0371112592983991e-05, 0.00022729256306774914, 4.0521721530240029e-05, 0.00017479238158557564, 0.00012469729699660093, 0.00040855197585187852, 0.00027278150082565844, 0.00020579308329615742, 0.00014090958575252444, 0.00016961729852482677, 0.00012370498734526336, 0.00010758337157312781, 0.00012902196613140404, 0.00018609699327498674, 0.00012849754421040416, 0.00011460324458312243, 0.00021121127065271139, 0.00017330719856545329, 0.00041166672599501908, 0.00013370935630518943, 6.4978077716659755e-05, 0.00014712817210238427, 0.00019551097648218274, 0.00031316454987972975, 0.00034584570676088333, 0.00013935405877418816, 0.00019288648036308587, 5.7782282965490595e-05, 0.00021058281708974391, 0.00018342008115723729, 9.4357499619945884e-05, 0.00016802604659460485, 0.00032191450009122491, 0.00018321593233849853, 0.00026558359968475997, 0.00028763301088474691, 0.00030955285183154047, 0.00042786315316334367, 0.00025107950204983354, 0.00024127725919242948, 0.00010964021203108132, 7.9827681474853307e-05, 0.00033281996729783714, 0.00014694826677441597, 0.00029331169207580388, 0.00013656530063599348, 0.00017992392531596124, 0.0001807957305572927, 8.2049846241716295e-05, 8.6355452367570251e-05, 0.00033401223481632769, 0.00026066391728818417, 0.00024434851366095245, 8.2584054325707257e-05, 0.00015179038746282458, 0.0001529580622445792, 0.00017432427557650954, 0.00026823795633390546, 0.00050373986596241593, 4.8623329348629341e-05, 0.0002558163832873106, 0.00019751764193642884, 0.00018067535711452365, 0.0002928884350694716, 0.00016297023103106767, 0.00013999412476550788, 0.00014498336531687528, 0.00010708488844102249, 0.00012254553439561278, 0.00019750170758925378, 0.00020091685291845351, 0.00012015108950436115, 0.00019660951511468738, 0.00011881493992405012, 0.00014041039685253054, 0.00042929322808049619, 0.0019431973341852427, 7.7410084486473352e-05, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -21,14,-23,102,-22,20,-67,-56,19,-6,100,-10,5,-10,-4,53,5,18,-34,4,75,0,31,-29,1,17,41,49,19,14,26,46,0,30,10,-19,4,44,-56,-26,20,10,26,21,-79,-53,26,-7,-12,-17,-5,-5,48,7,-10,2,2,-39,26,-30,30,3,127,28,-15,-10,9,-51,63,36,-6,-1,81,-28,68,4,14,-123,32,63,2,30,127,-13,40,31,-22,-24,37,1,-12,77,4,20,-2,14, -54,22,-10,10,50,-11,-11,-127,42,14,-127,-5,-18,-13,2,98,16,-33,-22,-17,73,-97,127,29,-62,-35,-104,-17,27,41,-51,17,117,15,-15,-4,-26,127,-60,-127,9,-20,-29,13,49,-127,127,-46,-75,59,50,8,38,-63,30,55,40,43,-100,91,127,36,12,-20,40,-37,-83,-3,38,-28,-18,56,-50,-49,113,-1,-26,-60,-32,67,-67,68,-16,11,-12,46,64,-42,-25,56,-10,68,-127,-32,25,-127, -2,9,-25,-72,8,17,33,20,-1,3,0,65,2,-8,-11,9,-16,15,-22,17,9,23,23,-28,-1,-35,3,12,-10,11,46,-84,44,21,12,-26,9,7,-22,-20,8,5,-14,9,26,-30,20,-1,5,-7,8,-3,5,9,-5,10,-5,47,9,3,14,-13,18,-18,-31,-15,31,-53,-105,-6,45,-14,-127,-19,-3,18,9,-11,8,14,-17,30,-43,-4,-38,22,32,30,-21,-11,25,-9,23,8,0,-46, 
  /* [0][1][][] */ -43,62,-22,41,-88,-14,-15,-47,26,96,-42,-26,-31,-28,-7,64,127,-22,-88,-14,63,-127,-30,20,-34,-52,-127,-1,35,35,-49,26,-127,-75,-53,4,64,-6,-43,52,-20,86,3,7,33,-44,-13,-33,127,43,-3,21,43,11,-38,-18,35,8,-123,127,-36,-86,15,127,-61,-36,-89,127,-37,127,-23,61,-32,-52,39,10,-37,-69,127,41,127,39,8,2,127,28,-102,46,-41,-30,-101,36,102,101,23,-60, 127,127,127,127,-47,-127,127,23,127,-127,19,-127,-109,127,127,127,-18,-127,-70,-127,127,26,-64,127,127,127,-52,-127,127,127,-127,127,-9,-127,-123,127,-127,-50,108,115,-127,-127,127,127,127,-106,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-36,43,-105,-28,-82,-67,127,127,-67,124,127,-105,-127,127,-44,127,-127,-127,-127,127,-78,127,-41,127,83,127,-39,-127,-25,-106,-127,-122,-23,-127,-19,-127,-127,117, -26,72,-41,2,127,74,-22,49,2,25,-19,-5,-26,-27,-14,-1,-107,-21,-127,38,30,79,-15,-109,-35,-45,117,73,7,40,69,6,123,-48,127,-4,54,6,-80,18,34,23,-20,6,-20,-42,-13,-44,80,12,-9,38,-4,-1,-75,-14,28,24,127,-90,3,127,4,-38,-112,-29,-65,99,16,-17,112,29,-21,-51,16,49,-30,-4,-43,-3,-47,12,44,25,-89,32,127,-49,38,-19,127,-11,-108,36,31,19, 
  /* [0][2][][] */ -9,-38,-24,-56,-10,15,40,26,0,10,-19,50,23,-39,-7,7,41,2,2,23,-9,30,-18,-23,2,-26,9,8,-7,-5,50,-76,-40,73,-27,-25,31,-38,-87,22,11,9,-31,19,14,-67,-13,-2,-6,10,16,-8,4,0,-24,5,0,47,-42,33,-6,-17,-6,17,-6,-10,17,-45,-56,12,-22,-12,-113,-37,-8,23,14,-17,52,13,20,25,-36,14,12,24,-21,11,2,27,25,-6,27,42,-10,-30, -32,-9,-28,30,-47,80,-21,59,8,-7,54,-7,127,-10,-20,-18,-6,-48,-51,23,-22,84,-48,-108,-49,-51,101,68,18,40,55,-5,-120,70,-10,-25,-30,-35,-127,-2,43,-13,-12,34,-28,-31,-20,-50,-61,33,70,25,-14,-81,33,53,22,24,76,-54,20,-60,-16,1,20,-25,-127,-52,-9,-26,-57,18,38,-49,-35,-6,-49,26,-60,4,47,30,13,12,6,59,-96,127,16,127,-34,-17,123,-21,43,85, -12,-30,-27,32,13,71,-41,11,5,-8,-3,13,15,-49,-11,-5,-50,-7,6,18,-25,8,-25,5,-4,17,-2,48,-3,4,36,29,24,48,21,-24,-8,-27,-50,12,12,-12,24,7,-71,-19,-15,3,0,-19,2,-5,-7,8,-18,-4,0,-48,16,-28,-23,47,4,-29,-11,-3,33,-52,45,11,61,-24,25,-60,-18,27,11,12,-7,25,-29,30,85,-14,-18,53,37,-7,113,15,2,-18,15,-21,-11,-48, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0079521741718053818, 0.0047204731963574886, 0.00991795863956213, 0.0015491485828533769, 0.006946636363863945, 0.0069645377807319164, 0.013788648881018162, 0.0032016211189329624, 0.006376566831022501, 0.0191913191229105, 0.0084664644673466682, 0.014485456980764866, 0.0038296959828585386, 0.015670463442802429, 0.006993546150624752, 0.0066159600391983986, 0.0042498642578721046, 0.010790368542075157, 0.002140772296115756, 0.0096599338576197624, 0.0017221731832250953, 0.0074286763556301594, 0.0052996347658336163, 0.017363458871841431, 0.011593213304877281, 0.0087462058290839195, 0.0059886574745178223, 0.007208735216408968, 0.0052574621513485909, 0.0045722932554781437, 0.0054834336042404175, 0.007909121923148632, 0.0054611456580460072, 0.0048706377856433392, 0.0089764790609478951, 0.0073655559681355953, 0.017495835199952126, 0.0056826476939022541, 0.0027615681756287813, 0.0062529472634196281, 0.0083092162385582924, 0.013309492729604244, 0.014698442071676254, 0.0059225475415587425, 0.008197675459086895, 0.0024557469878345728, 0.0089497696608304977, 0.0077953534200787544, 0.0040101935155689716, 0.0071411067619919777, 0.013681366108357906, 0.0077866767533123493, 0.01128730271011591, 0.012224403209984303, 0.01315599586814642, 0.018184183165431023, 0.010670878924429417, 0.010254283435642719, 0.0046597090549767017, 0.0033926763571798801, 0.014144848100841045, 0.0062453011050820351, 0.012465746141970158, 0.0058040251024067402, 0.0076467669568955898, 0.0076838182285428047, 0.0034871185198426247, 0.0036701066419482231, 0.014195519499480724, 0.011078216135501862, 0.010384811088442802, 0.0035098223015666008, 0.0064510912634432316, 0.0065007172524929047, 0.0074087814427912235, 0.011400112882256508, 0.021408943459391594, 0.0020664914045482874, 0.010872196406126022, 0.008394499309360981, 0.0076787024736404419, 0.012447758577764034, 0.0069262348115444183, 0.0059497500769793987, 0.0061617926694452763, 0.0045511075295507908, 0.0052081849426031113, 0.0083938222378492355, 0.008538966067135334, 0.0051064211875200272, 0.0083559043705463409, 0.005049634724855423, 0.0059674419462680817, 0.018244961276650429, 0.082585886120796204, 0.0032899284269660711, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 14538, 1383, 7167, -634, 4689, 4135, 17564, 6379, -1598, 16430, 8313, 2671, 10474, 27913, -47, -2954, 13341, 16954, 1491, -317, -1090, 23459, 4580, 5302, 10428, 7114, 5805, 7549, 243, -244, 8293, 13189, 18927, 1878, 8149, -403, 22056, 8452, 1559, 3694, 939, 13241, 12233, 6268, 3053, 12963, 23262, 6345, 4466, 2731, 654, -1327, 17420, 6597, 7638, 15428, -54, 9446, 2207, 4808, 14430, 7279, 4140, 10009, 8757, 6547, 6225, -1051, 18760, 7171, 7412, -1111, -1693, 3631, 2240, 3479, 21955, 12334, 14262, -3216, 6746, -5535, -2226, 837, 8882, 5740, 6733, 5748, 15932, 4513, 8057, 5914, 11057, 26793, -9550, 14272, };
const TfArray<96, float> quant18_scale = { 96, { 0.00017834053141996264, 0.00026646332116797566, 0.00018730030569713563, 0.00083785259630531073, 0.00033937595435418189, 0.0002088226901832968, 0.00017742725322023034, 0.00056277582189068198, 0.00033374689519405365, 0.00010828916856553406, 0.00016900099581107497, 0.00029712196555919945, 0.0002615457633510232, 0.00017375989409629256, 0.00030179423629306257, 0.0002999799617100507, 0.00016762198356445879, 0.00013455432781483978, 0.00027929578209295869, 0.00043261083192192018, 0.00025802422896958888, 0.00010872614802792668, 0.00034218223299831152, 0.00014849200670141727, 0.00016494348528794944, 0.00029915061895735562, 0.00024314830079674721, 0.00012153277930337936, 0.00031967795803211629, 0.00034838946885429323, 0.00018190378614235669, 0.0001460972853237763, 0.00010294847743352875, 0.00055461755255237222, 0.00019247394811827689, 0.0006925680791027844, 0.00010417936573503539, 0.00029741559410467744, 0.00040018846630118787, 0.0002203421900048852, 0.00058748037554323673, 0.00014119150000624359, 0.0001751725358190015, 0.00011738564353436232, 0.00035749253584071994, 0.0002500828995835036, 0.00012152801355114207, 0.00023286363284569234, 0.00033755283220671117, 0.00031542059150524437, 0.00029732807888649404, 0.00054017483489587903, 0.00015455477114301175, 0.00024569805827923119, 0.00030789585434831679, 0.00012090279051335528, 0.00039854607894085348, 0.00018353274208493531, 0.00033630567486397922, 0.00034361219150014222, 0.00011207765783183277, 0.00018510695372242481, 0.00021563548943959177, 0.00027626429800875485, 0.00011761754285544157, 0.00018494835239835083, 0.00030720344511792064, 0.00035229179775342345, 0.00014428667782340199, 0.00016420344763901085, 0.00026005119434557855, 0.00039971998194232583, 0.00020477647194638848, 0.00032835116144269705, 0.00022046116646379232, 0.000349009147612378, 0.00010838834714377299, 0.00036235505831427872, 0.00011483478738227859, 0.00041081380913965404, 0.00016683175635989755, 0.00037512645940296352, 0.0002015177597058937, 0.00037355159292928874, 0.00018198038742411882, 0.00026603337028063834, 0.00024022450088523328, 0.00023845414398238063, 0.00010243002907373011, 0.00034395119291730225, 0.00016333338862750679, 0.0002973307273350656, 0.00018719100626185536, 0.00010605292482068762, 0.00029909145087003708, 0.00023384009546134621, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 22,-16,45,127,53,-23,29,-70,97,7,-52,-79,66,55,-16,-82, 
  /* [1][0][][] */ 10,68,-4,-5,90,-35,54,75,46,32,17,127,29,2,105,-90, 
  /* [2][0][][] */ 6,-22,12,-28,-50,10,4,116,-98,-127,-26,71,11,-113,96,-91, 
  /* [3][0][][] */ 104,106,-38,14,-119,-15,-33,-23,-21,-3,110,-127,-65,67,-28,-30, 
  /* [4][0][][] */ -4,-18,6,17,-26,9,0,54,-68,-14,-28,7,14,-127,52,-8, 
  /* [5][0][][] */ 50,-61,-26,9,-3,-92,-15,5,2,31,-127,-29,14,-12,-10,52, 
  /* [6][0][][] */ -66,-95,-32,127,-26,13,-32,44,-67,-8,-98,-67,-7,63,-4,35, 
  /* [7][0][][] */ -44,30,-65,61,50,-127,-39,35,23,-73,-5,7,12,38,-43,14, 
  /* [8][0][][] */ -7,-49,0,12,12,14,-48,-71,8,-7,-54,-1,-127,9,-4,20, 
  /* [9][0][][] */ 5,-63,9,104,22,41,22,-79,127,-75,36,-7,-26,38,-89,-1, 
  /* [10][0][][] */ -95,-100,-20,32,127,70,49,122,98,-32,-29,112,17,-109,-29,18, 
  /* [11][0][][] */ 120,-12,-127,4,73,-30,-7,74,-25,-87,-17,-38,-38,81,-63,-1, 
  /* [12][0][][] */ 127,-12,-27,-42,8,-91,-34,-55,-31,1,-119,-41,-29,-34,-4,40, 
  /* [13][0][][] */ 5,-11,14,0,8,31,-127,-83,10,-96,-15,-9,9,38,-28,-21, 
  /* [14][0][][] */ -46,4,-63,-48,45,-127,49,-24,4,34,-10,-88,31,91,26,33, 
  /* [15][0][][] */ -24,-7,42,23,24,-51,5,-28,36,-62,-47,-50,-127,-43,12,52, 
  /* [16][0][][] */ -127,23,-8,21,-15,112,46,122,-33,28,67,7,23,20,-53,-48, 
  /* [17][0][][] */ 5,-27,22,-9,-40,18,2,106,-18,127,-66,41,-8,111,50,-3, 
  /* [18][0][][] */ -11,127,-36,1,4,-16,38,-53,25,80,-23,46,6,-40,49,-51, 
  /* [19][0][][] */ 12,-11,51,41,-21,38,1,-2,8,9,-56,-31,-127,9,-8,57, 
  /* [20][0][][] */ 79,-57,-29,-95,-27,28,55,-106,-80,22,-127,-41,24,-9,50,-3, 
  /* [21][0][][] */ 17,-52,84,59,-7,48,16,3,7,21,-18,-10,6,127,-28,11, 
  /* [22][0][][] */ 25,12,20,-32,-13,4,58,127,-43,-23,34,33,16,1,55,41, 
  /* [23][0][][] */ 12,29,-62,-32,29,-127,38,56,-40,-50,36,29,-100,-10,-26,19, 
  /* [24][0][][] */ 47,-64,3,-60,55,-38,-23,-7,30,21,58,75,-41,74,127,59, 
  /* [25][0][][] */ -127,-109,-37,-46,20,-25,-1,-47,-74,-70,-105,33,26,42,45,76, 
  /* [26][0][][] */ 0,-4,24,-27,11,-7,-36,30,-63,-39,15,7,-6,-127,47,0, 
  /* [27][0][][] */ -123,36,-31,24,54,-53,-21,45,28,-79,127,56,-61,17,11,-20, 
  /* [28][0][][] */ -28,-18,39,43,-4,18,18,103,35,12,-14,4,-127,5,-19,40, 
  /* [29][0][][] */ -34,56,49,-29,43,-6,-1,-17,-127,10,-41,11,16,21,-119,-4, 
  /* [30][0][][] */ 5,30,-127,-7,12,-34,32,37,-45,-3,1,-20,-9,-39,1,-21, 
  /* [31][0][][] */ 127,-37,-98,21,27,6,-33,54,-8,29,-111,-48,57,-11,-54,51, 
  /* [32][0][][] */ -127,24,34,43,-2,41,40,99,7,33,83,47,-16,31,3,9, 
  /* [33][0][][] */ 17,-17,127,-17,-50,9,2,-21,6,8,-19,32,9,14,22,2, 
  /* [34][0][][] */ -13,-66,-127,-126,51,-8,24,-5,7,-61,5,-87,-32,34,31,5, 
  /* [35][0][][] */ -13,-31,7,39,62,-46,11,-23,-127,41,6,26,-7,106,-49,-23, 
  /* [36][0][][] */ -108,7,-24,-34,-4,39,49,58,1,7,127,-36,-23,56,8,-27, 
  /* [37][0][][] */ -5,-4,127,-39,-70,-38,42,-31,-16,17,-53,-30,-21,-53,38,19, 
  /* [38][0][][] */ -26,-13,-38,27,61,-29,-101,17,-8,42,127,7,120,46,-28,-3, 
  /* [39][0][][] */ 9,-27,55,-37,-33,-115,14,127,-21,-92,-36,-49,55,74,55,24, 
  /* [40][0][][] */ 87,-24,-5,-28,-7,46,-13,27,-3,4,2,14,127,8,-10,-25, 
  /* [41][0][][] */ -7,-8,-54,-127,30,25,-25,-64,7,-53,14,-18,-30,-24,-24,10, 
  /* [42][0][][] */ 41,25,18,81,-71,-3,-86,3,-55,-63,48,-81,-38,127,-12,-21, 
  /* [43][0][][] */ 28,127,-74,113,5,22,61,-76,-57,81,-25,18,-33,-61,34,44, 
  /* [44][0][][] */ -28,-7,-127,24,45,33,-25,58,-35,-16,37,-3,13,-12,-58,-17, 
  /* [45][0][][] */ 50,69,61,-95,-15,-30,58,-1,-44,-12,-127,105,-2,-108,11,-99, 
  /* [46][0][][] */ -16,42,92,16,37,-1,-108,99,26,-84,-64,59,127,125,33,-32, 
  /* [47][0][][] */ 8,-28,23,-57,-55,24,-59,58,-5,-34,2,26,0,-127,50,42, 
  /* [48][0][][] */ 11,-9,33,-127,-15,-5,-7,3,41,-3,12,18,13,86,-15,104, 
  /* [49][0][][] */ 17,-8,3,108,77,22,34,59,-63,19,46,59,14,42,127,-8, 
  /* [50][0][][] */ 68,-12,39,23,40,127,-5,-42,99,30,86,22,72,50,34,-88, 
  /* [51][0][][] */ 0,37,16,32,0,31,-42,26,69,13,-2,127,19,46,-4,-38, 
  /* [52][0][][] */ -21,62,110,-2,5,-27,28,-68,-45,-4,-6,11,-4,112,-127,10, 
  /* [53][0][][] */ -20,-42,-40,-127,-42,10,17,1,-3,38,50,-17,27,-25,70,-8, 
  /* [54][0][][] */ -9,-9,-33,-42,-19,2,25,20,56,-13,17,-45,18,127,7,37, 
  /* [55][0][][] */ -3,-42,-75,15,-31,-5,-46,-127,10,-71,-48,-40,-57,-34,-30,-5, 
  /* [56][0][][] */ 43,63,50,66,8,-22,11,127,15,-24,2,-49,101,-27,-60,36, 
  /* [57][0][][] */ 103,-32,127,-70,-92,-90,8,-18,-16,-50,-74,41,9,0,27,46, 
  /* [58][0][][] */ 127,72,29,45,-53,-82,-9,37,-15,60,104,-4,-89,-44,-7,-46, 
  /* [59][0][][] */ 118,7,-7,-17,-39,14,26,8,-32,38,-127,1,28,10,17,25, 
  /* [60][0][][] */ -127,35,14,-63,13,14,-3,9,-20,-6,104,-37,-35,-12,24,-10, 
  /* [61][0][][] */ -40,5,16,49,-45,26,-40,-35,80,-55,37,-72,15,11,-103,-127, 
  /* [62][0][][] */ -41,-50,-83,76,64,88,-37,127,62,-16,-20,-3,-35,54,-105,-7, 
  /* [63][0][][] */ -69,24,127,-90,-15,-17,19,-71,7,30,-8,59,20,-67,59,12, 
  /* [64][0][][] */ 13,65,-25,-24,58,-35,66,-114,-76,45,20,-1,-4,-127,29,39, 
  /* [65][0][][] */ -6,-7,12,-32,59,-14,-9,-127,-35,-34,2,-39,6,-29,40,8, 
  /* [66][0][][] */ -127,5,-17,0,-35,18,20,-42,-64,-17,-76,43,56,4,52,89, 
  /* [67][0][][] */ -2,-97,10,127,-44,-9,10,58,44,31,16,-36,-24,-65,-85,3, 
  /* [68][0][][] */ -10,11,-21,127,-19,-19,4,-44,-44,47,16,-7,-44,-65,-6,-38, 
  /* [69][0][][] */ 50,53,38,107,42,28,-16,-127,35,77,6,21,20,-23,2,-22, 
  /* [70][0][][] */ 21,-9,-41,-30,127,-11,-10,8,94,-15,24,-16,50,108,-26,64, 
  /* [71][0][][] */ 1,70,32,69,55,-127,-71,104,32,-102,29,-3,26,-64,-55,53, 
  /* [72][0][][] */ -127,-77,14,67,6,48,-45,54,-82,-49,-117,58,12,24,-4,110, 
  /* [73][0][][] */ -18,70,13,71,22,41,3,-86,127,-23,-58,13,-3,115,-61,7, 
  /* [74][0][][] */ 14,-23,-58,-30,-65,15,75,-3,-54,-20,-69,-41,-127,1,26,-20, 
  /* [75][0][][] */ -12,-10,-13,127,-24,6,5,-5,-61,29,-25,-26,-14,-52,-22,-19, 
  /* [76][0][][] */ -10,-28,18,23,27,-1,-14,-98,10,-127,8,12,-27,-9,28,-15, 
  /* [77][0][][] */ 127,19,32,48,-8,32,-43,2,46,9,0,53,39,-25,-30,27, 
  /* [78][0][][] */ -36,-78,-2,-3,10,1,-70,-6,40,-20,-22,-24,14,127,1,-24, 
  /* [79][0][][] */ 0,9,31,-8,25,47,-46,-64,7,-62,93,-53,127,-17,-15,-33, 
  /* [80][0][][] */ -66,-123,-33,86,22,46,2,-53,-127,45,-76,-6,59,-125,-39,24, 
  /* [81][0][][] */ 64,19,-60,53,127,104,-61,-27,15,-63,-38,-68,-14,-22,-91,14, 
  /* [82][0][][] */ 114,97,29,71,-127,-17,-56,-16,-36,10,74,-23,-35,84,-31,-16, 
  /* [83][0][][] */ 127,45,15,1,3,-21,10,41,31,53,89,-58,-59,-32,-27,-105, 
  /* [84][0][][] */ 33,-29,-74,-74,43,49,34,-127,-20,1,40,42,-50,-27,-30,5, 
  /* [85][0][][] */ -8,-56,-46,-99,-22,-38,61,127,-79,110,14,-72,5,98,53,-56, 
  /* [86][0][][] */ 85,-16,23,-2,-12,-10,-20,-29,6,13,-127,29,11,54,11,10, 
  /* [87][0][][] */ 28,21,-15,-25,13,-8,-24,75,-20,-20,78,5,16,-127,36,8, 
  /* [88][0][][] */ -13,-64,-106,-63,46,-113,-33,-127,-6,25,-25,21,-19,-9,51,32, 
  /* [89][0][][] */ 79,-44,41,-127,9,-68,-27,109,82,-28,9,36,3,47,22,47, 
  /* [90][0][][] */ -21,12,-22,110,66,18,60,-101,62,127,-46,-3,0,38,2,-46, 
  /* [91][0][][] */ 27,-47,-40,-54,15,-127,-10,17,-24,-65,-40,38,48,12,9,60, 
  /* [92][0][][] */ 40,-1,127,22,40,-27,6,38,-53,-1,-30,-15,17,78,2,-35, 
  /* [93][0][][] */ 127,-37,-44,-34,-24,-74,11,46,-27,20,-111,30,-5,30,-9,49, 
  /* [94][0][][] */ 3,-11,-11,57,85,-34,15,67,20,-1,31,25,17,120,-7,-127, 
  /* [95][0][][] */ -67,40,14,39,9,36,16,4,14,7,127,13,-10,37,-10,-32, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.00062589987646788359, 0.00093517359346151352, 0.00065734487725421786, 0.0029405083041638136, 0.0011910661123692989, 0.00073287932900711894, 0.00062269461341202259, 0.0019751051440834999, 0.0011713104322552681, 0.00038004919770173728, 0.00059312203666195273, 0.0010427724337205291, 0.00091791508020833135, 0.00060982373543083668, 0.001059170113876462, 0.0010528027778491378, 0.00058828230248764157, 0.00047222879948094487, 0.00098021014127880335, 0.0015182810602709651, 0.00090555596398189664, 0.00038158279494382441, 0.0012009149650111794, 0.00052114413119852543, 0.00057888188166543841, 0.0010498921619728208, 0.0008533477084711194, 0.00042652865522541106, 0.0011219345033168793, 0.0012226997641846538, 0.00063840538496151567, 0.00051273970166221261, 0.00036130563239566982, 0.0019464730285108089, 0.00067550217499956489, 0.0024306210689246655, 0.0003656255139503628, 0.0010438029421493411, 0.0014044923009350896, 0.00077330792555585504, 0.0020618077833205462, 0.00049552245764061809, 0.00061478151474148035, 0.00041197397513315082, 0.0012546476209536195, 0.00087768526282161474, 0.00042651194962672889, 0.00081725290510803461, 0.0011846676934510469, 0.0011069929460063577, 0.0010434958385303617, 0.0018957853317260742, 0.00054242188343778253, 0.00086229626322165132, 0.0010805842466652393, 0.00042431766632944345, 0.0013987282291054726, 0.00064412230858579278, 0.0011802907101809978, 0.0012059335131198168, 0.00039334519533440471, 0.00064964714692905545, 0.00075678940629586577, 0.00096957088680937886, 0.00041278783464804292, 0.00064909050706773996, 0.0010781541932374239, 0.0012363952118903399, 0.00050638522952795029, 0.0005762846558354795, 0.00091266969684511423, 0.0014028481673449278, 0.00071867881342768669, 0.0011523737339302897, 0.00077372544910758734, 0.0012248745188117027, 0.00038039727951399982, 0.0012717130593955517, 0.00040302154957316816, 0.0014417828060686588, 0.0005855089402757585, 0.0013165352866053581, 0.0007072421140037477, 0.0013110081199556589, 0.00063867418793961406, 0.00093366461805999279, 0.00084308639634400606, 0.00083687319420278072, 0.00035948609001934528, 0.0012071232777088881, 0.00057323114015161991, 0.0010435051517561078, 0.00065696128876879811, 0.00037220091326162219, 0.0010496844770386815, 0.000820679881144315, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -33914, 8581, 1956, -7329, 10995, -14070, -12102, -34770, -43, 23382, 33724, -5095, 6797, -24917, 50615, -40450, };
const TfArray<16, float> quant20_scale = { 16, { 0.00068711536005139351, 0.00061204558005556464, 0.0010579730151221156, 0.0010455958545207977, 0.00076103257015347481, 0.00093921698862686753, 0.0010532280430197716, 0.00064234324963763356, 0.00056946894619613886, 0.00062046345556154847, 0.00072589941555634141, 0.00061689404537901282, 0.0011885897256433964, 0.0012737408978864551, 0.0003911771927960217, 0.0005574648967012763, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -8,5,-13,11,23,-13,1,94,-47,-10,26,-9,17,-21,-13,3,19,-10,2,2,72,-5,18,127,-3,84,-3,-19,15,-21,34,-21,-19,56,39,-46,5,42,12,-5,-90,-31,34,46,41,29,-107,-39, 
  /* [1][0][][] */ -41,-17,32,-1,-30,11,-5,56,-65,-48,8,-52,-18,-11,-1,5,-23,126,-14,6,19,8,-38,-15,38,-40,22,13,-25,-96,-41,30,-26,-12,33,-2,-11,-45,3,26,-22,-22,127,9,6,4,20,3, 
  /* [2][0][][] */ -20,-8,-11,-40,-5,-68,8,-19,-3,14,11,27,19,24,-7,5,-9,-18,-29,-15,-7,-6,4,-127,-16,79,-6,2,8,-15,-4,-22,0,51,10,6,22,10,24,0,-45,1,-26,-8,-2,-12,15,8, 
  /* [3][0][][] */ -12,40,0,-29,-2,5,10,-6,-18,-4,2,39,-127,7,-10,1,8,5,-16,10,-28,10,4,13,-2,-6,7,18,-8,12,8,15,-2,-1,20,24,-14,21,37,18,11,6,26,-30,2,-8,9,18, 
  /* [4][0][][] */ 40,-34,24,5,30,26,26,-30,-41,-15,-16,-19,6,-9,-3,19,22,8,-90,11,-3,-3,10,84,-2,-38,-6,44,18,-77,18,-7,11,-34,31,-127,2,36,-3,5,-12,9,12,-24,-18,-25,16,13, 
  /* [5][0][][] */ 16,7,-13,59,4,5,13,33,2,2,45,7,0,57,0,10,-28,12,34,-4,9,-5,5,-29,1,-49,8,-14,0,-6,-6,4,64,-127,4,26,-13,-9,25,10,-94,63,19,-9,-11,-3,-97,-8, 
  /* [6][0][][] */ 25,-7,9,6,-16,-4,-3,-4,2,7,-7,6,-16,5,1,7,10,-17,127,12,7,11,14,-34,8,3,23,-14,-9,-6,-1,8,4,-10,29,-33,3,-44,70,9,-5,-10,-14,3,-8,-5,5,-14, 
  /* [7][0][][] */ -33,-22,0,20,-18,68,-8,43,-6,52,-15,127,80,0,-15,-8,2,-39,-21,-31,-40,-17,-22,68,-3,-33,-58,-34,-17,-17,-24,-14,2,4,-24,10,16,-51,93,-30,12,14,-89,-73,24,-1,-2,-11, 
  /* [8][0][][] */ -50,-31,2,-1,-7,12,2,32,-10,-76,20,43,53,17,2,19,-4,76,-27,-2,-42,13,-2,-17,-15,14,5,51,-10,124,-8,19,7,2,-27,-127,-113,72,34,38,21,-1,123,-29,11,27,22,25, 
  /* [9][0][][] */ -28,1,0,30,-2,-39,-1,4,42,-38,5,56,-62,3,8,-11,-10,14,-41,-22,44,8,-7,-9,13,15,42,-19,7,4,20,-25,-9,16,74,-93,-5,-127,-88,1,-24,21,54,4,0,6,-29,-40, 
  /* [10][0][][] */ -18,-21,-26,-127,51,79,16,-14,-7,28,13,17,55,-67,-19,25,27,-31,53,-43,41,-19,43,57,-54,-107,-1,-31,43,39,43,-40,-25,-80,14,-9,14,-48,2,-43,-26,-58,-17,15,1,30,20,-26, 
  /* [11][0][][] */ -10,60,-12,68,24,-50,-67,-26,4,66,-5,10,-5,66,5,-53,36,68,5,-19,-48,-94,20,-11,18,-53,30,-22,61,-44,39,-114,43,-14,-45,-106,82,20,11,-127,2,68,112,-80,-9,-71,51,42, 
  /* [12][0][][] */ 127,-5,-5,12,-7,13,2,94,18,-24,-57,-22,-3,5,8,-10,-10,6,-12,-25,0,3,-1,20,15,2,-12,-6,-3,4,-9,-8,11,-63,-3,11,-18,-15,-33,-16,-21,-85,9,-113,-52,-20,77,-10, 
  /* [13][0][][] */ 9,10,1,4,8,-10,-2,6,0,11,1,22,-5,4,6,3,4,1,10,7,11,-15,7,0,-1,3,18,127,13,0,2,-9,10,1,-39,25,11,-5,5,-14,-11,-3,0,3,-1,-8,-9,-15, 
  /* [14][0][][] */ 76,-48,40,-58,47,16,32,-122,-60,-69,-8,127,-66,-25,77,27,67,23,-39,58,25,-11,71,-10,19,50,-39,-115,42,-40,84,57,-5,79,-121,-57,-38,48,67,23,-25,-2,55,14,2,8,14,-43, 
  /* [15][0][][] */ -2,-54,-57,-25,43,12,60,-60,-4,6,-11,-33,80,15,-94,50,61,38,67,-77,-104,-16,60,-16,-80,37,27,43,68,47,33,-33,37,53,98,114,15,-96,-21,-54,89,50,127,-36,-11,-26,-30,48, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029202401638031006, 0.026011936366558075, 0.044963851571083069, 0.044437821954488754, 0.032343883067369461, 0.039916720241308212, 0.04476219043135643, 0.027299588546156883, 0.024202430620789528, 0.026369696483016014, 0.030850723385810852, 0.026217995211482048, 0.050515063107013702, 0.054133988916873932, 0.016625029966235161, 0.023692257702350616, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 8207, 33985, -1128, 41651, 3152, 138322, -2048, 46051, 2981, 31852, 22900, 2821, 2726, 30394, -1830, -3800, -518, 111, 2946, -1561, 435, -4374, 890, -21872, -5458, 43357, 131847, 107678, 1860, 5850, -3921, 999, 24861, 1602, 29904, 5654, 62689, 2189, 57285, 1242, 3270, 75384, 163, 2108, 45834, -496, 4335, 50441, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.0728030803147703e-05, 3.5045144613832235e-05, 0.00014645776536781341, 5.4400668886955827e-05, 0.00012447297922335565, 4.9719248636392877e-05, 0.00013220513937994838, 0.00012360273103695363, 7.7059237810317427e-05, 4.1719049477251247e-05, 4.2430918256286532e-05, 8.7806321971584111e-05, 3.9337755879387259e-05, 3.6765130062121898e-05, 0.00015725828416179866, 0.00015876561519689858, 0.00016069265257101506, 8.5102692537475377e-05, 9.7601776360534132e-05, 0.00018069321231450886, 0.00010665401350706816, 0.00022048078244552016, 8.4669474745169282e-05, 0.00012439172132872045, 0.00010318033309886232, 0.00010263975127600133, 3.075566201005131e-05, 6.5479049226269126e-05, 0.00013119126379024237, 8.8427084847353399e-05, 0.0001091508092940785, 0.00014399726933334023, 3.9909431507112458e-05, 0.00011211349192308262, 3.0287246772786602e-05, 5.0795053539332002e-05, 9.071355452761054e-05, 8.4799627074971795e-05, 9.8333177447784692e-05, 0.00010604916315060109, 9.1843641712330282e-05, 7.5973941420670599e-05, 9.7385433036834002e-05, 9.7928626928478479e-05, 2.6455456463736482e-05, 0.00017473823390901089, 8.6319538240786642e-05, 2.5996027034125291e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 75,-91,103,70,52,-35,104,-61,61,-96,-84,49,52,-38,-68,-90,101,73,49,77,65,-73,-86,50,-34,-37,-63,-65,-67,60,-59,-120,-16,38,72,68,-65,52,-50,-20,51,-78,58,62,-95,8,72,-35, 84,-92,127,87,-77,-72,-60,-84,97,-108,-63,75,78,-107,-92,91,-36,98,82,127,82,-114,52,71,-53,-76,-71,-80,55,79,-30,-127,-82,79,82,87,-82,84,-85,-14,80,-96,83,88,-72,-127,90,-97, 37,-50,70,37,19,-43,-51,-40,41,-36,2,37,30,-88,-56,-1,-53,38,36,70,32,-53,33,25,-29,-46,-48,-25,34,35,89,-93,-86,46,37,35,-33,38,-39,-9,42,-43,36,47,3,-9,36,-72, 
  /* [0][1][][] */ 93,-114,-44,95,57,-83,127,-93,89,-113,-69,83,85,-108,-12,-127,127,104,76,-36,79,108,-127,70,74,-77,-94,-100,-127,86,-68,-13,-85,73,108,98,-85,80,-81,91,90,-104,86,95,-93,107,95,-86, 127,-127,-72,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-20,97,-66,127,127,-45,127,127,69,127,127,-127,-127,-127,53,127,-28,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 64,-82,-37,70,40,-63,-52,-68,57,-42,-55,57,52,-57,-17,11,-63,50,62,-28,56,65,51,64,63,-70,-65,-48,39,57,127,14,-66,70,50,54,-52,60,-59,58,60,-59,54,62,-62,-69,63,-54, 
  /* [0][2][][] */ 47,-49,-52,48,28,-48,66,-44,45,-73,-7,42,60,-80,84,-80,73,49,33,-34,27,-9,-79,35,-25,-46,-51,-54,-73,31,-38,85,-75,37,51,43,-26,38,-45,-86,50,-54,37,47,-24,24,39,-70, 77,-77,-57,81,-56,-61,-70,-69,55,-78,-69,61,79,-52,127,33,-46,62,62,-46,60,-16,42,69,-49,-68,-79,-64,30,61,-23,117,-55,67,59,59,-48,61,-70,-107,71,-70,58,65,-88,55,65,-51, 45,-39,-27,50,33,-18,-16,-35,18,-28,-52,32,34,0,65,26,-34,22,32,-33,31,2,38,43,-23,-28,-54,-27,37,38,63,67,-2,30,18,22,-25,30,-31,-54,31,-35,25,30,-67,9,33,-8, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0025809411890804768, 0.0014894185587763786, 0.0062244548462331295, 0.0023120283149182796, 0.0052901012822985649, 0.0021130680106580257, 0.0056187184527516365, 0.0052531161345541477, 0.00327501748688519, 0.0017730596009641886, 0.0018033139640465379, 0.0037317685782909393, 0.0016718545230105519, 0.0015625179512426257, 0.0066834772005677223, 0.0067475386895239353, 0.0068294373340904713, 0.0036168643273413181, 0.0041480753570795059, 0.0076794615015387535, 0.0045327953994274139, 0.0093704331666231155, 0.0035984525457024574, 0.0052866479381918907, 0.0043851640075445175, 0.0043621892109513283, 0.0013071155408397317, 0.0027828596066683531, 0.0055756284855306149, 0.0037581510841846466, 0.0046389093622565269, 0.0061198840849101543, 0.0016961507499217987, 0.004764823243021965, 0.0012872079387307167, 0.0021587896626442671, 0.0038553259801119566, 0.0036039841361343861, 0.0041791601106524467, 0.0045070894993841648, 0.0039033547509461641, 0.0032288923393934965, 0.0041388808749616146, 0.0041619664989411831, 0.0011243568733334541, 0.0074263750575482845, 0.0036685802042484283, 0.0011048311134800315, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 427, 824, 1941, 529, 8895, 14489, 2998, -354, -618, -676, 892, 870, 3471, 931, 23439, 3130, 1569, -1437, -133, 4334, -1692, 10599, 8010, 9600, 4933, 153, 4015, 4905, 9893, -380, 9378, 5753, 445, -237, 4145, 3093, -1453, 136, -650, 5677, 625, -422, -861, 126, 858, 3241, 482, 932, };
const TfArray<48, float> quant24_scale = { 48, { 0.0005024599377065897, 0.00093368359375745058, 0.00029501560493372381, 0.00031823484459891915, 0.00024456929531879723, 0.00027805243735201657, 0.00038254339597187936, 0.00023735518334433436, 0.0004336773999966681, 0.00077581690857186913, 0.0011887109139934182, 0.00033852606429718435, 0.00038605858571827412, 0.00083533622091636062, 0.00015427535981871188, 0.00038281443994492292, 0.00032293968251906335, 0.00035155081422999501, 0.00031133522861637175, 0.00022383763280231506, 0.00038637922261841595, 0.00024389917962253094, 0.00045870197936892509, 0.00017038066289387643, 0.00032151374034583569, 0.00035314905107952654, 0.0017406261758878827, 0.00039079147973097861, 0.00018056533008348197, 0.00046372698852792382, 0.00027813651831820607, 0.00019405003695283085, 0.00090327701764181256, 0.00026719766901805997, 0.00089576869504526258, 0.00058707105927169323, 0.00093549070879817009, 0.00039978427230380476, 0.00022635729692410678, 0.000324769236613065, 0.00022946309763938189, 0.00031966896494850516, 0.00035572241176851094, 0.00029506866121664643, 0.0023325057700276375, 0.00041265212348662317, 0.00044120373786427081, 0.0012576908338814974, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-11,-2,64,-27,41,15,-20, 
  /* [1][0][][] */ 1,67,46,17,2,-47,76,127, 
  /* [2][0][][] */ -19,16,29,-17,-127,-17,35,-9, 
  /* [3][0][][] */ 102,23,-22,-127,-119,11,17,-27, 
  /* [4][0][][] */ -127,58,11,11,105,-1,39,-2, 
  /* [5][0][][] */ -112,-32,14,-20,-127,0,4,89, 
  /* [6][0][][] */ -31,-127,43,-33,12,-29,40,62, 
  /* [7][0][][] */ -61,8,-8,124,127,-38,-33,11, 
  /* [8][0][][] */ 76,22,12,-127,-5,-33,-46,-42, 
  /* [9][0][][] */ -10,-110,9,-3,10,127,-87,73, 
  /* [10][0][][] */ -87,-9,2,33,-127,75,90,-12, 
  /* [11][0][][] */ 109,10,32,14,-47,-31,-34,-127, 
  /* [12][0][][] */ -7,24,45,-1,9,-80,127,63, 
  /* [13][0][][] */ 51,-12,-22,10,115,127,115,-29, 
  /* [14][0][][] */ 127,44,12,11,-87,-11,-25,-35, 
  /* [15][0][][] */ 10,-127,11,-6,-25,-26,31,66, 
  /* [16][0][][] */ -39,-32,-4,-9,-127,4,22,-2, 
  /* [17][0][][] */ -28,103,-107,-6,17,-127,119,-107, 
  /* [18][0][][] */ 127,-21,-42,6,-55,21,11,91, 
  /* [19][0][][] */ 127,-70,-47,32,45,-35,88,41, 
  /* [20][0][][] */ 127,25,-18,108,2,38,-9,-57, 
  /* [21][0][][] */ -2,28,-44,32,-9,73,-127,-83, 
  /* [22][0][][] */ -127,25,13,11,-22,33,-52,-28, 
  /* [23][0][][] */ -44,-65,6,36,-127,67,72,-13, 
  /* [24][0][][] */ 127,-20,-21,3,-88,-29,36,32, 
  /* [25][0][][] */ 21,-6,-9,-18,127,41,54,-16, 
  /* [26][0][][] */ 1,-74,14,-26,3,-127,90,-47, 
  /* [27][0][][] */ -16,-127,30,-14,-2,-53,29,-3, 
  /* [28][0][][] */ -74,6,-39,52,-25,-28,124,127, 
  /* [29][0][][] */ -9,37,-7,8,-11,37,-109,-127, 
  /* [30][0][][] */ 127,-15,30,56,-93,3,-46,-55, 
  /* [31][0][][] */ 27,-118,89,-20,18,-127,123,107, 
  /* [32][0][][] */ -52,14,18,3,-127,-79,-78,29, 
  /* [33][0][][] */ -33,15,-3,17,-127,-65,-47,32, 
  /* [34][0][][] */ 9,-127,44,-17,0,68,-61,59, 
  /* [35][0][][] */ -26,-55,-127,-16,-1,-69,43,-56, 
  /* [36][0][][] */ 5,127,35,15,-2,6,-14,-23, 
  /* [37][0][][] */ -127,49,43,-8,59,-37,7,-103, 
  /* [38][0][][] */ -127,-33,-58,-17,70,48,35,111, 
  /* [39][0][][] */ -12,-29,76,12,-8,-103,127,105, 
  /* [40][0][][] */ -28,-25,-15,-53,-127,106,120,-37, 
  /* [41][0][][] */ -127,31,-8,-59,-80,-67,-68,55, 
  /* [42][0][][] */ -42,-126,-89,6,-10,39,-127,-74, 
  /* [43][0][][] */ -63,16,-22,-127,82,75,58,-1, 
  /* [44][0][][] */ 127,-25,7,-104,44,-40,-30,45, 
  /* [45][0][][] */ -30,-127,-3,-14,-9,-72,76,9, 
  /* [46][0][][] */ 109,-20,-2,-21,127,-31,-24,-2, 
  /* [47][0][][] */ 123,2,12,127,-17,14,-6,-50, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00083489145617932081, 0.0015514161204919219, 0.00049020029837265611, 0.00052878155838698149, 0.00040637829806655645, 0.00046201414079405367, 0.00063563714502379298, 0.00039439127431251109, 0.00072060181992128491, 0.0012891035294160247, 0.0019751715008169413, 0.00056249758927151561, 0.00064147805096581578, 0.0013880013721063733, 0.00025634517078287899, 0.00063608755590394139, 0.00053659913828596473, 0.0005841396632604301, 0.00051731709390878677, 0.00037193039315752685, 0.00064201082568615675, 0.00040526481461711228, 0.00076218286994844675, 0.00028310588095337152, 0.00053422979544848204, 0.00058679527137428522, 0.0028922383207827806, 0.00064934225520119071, 0.0003000287979375571, 0.00077053246786817908, 0.00046215386828407645, 0.0003224350803066045, 0.0015008923364803195, 0.00044397779856808484, 0.0014884164556860924, 0.0009754819911904633, 0.001554418820887804, 0.00066428474383428693, 0.00037611709558404982, 0.00053963914979249239, 0.00038127772859297693, 0.00053116452181711793, 0.00059107120614498854, 0.0004902884247712791, 0.0038757100701332092, 0.00068566604750230908, 0.00073310767766088247, 0.0020897891372442245, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -42252, 30307, -7965, -13081, 29058, 9586, 30764, 42986, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00047544282278977334, 0.0007378850132226944, 0.0014347550459206104, 0.0017237388528883457, 0.0008226222125813365, 0.00054566154722124338, 0.00072528771124780178, 0.00093682884471490979, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -52,-16,-26,27,12,-3,1,-8,-85,127,-42,114,113,12,78,-23,-16,-26,8,-33,-16,-36,-27,-35,27,-97,9,46,-19,5,24,-35,-11,-75,124,32,-26,4,-19,-6,105,3,56,-30,-38,13,-15,-10, 
  /* [1][0][][] */ -4,20,103,-6,-14,-21,-7,-57,21,1,20,1,-32,10,6,-127,8,-74,2,2,-29,24,14,-23,-11,-13,5,7,-9,-11,9,-12,-15,9,4,19,-28,-38,59,-53,-5,58,-5,20,-5,7,25,-17, 
  /* [2][0][][] */ -8,-44,19,-50,34,25,-3,-32,10,-2,-4,10,-1,59,0,-12,-44,124,-22,-18,-22,36,-45,-13,127,2,-6,-4,-30,-26,7,-29,-10,-8,-8,5,-25,-7,-10,3,15,-13,-17,5,-1,29,-35,-54, 
  /* [3][0][][] */ -10,-85,2,12,3,-1,-8,8,-3,-11,18,16,15,-14,53,1,-6,-17,3,22,-5,22,-21,1,1,47,-9,4,-4,8,127,8,14,2,-5,-1,-28,-13,-8,14,-9,3,-2,19,-17,-7,3,30, 
  /* [4][0][][] */ -103,5,-4,-1,12,-50,-2,-11,48,-44,21,-26,-36,5,-11,-2,7,-5,-1,16,-1,-21,13,15,1,49,-1,94,-10,-10,-5,-30,6,-127,-50,17,1,-6,11,-11,-63,13,3,16,-54,8,-9,-2, 
  /* [5][0][][] */ -14,14,-2,2,-41,-8,-5,59,15,14,11,8,-1,-44,6,34,8,-116,13,11,27,-43,10,46,30,10,-76,-51,-51,-42,16,18,-20,-62,-6,-77,57,-5,-44,12,-14,-23,9,5,127,-19,-40,-25, 
  /* [6][0][][] */ -38,-17,8,4,30,-27,-2,-30,3,-17,43,-18,-10,31,-7,-62,-3,28,6,-22,-17,74,11,-96,-11,-14,-75,-90,30,70,-17,8,15,-69,-16,76,-66,-39,16,-68,2,0,24,48,127,-20,48,23, 
  /* [7][0][][] */ 17,43,-78,31,-17,21,12,69,11,-20,67,-33,13,-35,-6,13,-20,-127,39,-43,66,47,16,-60,16,-23,16,2,-12,33,-16,5,11,40,21,-24,4,-54,-55,-77,-4,-42,44,64,-29,-26,-16,16, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.02020631916821003, 0.031360112130641937, 0.060977086424827576, 0.0732588991522789, 0.034961443394422531, 0.023190615698695183, 0.030824728310108185, 0.039815224707126617, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52258, -52, 10994, 393, 4575, -6543, 1940, 18912, 578, 28435, -1910, 27355, -5312, -991, 32081, 6074, 906, 16644, 25868, 11953, 63, -390, 582, 9754, -8082, 23536, 47388, 35113, 3172, 298, -376, 1227, 1418, 13513, -7046, 14536, -11188, 23729, -21678, 100890, 17157, 21060, 14339, -1359, 16051, 5113, 2186, 598, };
const TfArray<48, float> quant28_scale = { 48, { 0.00033215459552593529, 0.00027393022901378572, 0.00015918374992907047, 0.00031063600908964872, 0.00012475170660763979, 9.269561996916309e-05, 0.00073186197550967336, 0.00018810923211276531, 0.00015514370170421898, 0.000174040935235098, 8.3995364548172802e-05, 0.00015449673810508102, 0.00034300857805646956, 0.00025952071882784367, 8.0525111116003245e-05, 0.00027755615883506835, 0.00022247112065088004, 0.00025199080118909478, 8.9498862507753074e-05, 0.00015290430746972561, 0.00024539133301004767, 0.00023837732442189008, 0.00021792227926198393, 0.0002008628798648715, 0.00017026055138558149, 0.00015772275219205767, 0.00059558806242421269, 9.7834788903128356e-05, 0.00024314981419593096, 0.0024679452180862427, 9.502786269877106e-05, 0.00021199375623837113, 0.00073680817149579525, 0.0002076264499919489, 0.0001747411151882261, 0.00017170919454656541, 0.00040560020715929568, 0.00011497809464344755, 0.00028633815236389637, 2.3270869860425591e-05, 0.0001968188735190779, 5.9307840274414048e-05, 0.00011802864901255816, 0.00013276640675030649, 0.00014253082918003201, 9.4401992100756615e-05, 0.00016553113528061658, 0.00012720572703983635, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,19,107,5,82,-1,25,16,8,8,8,-10,-10,-46,6,-1,8,-20,-113,-7,-23,127,-10,-4,6,-6,8,-5,7,17,100,19,29,40,-28,1,34,-5,2,18,-72,-8,-9,16,-1,-10,-11, 127,8,15,-127,29,89,8,8,127,127,6,43,-54,-24,5,6,127,-56,-59,-55,-102,25,-109,15,19,72,-31,-85,21,21,8,-125,3,-60,127,10,-41,-47,-5,117,-79,-97,-30,2,-35,-11,-127,22, -31,-4,8,13,0,66,2,15,28,7,-14,31,-16,-4,16,0,-103,29,-5,78,-32,-11,-18,-6,-4,-59,-3,26,-17,6,3,-23,5,-24,18,-19,0,47,43,-10,51,37,-15,12,-45,1,-3,-6, 
  /* [0][1][][] */ 125,7,0,-97,15,-28,34,-18,9,9,-13,54,-8,-2,16,-35,0,-50,-56,-88,10,-74,-123,-17,3,98,-15,-127,-9,34,13,-109,14,-51,-3,127,-2,58,-46,42,-62,-127,40,-88,-43,-17,-14,-6, 27,-127,-127,113,-127,-127,-127,-127,-126,-97,127,-127,127,127,33,-127,-84,127,127,-107,127,127,110,127,127,-127,-127,28,-127,-127,94,127,-127,127,-30,-43,127,-127,127,127,127,-76,127,127,127,-125,102,105, 55,5,48,-14,7,-60,41,16,-24,13,-104,-8,0,-42,127,0,63,-66,-70,84,14,-44,10,-32,1,6,-38,66,19,40,0,2,29,-44,9,66,-3,64,67,-7,-81,9,-85,-31,27,-18,-12,5, 
  /* [0][2][][] */ -56,-6,24,-16,8,33,-37,20,10,-25,12,32,4,-7,-42,15,4,21,-13,102,6,-32,-17,-11,-4,22,-2,52,-11,2,47,-31,-20,-42,-33,-41,0,30,7,-21,8,-7,43,-36,-33,16,-11,16, 66,126,75,21,18,-22,118,33,20,-5,45,26,-9,-2,-93,22,-59,-57,-36,119,-37,50,10,21,32,-64,-44,30,75,0,127,21,82,-24,7,-37,-25,-18,-13,123,-28,-13,-41,46,22,-35,7,-127, -42,-3,7,-4,7,-5,-63,6,-19,-13,-39,-41,19,-11,-11,7,33,23,-7,-127,23,-9,4,-7,-7,9,-12,-54,-15,8,6,8,-21,88,-35,-24,-4,36,26,-58,4,10,-37,8,-43,127,-6,-4, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.014116569422185421, 0.011642034165561199, 0.0067653092555701733, 0.013202030211687088, 0.0053019477054476738, 0.003939563874155283, 0.031104132533073425, 0.0079946424812078476, 0.0065936069004237652, 0.0073967394419014454, 0.0035698029678314924, 0.0065661114640533924, 0.014577863737940788, 0.011029629968106747, 0.0034223170951008797, 0.011796136386692524, 0.0094550224021077156, 0.010709608905017376, 0.0038037016056478024, 0.0064984331838786602, 0.010429131798446178, 0.010131035931408405, 0.0092616965994238853, 0.0085366722196340561, 0.0072360732592642307, 0.0067032165825366974, 0.025312492623925209, 0.0041579785756766796, 0.010333866812288761, 0.10488767176866531, 0.004038684070110321, 0.0090097347274422646, 0.031314346939325333, 0.0088241240009665489, 0.0074264970608055592, 0.0072976406663656235, 0.017238007858395576, 0.0048865689896047115, 0.012169371359050274, 0.00098901195451617241, 0.0083648022264242172, 0.0025205831043422222, 0.0050162174738943577, 0.0056425724178552628, 0.0060575599782168865, 0.0040120845660567284, 0.0070350733585655689, 0.0054062432609498501, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 59349, 6826, 6762, 6813, 1196, 8183, -1431, -301, 1195, 2160, 2502, 260, 1487, -946, 544, -1738, 3542, 9764, -214, 29095, 5466, 2280, 8481, -443, 3249, 5173, 24672, 8611, -116, -2471, 67, 1771, -1597, 8649, 2732, 8558, 7656, 4176, 18532, 1853, -936, 2458, 997, 3193, 3927, 1884, -1103, 2590, };
const TfArray<48, float> quant30_scale = { 48, { 7.3329727456439286e-05, 0.0003335301298648119, 0.00023600555141456425, 0.00048659255844540894, 0.0018567758379504085, 0.00060690689133480191, 0.0012912702513858676, 0.0011863951804116368, 0.00053084106184542179, 0.00064776389626786113, 0.00091090844944119453, 0.00045309713459573686, 0.00064231973374262452, 0.00054995360551401973, 0.00071307690814137459, 0.0020586031023412943, 0.00046063971240073442, 0.00043515907600522041, 0.0020395761821419001, 9.4464376161340624e-05, 0.00023545479052700102, 0.00043838482815772295, 0.00046168960398063064, 0.0010364867048338056, 0.00038130572647787631, 0.00023505299759563059, 0.0001654902589507401, 0.0004168170562479645, 0.00096063542878255248, 0.0010732325026765466, 0.00061227509286254644, 0.00046654790639877319, 0.0012208027765154839, 0.00026367092505097389, 0.00037482075276784599, 0.00022730493219569325, 0.00048066227464005351, 0.00031634184415452182, 0.00012714634067378938, 0.002439265139400959, 0.00061943329637870193, 0.0011166319018229842, 0.00049763033166527748, 0.00046588332043029368, 0.00030294383759610355, 0.00055761082330718637, 0.00096502015367150307, 0.0010425335494801402, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 33,26,10,-16,127,50,-44,-38, 
  /* [1][0][][] */ -10,4,0,127,9,-19,0,10, 
  /* [2][0][][] */ 49,-101,-59,58,-1,-80,127,-28, 
  /* [3][0][][] */ 127,-25,-4,42,-6,-38,15,6, 
  /* [4][0][][] */ 4,-60,127,-27,-1,-44,8,-98, 
  /* [5][0][][] */ 52,-6,15,6,127,14,-5,11, 
  /* [6][0][][] */ 17,72,7,127,-12,43,-47,-14, 
  /* [7][0][][] */ -1,127,2,0,3,2,1,-10, 
  /* [8][0][][] */ 127,65,25,36,-63,-23,27,-32, 
  /* [9][0][][] */ -127,12,2,16,64,19,-9,4, 
  /* [10][0][][] */ -46,2,5,127,51,-3,-6,-10, 
  /* [11][0][][] */ -127,14,-8,-101,38,-4,2,-42, 
  /* [12][0][][] */ 127,9,-3,3,-26,-3,3,-32, 
  /* [13][0][][] */ -14,74,-127,-12,-6,107,-67,80, 
  /* [14][0][][] */ -34,-17,-3,127,21,-9,17,-13, 
  /* [15][0][][] */ -6,127,7,0,1,-19,14,-38, 
  /* [16][0][][] */ -15,-127,-41,6,-34,-90,61,-57, 
  /* [17][0][][] */ 17,127,1,-21,2,75,-67,-6, 
  /* [18][0][][] */ 11,35,-127,-11,2,45,-41,50, 
  /* [19][0][][] */ -83,15,0,22,-127,-6,28,30, 
  /* [20][0][][] */ -127,-38,17,-30,77,-20,33,29, 
  /* [21][0][][] */ -34,-7,7,-1,-127,-7,16,14, 
  /* [22][0][][] */ -127,-11,6,24,99,-15,37,38, 
  /* [23][0][][] */ -4,-15,-14,0,-10,66,-127,-97, 
  /* [24][0][][] */ -3,40,-127,-1,6,49,-17,91, 
  /* [25][0][][] */ 88,-14,-21,127,-58,-27,34,-52, 
  /* [26][0][][] */ 0,-14,-7,-5,1,127,115,-32, 
  /* [27][0][][] */ 55,-17,-1,4,127,48,46,-22, 
  /* [28][0][][] */ -5,127,-73,29,9,68,-27,118, 
  /* [29][0][][] */ -10,-1,-5,-16,-16,81,-127,-77, 
  /* [30][0][][] */ 4,-3,-1,-127,-2,-2,-9,-15, 
  /* [31][0][][] */ -41,13,-7,1,-127,12,-13,-4, 
  /* [32][0][][] */ 11,24,-15,-127,-12,21,-66,-67, 
  /* [33][0][][] */ -47,5,-3,-1,-127,26,33,-2, 
  /* [34][0][][] */ -127,11,27,4,83,12,-3,37, 
  /* [35][0][][] */ -62,127,-32,-29,7,-85,89,-44, 
  /* [36][0][][] */ -19,64,15,14,-13,100,-127,-47, 
  /* [37][0][][] */ 50,-85,-21,20,12,-127,127,-44, 
  /* [38][0][][] */ -16,-127,-19,-9,21,4,-9,42, 
  /* [39][0][][] */ -2,-127,-16,-7,3,-12,-53,-100, 
  /* [40][0][][] */ 97,38,58,0,-79,91,-127,-110, 
  /* [41][0][][] */ 13,-126,14,8,-15,79,-48,127, 
  /* [42][0][][] */ 46,-11,-26,-127,-25,-27,20,-28, 
  /* [43][0][][] */ -61,-29,32,-127,47,8,-23,15, 
  /* [44][0][][] */ 4,-46,6,34,-29,107,127,-2, 
  /* [45][0][][] */ -127,-23,9,13,-2,-4,43,-17, 
  /* [46][0][][] */ 16,72,127,4,10,15,15,33, 
  /* [47][0][][] */ 18,5,14,127,-1,14,7,-15, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.00016316998517140746, 0.00074215611675754189, 0.00052514881826937199, 0.0010827436344698071, 0.0041316132992506027, 0.0013504616217687726, 0.0028732758946716785, 0.0026399127673357725, 0.001181203406304121, 0.0014413747703656554, 0.0020269120577722788, 0.0010082111693918705, 0.0014292607083916664, 0.0012237317860126495, 0.0015867063775658607, 0.0045807100832462311, 0.001024994533509016, 0.00096829619724303484, 0.0045383721590042114, 0.00021019783162046224, 0.00052392331417649984, 0.00097547401674091816, 0.001027330756187439, 0.0023063430562615395, 0.00084846420213580132, 0.00052302924450486898, 0.00036824139533564448, 0.00092748238239437342, 0.0021375622600317001, 0.0023881082888692617, 0.0013624067651107907, 0.00103814119938761, 0.0027164749335497618, 0.00058670854195952415, 0.00083403411554172635, 0.00050578860100358725, 0.0010695478413254023, 0.00070390949258580804, 0.00028292025672271848, 0.0054277419112622738, 0.0013783348258584738, 0.0024846785236150026, 0.0011073043569922447, 0.0010366623755544424, 0.00067409686744213104, 0.0012407702160999179, 0.0021473190281540155, 0.0023197983391582966, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -3760, -25643, 25753, 19848, -1829, -1063, 35361, 14644, };
const TfArray<8, float> quant32_scale = { 8, { 0.0012540332973003387, 0.00060778524493798614, 0.0014000895898789167, 0.0012225816026329994, 0.00096215377561748028, 0.0011998747941106558, 0.00087917142082005739, 0.00070913048693910241, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -14,1,11,-102,11,20,11,4,2,1,-1,-5,94,0,-1,3,0,-10,-5,-5,77,3,8,0,30,26,8,6,-4,7,2,-127,5,4,-2,-3,-20,-10,-15,33,4,-27,-7,0,2,0,2,-1, 
  /* [1][0][][] */ -37,-2,-1,-4,51,29,-35,96,28,10,-34,-26,10,0,19,44,0,50,19,-59,-3,33,127,21,-34,-9,62,12,31,-13,19,-17,18,-8,-6,-18,1,-57,4,0,-8,-4,-96,-9,-52,8,-57,-94, 
  /* [2][0][][] */ -58,18,-1,15,45,0,30,24,-4,53,20,-5,-3,0,14,52,0,8,-127,20,-1,10,7,-20,-29,-14,41,18,24,35,23,2,10,-4,-7,-23,9,11,-9,4,39,-10,-32,-5,28,-63,39,18, 
  /* [3][0][][] */ 1,15,-3,1,-4,25,0,-9,61,9,2,2,16,0,-18,0,0,3,-10,-4,-2,3,7,-15,-5,-12,-12,-7,-7,-3,-4,-17,-44,35,-47,-4,7,-1,-3,-127,-4,6,1,-38,0,-3,2,3, 
  /* [4][0][][] */ 5,-5,93,36,4,-13,-6,-1,2,5,-4,0,-73,0,-16,8,0,12,9,2,75,5,-4,1,-10,44,-7,39,3,-4,8,109,4,11,4,5,15,-8,-5,-22,1,-127,7,-6,5,-2,3,3, 
  /* [5][0][][] */ -5,46,0,-9,-4,49,22,18,-26,36,7,55,30,0,-127,-11,0,19,-39,20,-10,19,-11,44,-19,4,36,0,-14,18,24,-17,48,41,-40,-7,3,21,-49,17,28,-14,-9,28,23,64,24,25, 
  /* [6][0][][] */ -17,-56,11,12,45,-44,-22,5,25,-20,-8,90,-5,0,-127,42,0,-1,43,-18,-1,-1,27,-26,29,0,-5,-1,53,-10,-13,-3,89,-31,28,-6,4,-1,-73,-23,-15,-24,-7,-33,-17,-73,-21,-29, 
  /* [7][0][][] */ -119,-21,-13,8,127,20,62,17,19,6,30,-46,-37,0,87,112,0,12,1,65,-9,4,-24,48,28,-8,47,5,25,68,54,-14,-2,-15,-29,-38,3,10,8,38,76,2,-35,-13,68,3,72,75, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.053296413272619247, 0.025830872356891632, 0.059503808617591858, 0.051959719508886337, 0.040891535580158234, 0.05099467933177948, 0.037364784628152847, 0.0301380455493927, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 70637, 62378, 62673, 43250, -478, 14071, 1939, 30263, 30723, 22670, 29089, 5519, -47400, -127, 32822, 1394, -204, 32055, 3055, 1909, -13952, 11175, 55787, 29786, -20787, 28278, 35172, 18692, -1657, 12988, -7967, -50134, 10421, 95713, 32093, 1650, 64529, 290, 134797, -27544, 13467, -29237, 1979, 89312, -3095, 63811, 2109, -23126, };
const TfArray<48, float> quant34_scale = { 48, { 8.5199193563312292e-05, 6.4272120653185993e-05, 0.00017570216732565314, 0.00011784207890741527, 0.00017648545326665044, 0.00015838892431929708, 0.0001263552694581449, 5.1513601647457108e-05, 7.4856376159004867e-05, 3.3514246752019972e-05, 8.6389809439424425e-05, 3.1358715204987675e-05, 0.00017835886683315039, 0.005541567225009203, 7.9561308666598052e-05, 0.00023427556152455509, 0.0027484172023832798, 2.1005756934755482e-05, 9.1450106992851943e-05, 0.0002105491585098207, 0.00010624666174408048, 0.00015200820052996278, 0.00010094699973706156, 3.4032163966912776e-05, 9.5431780209764838e-05, 9.9229640909470618e-05, 3.5628960176836699e-05, 4.4956312194699422e-05, 0.00038305408088490367, 5.3762316383654252e-05, 5.4728876420995221e-05, 0.00018709272262640297, 0.0002402656537014991, 9.7782785815070383e-06, 7.7972326835151762e-05, 0.00015477210399694741, 1.182015967060579e-05, 0.00045977710396982729, 3.3797470678109676e-05, 8.9164248493034393e-05, 6.7105436755809933e-05, 0.00024990711244754493, 0.00011783499940065667, 9.6881904028123245e-06, 0.00012027798220515251, 8.9835550170391798e-05, 0.00017951121844816953, 0.00012207331019453704, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -44,-22,-8,-17,6,-40,-79,-69,-27,-52,10,63,35,-71,116,-43,-113,-90,35,-8,0,-77,-113,-76,-36,-126,-61,-20,72,17,97,27,-127,-95,-4,53,17,47,-127,80,-76,-14,105,-104,2,-35,-87,106, 76,16,-29,-29,56,-127,-127,-81,59,-75,-111,107,39,-82,0,60,-52,-112,58,5,14,-110,-127,-72,-3,-127,-119,-40,-55,24,-57,53,29,-127,65,86,11,72,-92,127,-127,5,121,-127,5,-24,-127,93, -32,42,7,-6,-64,-108,-59,-19,85,-11,-127,39,9,-71,-101,-11,-127,-30,28,11,-15,-77,-36,-24,-11,-27,-59,-10,-12,19,-22,9,105,-85,71,31,11,36,-7,16,-77,5,6,-79,-16,5,-55,15, 
  /* [0][1][][] */ -87,-127,-46,-43,-9,53,100,-105,-27,-107,-20,108,89,-64,29,-98,-121,-95,90,-78,39,-91,-99,-127,41,-118,-77,-38,127,-59,127,85,-46,-87,-12,86,-33,-78,-107,91,44,62,106,-105,-90,-119,80,119, 127,-83,-127,-127,127,40,95,-127,97,-127,-105,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-117,-117,127,-97,-127,-127,-124,-127,-73,127,27,-111,127,127,-68,-127,-96,88,64,127,127,-116,-114,-127,123,127, -54,31,-61,-86,-117,-22,31,-38,127,-24,-73,38,56,-70,-25,-45,-37,-33,54,-71,54,-82,-37,-27,48,-2,-45,-53,12,-87,-35,20,25,-93,118,22,-36,-62,-1,-14,39,55,12,-78,-58,-39,63,36, 
  /* [0][2][][] */ -60,-107,-35,-34,1,34,-5,-38,-32,-61,-14,58,77,-127,-127,-64,-43,-22,65,75,49,-37,-12,-61,30,-54,-14,-57,77,31,78,64,107,-29,-36,-12,-94,33,-20,37,10,37,20,-57,97,-80,3,28, 87,-77,-89,-87,81,18,6,-48,46,-70,-27,58,84,-26,16,93,-24,-33,78,119,83,-58,-17,-57,90,-68,-21,-96,-53,42,-45,111,-17,-50,72,4,-127,49,-17,1,10,31,19,-67,127,-100,-13,38, -29,29,-43,-38,-78,-17,21,-13,63,-6,-11,34,31,-43,111,-30,-93,-7,30,60,72,-36,0,-5,41,-1,-5,-62,-15,31,-20,39,-91,-41,68,2,-22,21,24,-36,7,36,1,-17,61,-39,-2,16, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.003620965639129281, 0.0027315651532262564, 0.0074673420749604702, 0.0050082881934940815, 0.0075006317347288132, 0.0067315292544662952, 0.0053700986318290234, 0.0021893279626965523, 0.0031813958194106817, 0.0014243554323911667, 0.0036715669557452202, 0.0013327454216778278, 0.0075802518986165524, 0.23551659286022186, 0.0033813556656241417, 0.00995671097189188, 0.1168077290058136, 0.00089274469064548612, 0.0038866293616592884, 0.0089483391493558884, 0.0045154830440878868, 0.0064603486098349094, 0.0042902473360300064, 0.0014463670086115599, 0.0040558506734669209, 0.0042172595858573914, 0.0015142308548092842, 0.0019106431864202023, 0.016279798001050949, 0.0022848984226584435, 0.002325977198779583, 0.0079514402896165848, 0.01021128986030817, 0.00041557682561688125, 0.0033138238359242678, 0.0065778139978647232, 0.00050235679373145103, 0.01954052597284317, 0.0014363924274221063, 0.0037894805427640676, 0.002851980971172452, 0.010621052235364914, 0.0050079873763024807, 0.00041174807120114565, 0.0051118140108883381, 0.0038180109113454819, 0.0076292264275252819, 0.005188115406781435, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 3649, 122, 8623, 5091, 5949, 6190, 10558, -32, -83, -267, 2477, 390, 11537, -72981408, 2409, 13723, -58914376, -99, -477, 12295, 3828, 1, -60, 295, 3213, -716, 53, 583, 3519, 1591, 2490, 13690, 3250, 265, 220, -2298, 426, 3362, -148, 10293, 1819, 10539, -393, -68, 12381, 43, 11575, 3815, };
const TfArray<48, float> quant36_scale = { 48, { 0.00056135118938982487, 0.00058476114645600319, 0.00036564512993209064, 0.0003649337450042367, 0.00033624173374846578, 0.00034012767719104886, 0.00036422500852495432, 0.0013846848160028458, 0.00059454597067087889, 0.0026479656808078289, 0.00062963052187114954, 0.0021946860942989588, 0.0001937640190590173, 2.2222599316279457e-09, 0.0011025844141840935, 0.00023982387210708112, 2.2222599316279457e-09, 0.0075322878547012806, 0.00050249195192009211, 0.00031804695026949048, 0.00027600041357800364, 0.0058119907043874264, 0.00046525633661076427, 0.0019296112004667521, 0.0011606034822762012, 0.00065862474730238318, 0.002861604792997241, 0.0021718181669712067, 0.00033063674345612526, 0.0018558191368356347, 0.0012000343995168805, 0.00016987527487799525, 0.00023171080101747066, 0.012044105678796768, 0.00061338389059528708, 0.00049741176189854741, 0.003385704942047596, 0.00038998413947410882, 0.0026376666501164436, 0.00033711886499077082, 0.0015212398720905185, 0.00021095105330459774, 0.00044820221955887973, 0.012055861763656139, 0.00040714198257774115, 0.0004977894714102149, 0.00024206351372413337, 0.00023899173538666219, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 29,-127,54,-36,30,-15,-44,21, 
  /* [1][0][][] */ 66,79,-31,-101,12,-11,-77,127, 
  /* [2][0][][] */ 30,1,-44,115,57,127,44,87, 
  /* [3][0][][] */ 73,70,-75,127,-81,-15,-14,7, 
  /* [4][0][][] */ -40,-84,74,3,-2,49,-21,-127, 
  /* [5][0][][] */ 14,-11,-32,37,-5,-12,32,127, 
  /* [6][0][][] */ 92,-21,-127,-115,106,63,56,-49, 
  /* [7][0][][] */ 127,19,16,-25,32,-5,89,-62, 
  /* [8][0][][] */ 6,-67,8,108,4,2,2,-127, 
  /* [9][0][][] */ 100,-101,18,7,-12,16,-127,89, 
  /* [10][0][][] */ -127,-41,-123,30,-26,17,-121,66, 
  /* [11][0][][] */ -26,-38,-4,-100,-127,-6,48,-16, 
  /* [12][0][][] */ 20,16,-36,74,-71,-28,43,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 1,-32,-3,5,44,127,38,37, 
  /* [15][0][][] */ 34,12,12,-127,49,41,-49,70, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 20,20,127,18,-41,-11,37,44, 
  /* [18][0][][] */ 77,-127,6,24,-4,11,-85,2, 
  /* [19][0][][] */ -127,27,75,94,-77,-51,-61,77, 
  /* [20][0][][] */ 45,35,-44,127,-50,-119,5,81, 
  /* [21][0][][] */ 57,11,127,22,-5,1,63,9, 
  /* [22][0][][] */ -67,-19,-127,-7,4,5,-84,3, 
  /* [23][0][][] */ -84,107,-28,-5,0,-11,127,-54, 
  /* [24][0][][] */ 2,-52,-48,85,-5,-68,89,127, 
  /* [25][0][][] */ 1,48,58,50,127,120,-79,-67, 
  /* [26][0][][] */ -76,-41,-127,-4,-1,9,-80,7, 
  /* [27][0][][] */ 4,-42,-32,8,-25,127,58,52, 
  /* [28][0][][] */ 9,-8,-23,25,16,127,49,57, 
  /* [29][0][][] */ 103,35,127,-9,-41,-14,96,1, 
  /* [30][0][][] */ -87,127,-16,-40,4,-2,90,-61, 
  /* [31][0][][] */ -38,-93,-28,13,43,-84,127,116, 
  /* [32][0][][] */ 2,-7,-55,106,-23,107,85,127, 
  /* [33][0][][] */ -10,61,-14,-110,23,-4,-3,127, 
  /* [34][0][][] */ -16,73,11,-104,28,-2,10,127, 
  /* [35][0][][] */ 127,41,-27,-40,32,112,113,-51, 
  /* [36][0][][] */ -127,2,30,61,-42,-18,-119,116, 
  /* [37][0][][] */ -5,-24,-4,26,21,127,45,57, 
  /* [38][0][][] */ 17,26,6,92,127,-13,-27,38, 
  /* [39][0][][] */ -9,38,47,-127,29,-1,-42,112, 
  /* [40][0][][] */ 95,15,127,12,-36,-7,97,-15, 
  /* [41][0][][] */ -4,-15,-26,93,62,127,70,90, 
  /* [42][0][][] */ -64,-11,127,8,-51,16,-31,62, 
  /* [43][0][][] */ -15,-45,2,100,-9,-17,13,-127, 
  /* [44][0][][] */ 37,-18,-103,-127,85,-28,-7,-120, 
  /* [45][0][][] */ -110,127,-5,-56,18,2,86,-65, 
  /* [46][0][][] */ -127,-11,85,47,-57,57,-90,61, 
  /* [47][0][][] */ 91,-3,105,-21,45,-34,127,-24, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.00099450291600078344, 0.0010359765728935599, 0.00064778549131006002, 0.00064652517903596163, 0.00059569376753643155, 0.00060257816221565008, 0.00064526958158239722, 0.0024531402159482241, 0.0010533116292208433, 0.0046911980025470257, 0.0011154682142660022, 0.0038881574291735888, 0.00034327688626945019, 3.937008052901092e-09, 0.0019533643499016762, 0.00042487759492360055, 3.937008052901092e-09, 0.013344378210604191, 0.0008902265690267086, 0.00056345947086811066, 0.00048896879889070988, 0.010296659544110298, 0.00082425907021388412, 0.003418544540181756, 0.0020561523269861937, 0.0011668350780382752, 0.0050696860998868942, 0.0038476441986858845, 0.00058576383162289858, 0.0032878126949071884, 0.0021260092034935951, 0.00030095502734184265, 0.00041050428990274668, 0.021337620913982391, 0.0010866853408515453, 0.00088122638408094645, 0.0059981942176818848, 0.00069090508623048663, 0.0046729519963264465, 0.00059724767925217748, 0.0026950642932206392, 0.00037372583756223321, 0.00079404556890949607, 0.021358447149395943, 0.00072130229091271758, 0.00088189548114314675, 0.00042884540744125843, 0.00042340336949564517, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 98, -39089, -9211, -11941, -27775, -1786, -27442, -27550, };
const TfArray<8, float> quant38_scale = { 8, { 0.0018999908352270722, 0.0023707670625299215, 0.0027206509839743376, 0.0012552944244816899, 0.0012750783935189247, 0.0021937305573374033, 0.0013749280478805304, 0.001004859572276473, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-13,-3,-5,124,-4,4,0,-1,-127,-91,-10,0,110,-3,0, 
  /* [1][0][][] */ 0,-21,5,83,66,2,18,1,1,-3,127,-47,0,29,-14,0, 
  /* [2][0][][] */ 0,5,0,-13,-57,1,8,9,0,3,-15,3,0,127,-8,0, 
  /* [3][0][][] */ 0,-13,-23,-127,88,22,71,17,-1,65,-2,38,0,1,7,0, 
  /* [4][0][][] */ 0,50,-24,31,-55,23,127,-2,1,-61,19,-9,0,-7,4,0, 
  /* [5][0][][] */ 0,-15,-8,-1,-27,-27,-9,11,-1,7,-4,-48,0,-5,127,0, 
  /* [6][0][][] */ 0,8,-1,-1,44,-15,-18,4,2,-120,127,67,0,125,65,0, 
  /* [7][0][][] */ 0,7,-14,127,8,-2,22,4,-1,74,-62,69,0,-3,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.08074960857629776, 0.10075759887695312, 0.11562766134738922, 0.053350012749433517, 0.054190829396247864, 0.093233548104763031, 0.058434441685676575, 0.042706530541181564, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 18227, 29863, 11021, 10365, 69079, 13131, 36261, -10597, 5189, 28567, 14505, -445, 26282, 10123, -107, };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00014363235095515847, 0.00013479951303452253, 0.00031966259120963514, 0.00017084868159145117, 4.8572619562037289e-05, 0.00036906320019625127, 0.00010646777809597552, 1.9941853679483756e-05, 0.00032794952858239412, 0.00020532797498162836, 0.00075226550688967109, 0.00072724185883998871, 0.00023704138584434986, 0.000208566605579108, 0.003907486330717802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-84,-127,39,-68,80,-75,-90,-3,-7,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-85,127,-127,51,-105,6,127,-25, 24,-24,85,-2,-72,63,-94,81,-95,-27,4,-16,61,2,-102,-29, 
  /* [0][1][][] */ -127,127,-26,13,-44,14,-28,16,-28,1,3,-108,-49,9,-29,-14, -78,-41,-60,-15,-8,-27,8,-26,-108,-89,21,-11,-104,-127,1,23, 14,1,59,2,3,30,-25,36,-127,7,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,62,2,-6,36,-39,54,-76,0,-1,4,40,2,-27,23, 23,-4,26,-2,-27,37,-34,22,-125,-13,0,84,-58,0,-28,-111, 21,-7,15,0,4,11,9,25,-115,5,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0061043747700750828, 0.0057289791293442249, 0.013585659675300121, 0.0072610685601830482, 0.0020643363241106272, 0.015685185790061951, 0.0045248805545270443, 0.00084752874681726098, 0.013937855139374733, 0.008726438507437706, 0.031971283257007599, 0.030907778069376945, 0.010074258781969547, 0.0088640805333852768, 0.16606816649436951, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 29461, -136044, 22154, 369831, 11145, 54345, 10362, -187370, 22662, 22546, 1868327, -1073741824, 36709, 38334, -1073741824, };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00011888312292285264, 0.00013260279956739396, 3.9717844629194587e-05, 8.0331901699537411e-06, 0.00030430624610744417, 7.0571928517892957e-05, 0.00026495265774428844, 5.3623366511601489e-06, 6.6820473875850439e-05, 0.00013364508049562573, 3.0635260372946505e-06, 1.1533876076441629e-09, 0.00010480087803443894, 5.996850086376071e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 40,1,26, -11,-16,11, -127,-96,-72, 
  /* [1][1][][] */ -8,-6,-7, -33,2,-12, -15,-28,-9, 
  /* [1][2][][] */ -17,10,-13, -20,1,-15, 22,-22,-5, 
  /* [2][0][][] */ 34,-1,1, 62,116,4, 53,-41,16, 
  /* [2][1][][] */ 22,16,11, 74,127,-21, 45,-3,5, 
  /* [2][2][][] */ 65,-71,31, 89,-52,-15, 52,-57,27, 
  /* [3][0][][] */ 2,31,18, 26,94,28, -9,-3,-12, 
  /* [3][1][][] */ 27,39,31, 65,127,41, -29,-35,-9, 
  /* [3][2][][] */ 6,-6,19, 24,18,14, -13,-15,-5, 
  /* [4][0][][] */ 60,75,36, 25,90,29, -36,-15,22, 
  /* [4][1][][] */ 71,59,109, 69,127,101, 30,35,14, 
  /* [4][2][][] */ 86,61,88, 85,124,87, -31,-7,65, 
  /* [5][0][][] */ 21,12,-122, 12,14,-98, 5,36,-26, 
  /* [5][1][][] */ 21,-28,-127, 14,-30,-108, 13,22,-19, 
  /* [5][2][][] */ 13,19,-14, 11,3,-13, 14,21,-4, 
  /* [6][0][][] */ 19,-65,33, 43,-85,40, 8,-19,11, 
  /* [6][1][][] */ 28,-99,58, 57,-127,70, 3,-30,17, 
  /* [6][2][][] */ 18,-34,16, 14,-43,29, -12,7,3, 
  /* [7][0][][] */ -23,20,-3, -109,-42,-14, -15,29,5, 
  /* [7][1][][] */ -7,-2,-1, -127,-87,-13, -2,1,8, 
  /* [7][2][][] */ -21,30,-8, -17,7,-6, -19,27,-1, 
  /* [8][0][][] */ 55,90,53, 76,127,102, 100,124,95, 
  /* [8][1][][] */ 54,91,43, 97,125,97, 103,124,93, 
  /* [8][2][][] */ 35,69,20, 53,116,58, 86,115,76, 
  /* [9][0][][] */ -24,10,22, -6,23,24, 1,12,-6, 
  /* [9][1][][] */ 80,105,-13, 59,127,11, -10,25,28, 
  /* [9][2][][] */ -42,-46,-3, -17,-57,-28, 8,0,-30, 
  /* [10][0][][] */ -25,-82,-18, 33,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-102,-14, 78,127,15, -17,-26,0, 
  /* [10][2][][] */ -32,-19,2, 36,23,-11, -9,0,7, 
  /* [11][0][][] */ -34,-45,-11, -10,-61,-4, 2,-109,-56, 
  /* [11][1][][] */ -63,-59,-27, -53,-80,-46, -22,-67,-58, 
  /* [11][2][][] */ -11,-43,-86, 117,127,60, -42,12,-53, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-17,-5, 
  /* [13][1][][] */ 61,114,16, 57,127,25, 7,16,11, 
  /* [13][2][][] */ -9,-19,3, 1,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 46,-10,-37, 80,-28,-48, 36,-8,-14, 
  /* [14][1][][] */ 87,-23,-75, 127,-44,-87, 60,-19,-33, 
  /* [14][2][][] */ 58,-14,-44, 78,-24,-49, 28,-9,-15, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.03031519427895546, 0.033813711255788803, 0.010128050111234188, 0.0020484633278101683, 0.07759808748960495, 0.017995839938521385, 0.067562922835350037, 0.001367395743727684, 0.017039218917489052, 0.034079492092132568, 0.0007811990799382329, 2.9411381774480105e-07, 0.026724223047494888, 0.015291966497898102, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.56445401906967163, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.44940698146820068, } };
const TfArray<1, int> quant50_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.51852512359619141, } };
const TfArray<1, int> quant53_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.60182666778564453, } };
const TfArray<1, int> quant54_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28493461012840271, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.27215850353240967, } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&g0::quant54_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.31774699687957764, } };
const TfArray<1, int> quant62_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.25266736745834351, } };
const TfArray<1, int> quant65_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.41125303506851196, } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&g0::quant65_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.060945805162191391, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.19322507083415985, } };
const TfArray<1, int> quant69_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
